#include "py4godot/cpputils/utils.h"
#include "py4godot/cppclasses/generated4_core.h"
#include "py4godot/cppclasses/typedarrays.h"

#include "py4godot/cppclasses/RDFramebufferPass/RDFramebufferPass.h"
#include "py4godot/cppclasses/GLTFAccessor/GLTFAccessor.h"
#include "py4godot/cppclasses/RDPipelineColorBlendStateAttachment/RDPipelineColorBlendStateAttachment.h"
#include "py4godot/cppclasses/GLTFAnimation/GLTFAnimation.h"
#include "py4godot/cppclasses/ENetPacketPeer/ENetPacketPeer.h"
#include "py4godot/cppclasses/Node2D/Node2D.h"
#include "py4godot/cppclasses/RegExMatch/RegExMatch.h"
#include "py4godot/cppclasses/PhysicsBody2D/PhysicsBody2D.h"
#include "py4godot/cppclasses/RDPipelineSpecializationConstant/RDPipelineSpecializationConstant.h"
#include "py4godot/cppclasses/TreeItem/TreeItem.h"
#include "py4godot/cppclasses/GLTFNode/GLTFNode.h"
#include "py4godot/cppclasses/GLTFLight/GLTFLight.h"
#include "py4godot/cppclasses/GLTFSkeleton/GLTFSkeleton.h"
#include "py4godot/cppclasses/GLTFCamera/GLTFCamera.h"
#include "py4godot/cppclasses/Image/Image.h"
#include "py4godot/cppclasses/Tween/Tween.h"
#include "py4godot/cppclasses/BaseButton/BaseButton.h"
#include "py4godot/cppclasses/Material/Material.h"
#include "py4godot/cppclasses/GLTFSkin/GLTFSkin.h"
#include "py4godot/cppclasses/GLTFMesh/GLTFMesh.h"
#include "py4godot/cppclasses/GLTFBufferView/GLTFBufferView.h"
#include "py4godot/cppclasses/Node3D/Node3D.h"
#include "py4godot/cppclasses/Font/Font.h"
#include "py4godot/cppclasses/RDUniform/RDUniform.h"
#include "py4godot/cppclasses/Node3DGizmo/Node3DGizmo.h"
#include "py4godot/cppclasses/Texture2D/Texture2D.h"
#include "py4godot/cppclasses/Node/Node.h"
#include "py4godot/cppclasses/RDVertexAttribute/RDVertexAttribute.h"
#include "py4godot/cppclasses/InputEvent/InputEvent.h"
#include "py4godot/cppclasses/GLTFTextureSampler/GLTFTextureSampler.h"
#include "py4godot/cppclasses/Script/Script.h"
#include "py4godot/cppclasses/RDAttachmentFormat/RDAttachmentFormat.h"
#include "py4godot/cppclasses/Area2D/Area2D.h"
#include "py4godot/cppclasses/GLTFTexture/GLTFTexture.h"
#include "py4godot/cppclasses/ScriptEditorBase/ScriptEditorBase.h"
#include "py4godot/cppclasses/Area3D/Area3D.h"
#include "py4godot/cppclasses/PhysicsBody3D/PhysicsBody3D.h"
#include "py4godot/cppclasses/Mesh/Mesh.h"
#include "py4godot/cppclasses/CameraFeed/CameraFeed.h"
#include "main.h"


  void RIDTypedArray::RIDTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  RIDTypedArray::~RIDTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<RIDTypedArray> RIDTypedArray::constructor(){
    RIDTypedArray class_ = RIDTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<RIDTypedArray>(class_);
  }

  RIDTypedArray RIDTypedArray::new_static(GDExtensionObjectPtr owner){
    RIDTypedArray obj = RIDTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void RIDTypedArray::set_gdowner_RIDTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  RIDTypedArray::RIDTypedArray(const RIDTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RIDTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  RIDTypedArray& RIDTypedArray::operator=(const RIDTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RIDTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  RIDTypedArray RIDTypedArray::new0(){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new0(){
    auto _class = RIDTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new1(Array& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = RIDTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = RIDTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new3(PackedByteArray& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = RIDTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new4(PackedInt32Array& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = RIDTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new5(PackedInt64Array& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = RIDTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new6(PackedFloat32Array& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = RIDTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new7(PackedFloat64Array& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = RIDTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new8(PackedStringArray& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = RIDTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new9(PackedVector2Array& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = RIDTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new10(PackedVector3Array& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = RIDTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}
  RIDTypedArray RIDTypedArray::new11(PackedColorArray& from_){
    RIDTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RIDTypedArray> RIDTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = RIDTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RIDTypedArray>(_class);
}

  Variant RIDTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long RIDTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long RIDTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RIDTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool RIDTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RIDTypedArray::py_clear(){
    this->clear();

  }


  void RIDTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RIDTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long RIDTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RIDTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void RIDTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RIDTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RIDTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RIDTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RIDTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RIDTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RIDTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RIDTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void RIDTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long RIDTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long RIDTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RIDTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RIDTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void RIDTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void RIDTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RIDTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RIDTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RIDTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RIDTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* RIDTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RIDTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RIDTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RIDTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RIDTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RIDTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long RIDTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RIDTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RIDTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RIDTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RIDTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RIDTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RIDTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool RIDTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RIDTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RIDTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RIDTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RIDTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RIDTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RIDTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void RIDTypedArray::py_sort(){
    this->sort();

  }


  void RIDTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void RIDTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void RIDTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RIDTypedArray::py_shuffle(){
    this->shuffle();

  }


  void RIDTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RIDTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RIDTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RIDTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RIDTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void RIDTypedArray::py_reverse(){
    this->reverse();

  }


  void RIDTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> RIDTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array RIDTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RIDTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array RIDTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> RIDTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RIDTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RIDTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RIDTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* RIDTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant RIDTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool RIDTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool RIDTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RIDTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool RIDTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RIDTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RIDTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RIDTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RIDTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool RIDTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool RIDTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RIDTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool RIDTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RIDTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long RIDTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> RIDTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName RIDTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* RIDTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RIDTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void RIDTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void RIDTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool RIDTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool RIDTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RIDTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RIDTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool RIDTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RIDTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool RIDTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RIDTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool RIDTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RIDTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool RIDTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RIDTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool RIDTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RIDTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool RIDTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RIDTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool RIDTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RIDTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array RIDTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> RIDTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void RDFramebufferPassTypedArray::RDFramebufferPassTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  RDFramebufferPassTypedArray::~RDFramebufferPassTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::constructor(){
    RDFramebufferPassTypedArray class_ = RDFramebufferPassTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<RDFramebufferPassTypedArray>(class_);
  }

  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new_static(GDExtensionObjectPtr owner){
    RDFramebufferPassTypedArray obj = RDFramebufferPassTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void RDFramebufferPassTypedArray::set_gdowner_RDFramebufferPassTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  RDFramebufferPassTypedArray::RDFramebufferPassTypedArray(const RDFramebufferPassTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDFramebufferPassTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  RDFramebufferPassTypedArray& RDFramebufferPassTypedArray::operator=(const RDFramebufferPassTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDFramebufferPassTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new0(){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new0(){
    auto _class = RDFramebufferPassTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new1(Array& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = RDFramebufferPassTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = RDFramebufferPassTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new3(PackedByteArray& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = RDFramebufferPassTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new4(PackedInt32Array& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = RDFramebufferPassTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new5(PackedInt64Array& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = RDFramebufferPassTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new6(PackedFloat32Array& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = RDFramebufferPassTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new7(PackedFloat64Array& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = RDFramebufferPassTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new8(PackedStringArray& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = RDFramebufferPassTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new9(PackedVector2Array& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = RDFramebufferPassTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new10(PackedVector3Array& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = RDFramebufferPassTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}
  RDFramebufferPassTypedArray RDFramebufferPassTypedArray::new11(PackedColorArray& from_){
    RDFramebufferPassTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDFramebufferPassTypedArray> RDFramebufferPassTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = RDFramebufferPassTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDFramebufferPassTypedArray>(_class);
}

  Variant RDFramebufferPassTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long RDFramebufferPassTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long RDFramebufferPassTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDFramebufferPassTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool RDFramebufferPassTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDFramebufferPassTypedArray::py_clear(){
    this->clear();

  }


  void RDFramebufferPassTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDFramebufferPassTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long RDFramebufferPassTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDFramebufferPassTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void RDFramebufferPassTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDFramebufferPassTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDFramebufferPassTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDFramebufferPassTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDFramebufferPassTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDFramebufferPassTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDFramebufferPassTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDFramebufferPassTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void RDFramebufferPassTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long RDFramebufferPassTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long RDFramebufferPassTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDFramebufferPassTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDFramebufferPassTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void RDFramebufferPassTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void RDFramebufferPassTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDFramebufferPassTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDFramebufferPassTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDFramebufferPassTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDFramebufferPassTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* RDFramebufferPassTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDFramebufferPassTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDFramebufferPassTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long RDFramebufferPassTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDFramebufferPassTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDFramebufferPassTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDFramebufferPassTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDFramebufferPassTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDFramebufferPassTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDFramebufferPassTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool RDFramebufferPassTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDFramebufferPassTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDFramebufferPassTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDFramebufferPassTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void RDFramebufferPassTypedArray::py_sort(){
    this->sort();

  }


  void RDFramebufferPassTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void RDFramebufferPassTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void RDFramebufferPassTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDFramebufferPassTypedArray::py_shuffle(){
    this->shuffle();

  }


  void RDFramebufferPassTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDFramebufferPassTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDFramebufferPassTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDFramebufferPassTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDFramebufferPassTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void RDFramebufferPassTypedArray::py_reverse(){
    this->reverse();

  }


  void RDFramebufferPassTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> RDFramebufferPassTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDFramebufferPassTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDFramebufferPassTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDFramebufferPassTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> RDFramebufferPassTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDFramebufferPassTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDFramebufferPassTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDFramebufferPassTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* RDFramebufferPassTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool RDFramebufferPassTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool RDFramebufferPassTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDFramebufferPassTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool RDFramebufferPassTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDFramebufferPassTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDFramebufferPassTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool RDFramebufferPassTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool RDFramebufferPassTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDFramebufferPassTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool RDFramebufferPassTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDFramebufferPassTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long RDFramebufferPassTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> RDFramebufferPassTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName RDFramebufferPassTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* RDFramebufferPassTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDFramebufferPassTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void RDFramebufferPassTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void RDFramebufferPassTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool RDFramebufferPassTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool RDFramebufferPassTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDFramebufferPassTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool RDFramebufferPassTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool RDFramebufferPassTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDFramebufferPassTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array RDFramebufferPassTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> RDFramebufferPassTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void DictionaryTypedArray::DictionaryTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  DictionaryTypedArray::~DictionaryTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::constructor(){
    DictionaryTypedArray class_ = DictionaryTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<DictionaryTypedArray>(class_);
  }

  DictionaryTypedArray DictionaryTypedArray::new_static(GDExtensionObjectPtr owner){
    DictionaryTypedArray obj = DictionaryTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void DictionaryTypedArray::set_gdowner_DictionaryTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  DictionaryTypedArray::DictionaryTypedArray(const DictionaryTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<DictionaryTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  DictionaryTypedArray& DictionaryTypedArray::operator=(const DictionaryTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<DictionaryTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  DictionaryTypedArray DictionaryTypedArray::new0(){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new0(){
    auto _class = DictionaryTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new1(Array& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = DictionaryTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = DictionaryTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new3(PackedByteArray& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = DictionaryTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new4(PackedInt32Array& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = DictionaryTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new5(PackedInt64Array& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = DictionaryTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new6(PackedFloat32Array& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = DictionaryTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new7(PackedFloat64Array& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = DictionaryTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new8(PackedStringArray& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = DictionaryTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new9(PackedVector2Array& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = DictionaryTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new10(PackedVector3Array& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = DictionaryTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}
  DictionaryTypedArray DictionaryTypedArray::new11(PackedColorArray& from_){
    DictionaryTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<DictionaryTypedArray> DictionaryTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = DictionaryTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<DictionaryTypedArray>(_class);
}

  Variant DictionaryTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long DictionaryTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long DictionaryTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool DictionaryTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool DictionaryTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void DictionaryTypedArray::py_clear(){
    this->clear();

  }


  void DictionaryTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long DictionaryTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long DictionaryTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void DictionaryTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void DictionaryTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void DictionaryTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void DictionaryTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void DictionaryTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void DictionaryTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void DictionaryTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void DictionaryTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void DictionaryTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void DictionaryTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long DictionaryTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long DictionaryTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long DictionaryTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long DictionaryTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void DictionaryTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void DictionaryTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void DictionaryTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void DictionaryTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void DictionaryTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void DictionaryTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* DictionaryTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant DictionaryTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* DictionaryTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant DictionaryTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* DictionaryTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant DictionaryTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long DictionaryTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long DictionaryTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long DictionaryTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long DictionaryTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long DictionaryTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long DictionaryTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool DictionaryTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool DictionaryTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* DictionaryTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant DictionaryTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* DictionaryTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant DictionaryTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* DictionaryTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant DictionaryTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void DictionaryTypedArray::py_sort(){
    this->sort();

  }


  void DictionaryTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void DictionaryTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void DictionaryTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void DictionaryTypedArray::py_shuffle(){
    this->shuffle();

  }


  void DictionaryTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long DictionaryTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long DictionaryTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long DictionaryTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long DictionaryTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void DictionaryTypedArray::py_reverse(){
    this->reverse();

  }


  void DictionaryTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> DictionaryTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array DictionaryTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> DictionaryTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array DictionaryTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> DictionaryTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array DictionaryTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> DictionaryTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array DictionaryTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* DictionaryTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant DictionaryTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool DictionaryTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool DictionaryTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool DictionaryTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool DictionaryTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* DictionaryTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant DictionaryTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* DictionaryTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant DictionaryTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool DictionaryTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool DictionaryTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool DictionaryTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool DictionaryTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long DictionaryTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long DictionaryTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> DictionaryTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName DictionaryTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* DictionaryTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant DictionaryTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void DictionaryTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void DictionaryTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool DictionaryTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool DictionaryTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool DictionaryTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool DictionaryTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool DictionaryTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool DictionaryTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool DictionaryTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool DictionaryTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool DictionaryTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool DictionaryTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool DictionaryTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool DictionaryTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool DictionaryTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool DictionaryTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool DictionaryTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool DictionaryTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool DictionaryTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool DictionaryTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array DictionaryTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> DictionaryTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFAccessorTypedArray::GLTFAccessorTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFAccessorTypedArray::~GLTFAccessorTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::constructor(){
    GLTFAccessorTypedArray class_ = GLTFAccessorTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFAccessorTypedArray>(class_);
  }

  GLTFAccessorTypedArray GLTFAccessorTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFAccessorTypedArray obj = GLTFAccessorTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFAccessorTypedArray::set_gdowner_GLTFAccessorTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFAccessorTypedArray::GLTFAccessorTypedArray(const GLTFAccessorTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFAccessorTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFAccessorTypedArray& GLTFAccessorTypedArray::operator=(const GLTFAccessorTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFAccessorTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new0(){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new0(){
    auto _class = GLTFAccessorTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new1(Array& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFAccessorTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFAccessorTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new3(PackedByteArray& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFAccessorTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new4(PackedInt32Array& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFAccessorTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new5(PackedInt64Array& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFAccessorTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new6(PackedFloat32Array& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFAccessorTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new7(PackedFloat64Array& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFAccessorTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new8(PackedStringArray& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFAccessorTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new9(PackedVector2Array& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFAccessorTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new10(PackedVector3Array& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFAccessorTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}
  GLTFAccessorTypedArray GLTFAccessorTypedArray::new11(PackedColorArray& from_){
    GLTFAccessorTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAccessorTypedArray> GLTFAccessorTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFAccessorTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAccessorTypedArray>(_class);
}

  Variant GLTFAccessorTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFAccessorTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFAccessorTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFAccessorTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFAccessorTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFAccessorTypedArray::py_clear(){
    this->clear();

  }


  void GLTFAccessorTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFAccessorTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFAccessorTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFAccessorTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFAccessorTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAccessorTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAccessorTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAccessorTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAccessorTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAccessorTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAccessorTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAccessorTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFAccessorTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFAccessorTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFAccessorTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFAccessorTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFAccessorTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFAccessorTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFAccessorTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAccessorTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAccessorTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAccessorTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAccessorTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFAccessorTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAccessorTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAccessorTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFAccessorTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFAccessorTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFAccessorTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFAccessorTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFAccessorTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFAccessorTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFAccessorTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFAccessorTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFAccessorTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAccessorTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAccessorTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFAccessorTypedArray::py_sort(){
    this->sort();

  }


  void GLTFAccessorTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFAccessorTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFAccessorTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAccessorTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFAccessorTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFAccessorTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFAccessorTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFAccessorTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFAccessorTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFAccessorTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFAccessorTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFAccessorTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFAccessorTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFAccessorTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFAccessorTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFAccessorTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFAccessorTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFAccessorTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFAccessorTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFAccessorTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFAccessorTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFAccessorTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFAccessorTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFAccessorTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFAccessorTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAccessorTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFAccessorTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFAccessorTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFAccessorTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFAccessorTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFAccessorTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFAccessorTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFAccessorTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFAccessorTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFAccessorTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAccessorTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFAccessorTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFAccessorTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFAccessorTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFAccessorTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFAccessorTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFAccessorTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFAccessorTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAccessorTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFAccessorTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFAccessorTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFAccessorTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAccessorTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFAccessorTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAccessorTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFAccessorTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAccessorTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFAccessorTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAccessorTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFAccessorTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAccessorTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFAccessorTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFAccessorTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void PlaneTypedArray::PlaneTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  PlaneTypedArray::~PlaneTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::constructor(){
    PlaneTypedArray class_ = PlaneTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<PlaneTypedArray>(class_);
  }

  PlaneTypedArray PlaneTypedArray::new_static(GDExtensionObjectPtr owner){
    PlaneTypedArray obj = PlaneTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void PlaneTypedArray::set_gdowner_PlaneTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  PlaneTypedArray::PlaneTypedArray(const PlaneTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PlaneTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  PlaneTypedArray& PlaneTypedArray::operator=(const PlaneTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PlaneTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  PlaneTypedArray PlaneTypedArray::new0(){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new0(){
    auto _class = PlaneTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new1(Array& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = PlaneTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = PlaneTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new3(PackedByteArray& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = PlaneTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new4(PackedInt32Array& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = PlaneTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new5(PackedInt64Array& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = PlaneTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new6(PackedFloat32Array& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = PlaneTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new7(PackedFloat64Array& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = PlaneTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new8(PackedStringArray& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = PlaneTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new9(PackedVector2Array& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = PlaneTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new10(PackedVector3Array& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = PlaneTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}
  PlaneTypedArray PlaneTypedArray::new11(PackedColorArray& from_){
    PlaneTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PlaneTypedArray> PlaneTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = PlaneTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PlaneTypedArray>(_class);
}

  Variant PlaneTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long PlaneTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long PlaneTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PlaneTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool PlaneTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PlaneTypedArray::py_clear(){
    this->clear();

  }


  void PlaneTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PlaneTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long PlaneTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PlaneTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void PlaneTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PlaneTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PlaneTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PlaneTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PlaneTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PlaneTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PlaneTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PlaneTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void PlaneTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long PlaneTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long PlaneTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PlaneTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PlaneTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void PlaneTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void PlaneTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PlaneTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PlaneTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PlaneTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PlaneTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* PlaneTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PlaneTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PlaneTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PlaneTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PlaneTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PlaneTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long PlaneTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PlaneTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PlaneTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PlaneTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PlaneTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PlaneTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PlaneTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool PlaneTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PlaneTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PlaneTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PlaneTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PlaneTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PlaneTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PlaneTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void PlaneTypedArray::py_sort(){
    this->sort();

  }


  void PlaneTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void PlaneTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void PlaneTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PlaneTypedArray::py_shuffle(){
    this->shuffle();

  }


  void PlaneTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PlaneTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PlaneTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PlaneTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PlaneTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void PlaneTypedArray::py_reverse(){
    this->reverse();

  }


  void PlaneTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> PlaneTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array PlaneTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PlaneTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array PlaneTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> PlaneTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PlaneTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PlaneTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PlaneTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* PlaneTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant PlaneTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool PlaneTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool PlaneTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PlaneTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool PlaneTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PlaneTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PlaneTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PlaneTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PlaneTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool PlaneTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool PlaneTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PlaneTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool PlaneTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PlaneTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long PlaneTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> PlaneTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName PlaneTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* PlaneTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PlaneTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void PlaneTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void PlaneTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool PlaneTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool PlaneTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PlaneTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PlaneTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool PlaneTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PlaneTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool PlaneTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PlaneTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool PlaneTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PlaneTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool PlaneTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PlaneTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool PlaneTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PlaneTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool PlaneTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PlaneTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool PlaneTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PlaneTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array PlaneTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> PlaneTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void RDPipelineColorBlendStateAttachmentTypedArray::RDPipelineColorBlendStateAttachmentTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  RDPipelineColorBlendStateAttachmentTypedArray::~RDPipelineColorBlendStateAttachmentTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::constructor(){
    RDPipelineColorBlendStateAttachmentTypedArray class_ = RDPipelineColorBlendStateAttachmentTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(class_);
  }

  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new_static(GDExtensionObjectPtr owner){
    RDPipelineColorBlendStateAttachmentTypedArray obj = RDPipelineColorBlendStateAttachmentTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void RDPipelineColorBlendStateAttachmentTypedArray::set_gdowner_RDPipelineColorBlendStateAttachmentTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  RDPipelineColorBlendStateAttachmentTypedArray::RDPipelineColorBlendStateAttachmentTypedArray(const RDPipelineColorBlendStateAttachmentTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDPipelineColorBlendStateAttachmentTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  RDPipelineColorBlendStateAttachmentTypedArray& RDPipelineColorBlendStateAttachmentTypedArray::operator=(const RDPipelineColorBlendStateAttachmentTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDPipelineColorBlendStateAttachmentTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new0(){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new0(){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new1(Array& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new3(PackedByteArray& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new4(PackedInt32Array& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new5(PackedInt64Array& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new6(PackedFloat32Array& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new7(PackedFloat64Array& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new8(PackedStringArray& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new9(PackedVector2Array& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new10(PackedVector3Array& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}
  RDPipelineColorBlendStateAttachmentTypedArray RDPipelineColorBlendStateAttachmentTypedArray::new11(PackedColorArray& from_){
    RDPipelineColorBlendStateAttachmentTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineColorBlendStateAttachmentTypedArray> RDPipelineColorBlendStateAttachmentTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = RDPipelineColorBlendStateAttachmentTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineColorBlendStateAttachmentTypedArray>(_class);
}

  Variant RDPipelineColorBlendStateAttachmentTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDPipelineColorBlendStateAttachmentTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool RDPipelineColorBlendStateAttachmentTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_clear(){
    this->clear();

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDPipelineColorBlendStateAttachmentTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool RDPipelineColorBlendStateAttachmentTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_sort(){
    this->sort();

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_shuffle(){
    this->shuffle();

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_reverse(){
    this->reverse();

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> RDPipelineColorBlendStateAttachmentTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDPipelineColorBlendStateAttachmentTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDPipelineColorBlendStateAttachmentTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDPipelineColorBlendStateAttachmentTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> RDPipelineColorBlendStateAttachmentTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDPipelineColorBlendStateAttachmentTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDPipelineColorBlendStateAttachmentTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDPipelineColorBlendStateAttachmentTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool RDPipelineColorBlendStateAttachmentTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool RDPipelineColorBlendStateAttachmentTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDPipelineColorBlendStateAttachmentTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool RDPipelineColorBlendStateAttachmentTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool RDPipelineColorBlendStateAttachmentTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool RDPipelineColorBlendStateAttachmentTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDPipelineColorBlendStateAttachmentTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool RDPipelineColorBlendStateAttachmentTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDPipelineColorBlendStateAttachmentTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long RDPipelineColorBlendStateAttachmentTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> RDPipelineColorBlendStateAttachmentTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName RDPipelineColorBlendStateAttachmentTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* RDPipelineColorBlendStateAttachmentTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineColorBlendStateAttachmentTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void RDPipelineColorBlendStateAttachmentTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void RDPipelineColorBlendStateAttachmentTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool RDPipelineColorBlendStateAttachmentTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool RDPipelineColorBlendStateAttachmentTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDPipelineColorBlendStateAttachmentTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineColorBlendStateAttachmentTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array RDPipelineColorBlendStateAttachmentTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> RDPipelineColorBlendStateAttachmentTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void StringTypedArray::StringTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  StringTypedArray::~StringTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<StringTypedArray> StringTypedArray::constructor(){
    StringTypedArray class_ = StringTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<StringTypedArray>(class_);
  }

  StringTypedArray StringTypedArray::new_static(GDExtensionObjectPtr owner){
    StringTypedArray obj = StringTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void StringTypedArray::set_gdowner_StringTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  StringTypedArray::StringTypedArray(const StringTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<StringTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  StringTypedArray& StringTypedArray::operator=(const StringTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<StringTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  StringTypedArray StringTypedArray::new0(){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new0(){
    auto _class = StringTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new1(Array& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = StringTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = StringTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new3(PackedByteArray& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = StringTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new4(PackedInt32Array& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = StringTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new5(PackedInt64Array& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = StringTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new6(PackedFloat32Array& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = StringTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new7(PackedFloat64Array& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = StringTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new8(PackedStringArray& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = StringTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new9(PackedVector2Array& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = StringTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new10(PackedVector3Array& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = StringTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}
  StringTypedArray StringTypedArray::new11(PackedColorArray& from_){
    StringTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringTypedArray> StringTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = StringTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringTypedArray>(_class);
}

  Variant StringTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long StringTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long StringTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool StringTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool StringTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void StringTypedArray::py_clear(){
    this->clear();

  }


  void StringTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long StringTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long StringTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void StringTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void StringTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void StringTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long StringTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long StringTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long StringTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long StringTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void StringTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void StringTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* StringTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long StringTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long StringTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long StringTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long StringTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long StringTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long StringTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool StringTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool StringTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* StringTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void StringTypedArray::py_sort(){
    this->sort();

  }


  void StringTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void StringTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void StringTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringTypedArray::py_shuffle(){
    this->shuffle();

  }


  void StringTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long StringTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long StringTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long StringTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long StringTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void StringTypedArray::py_reverse(){
    this->reverse();

  }


  void StringTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> StringTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array StringTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> StringTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array StringTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> StringTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array StringTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> StringTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array StringTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* StringTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant StringTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool StringTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool StringTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool StringTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool StringTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* StringTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool StringTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool StringTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool StringTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool StringTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long StringTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long StringTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> StringTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName StringTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* StringTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void StringTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void StringTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool StringTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool StringTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool StringTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool StringTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool StringTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool StringTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool StringTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool StringTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool StringTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool StringTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool StringTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool StringTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array StringTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> StringTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Vector2TypedArray::Vector2TypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Vector2TypedArray::~Vector2TypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::constructor(){
    Vector2TypedArray class_ = Vector2TypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Vector2TypedArray>(class_);
  }

  Vector2TypedArray Vector2TypedArray::new_static(GDExtensionObjectPtr owner){
    Vector2TypedArray obj = Vector2TypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Vector2TypedArray::set_gdowner_Vector2TypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Vector2TypedArray::Vector2TypedArray(const Vector2TypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Vector2TypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Vector2TypedArray& Vector2TypedArray::operator=(const Vector2TypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Vector2TypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Vector2TypedArray Vector2TypedArray::new0(){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new0(){
    auto _class = Vector2TypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new1(Array& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Vector2TypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Vector2TypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new3(PackedByteArray& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Vector2TypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new4(PackedInt32Array& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Vector2TypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new5(PackedInt64Array& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Vector2TypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new6(PackedFloat32Array& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Vector2TypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new7(PackedFloat64Array& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Vector2TypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new8(PackedStringArray& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Vector2TypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new9(PackedVector2Array& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Vector2TypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new10(PackedVector3Array& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Vector2TypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}
  Vector2TypedArray Vector2TypedArray::new11(PackedColorArray& from_){
    Vector2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2TypedArray> Vector2TypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Vector2TypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2TypedArray>(_class);
}

  Variant Vector2TypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Vector2TypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Vector2TypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector2TypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Vector2TypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Vector2TypedArray::py_clear(){
    this->clear();

  }


  void Vector2TypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Vector2TypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Vector2TypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Vector2TypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Vector2TypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2TypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2TypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2TypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2TypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2TypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2TypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2TypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Vector2TypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Vector2TypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Vector2TypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Vector2TypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector2TypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Vector2TypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Vector2TypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2TypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2TypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2TypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2TypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Vector2TypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2TypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2TypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2TypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2TypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2TypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Vector2TypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Vector2TypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector2TypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Vector2TypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector2TypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector2TypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Vector2TypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Vector2TypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Vector2TypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2TypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2TypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2TypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2TypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2TypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Vector2TypedArray::py_sort(){
    this->sort();

  }


  void Vector2TypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Vector2TypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Vector2TypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2TypedArray::py_shuffle(){
    this->shuffle();

  }


  void Vector2TypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Vector2TypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector2TypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector2TypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector2TypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Vector2TypedArray::py_reverse(){
    this->reverse();

  }


  void Vector2TypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Vector2TypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Vector2TypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Vector2TypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Vector2TypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Vector2TypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Vector2TypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Vector2TypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Vector2TypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Vector2TypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Vector2TypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Vector2TypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Vector2TypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Vector2TypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Vector2TypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Vector2TypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2TypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2TypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2TypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Vector2TypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Vector2TypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector2TypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Vector2TypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Vector2TypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Vector2TypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Vector2TypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Vector2TypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Vector2TypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2TypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Vector2TypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Vector2TypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Vector2TypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Vector2TypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector2TypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Vector2TypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Vector2TypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2TypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Vector2TypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Vector2TypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Vector2TypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2TypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Vector2TypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2TypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Vector2TypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2TypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Vector2TypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2TypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Vector2TypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2TypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Vector2TypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Vector2TypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFAnimationTypedArray::GLTFAnimationTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFAnimationTypedArray::~GLTFAnimationTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::constructor(){
    GLTFAnimationTypedArray class_ = GLTFAnimationTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFAnimationTypedArray>(class_);
  }

  GLTFAnimationTypedArray GLTFAnimationTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFAnimationTypedArray obj = GLTFAnimationTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFAnimationTypedArray::set_gdowner_GLTFAnimationTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFAnimationTypedArray::GLTFAnimationTypedArray(const GLTFAnimationTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFAnimationTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFAnimationTypedArray& GLTFAnimationTypedArray::operator=(const GLTFAnimationTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFAnimationTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new0(){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new0(){
    auto _class = GLTFAnimationTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new1(Array& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFAnimationTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFAnimationTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new3(PackedByteArray& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFAnimationTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new4(PackedInt32Array& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFAnimationTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new5(PackedInt64Array& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFAnimationTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new6(PackedFloat32Array& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFAnimationTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new7(PackedFloat64Array& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFAnimationTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new8(PackedStringArray& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFAnimationTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new9(PackedVector2Array& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFAnimationTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new10(PackedVector3Array& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFAnimationTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}
  GLTFAnimationTypedArray GLTFAnimationTypedArray::new11(PackedColorArray& from_){
    GLTFAnimationTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFAnimationTypedArray> GLTFAnimationTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFAnimationTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFAnimationTypedArray>(_class);
}

  Variant GLTFAnimationTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFAnimationTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFAnimationTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFAnimationTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFAnimationTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFAnimationTypedArray::py_clear(){
    this->clear();

  }


  void GLTFAnimationTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFAnimationTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFAnimationTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFAnimationTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFAnimationTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAnimationTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAnimationTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAnimationTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAnimationTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAnimationTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAnimationTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAnimationTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFAnimationTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFAnimationTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFAnimationTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFAnimationTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFAnimationTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFAnimationTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFAnimationTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAnimationTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAnimationTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAnimationTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFAnimationTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFAnimationTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAnimationTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAnimationTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFAnimationTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFAnimationTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFAnimationTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFAnimationTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFAnimationTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFAnimationTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFAnimationTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFAnimationTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFAnimationTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAnimationTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAnimationTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFAnimationTypedArray::py_sort(){
    this->sort();

  }


  void GLTFAnimationTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFAnimationTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFAnimationTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFAnimationTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFAnimationTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFAnimationTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFAnimationTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFAnimationTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFAnimationTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFAnimationTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFAnimationTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFAnimationTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFAnimationTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFAnimationTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFAnimationTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFAnimationTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFAnimationTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFAnimationTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFAnimationTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFAnimationTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFAnimationTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFAnimationTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFAnimationTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFAnimationTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFAnimationTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFAnimationTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFAnimationTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFAnimationTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFAnimationTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFAnimationTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFAnimationTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFAnimationTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFAnimationTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFAnimationTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFAnimationTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFAnimationTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFAnimationTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFAnimationTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFAnimationTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFAnimationTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFAnimationTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFAnimationTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFAnimationTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAnimationTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFAnimationTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFAnimationTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFAnimationTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAnimationTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFAnimationTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAnimationTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFAnimationTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAnimationTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFAnimationTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAnimationTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFAnimationTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFAnimationTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFAnimationTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFAnimationTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void ENetPacketPeerTypedArray::ENetPacketPeerTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  ENetPacketPeerTypedArray::~ENetPacketPeerTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::constructor(){
    ENetPacketPeerTypedArray class_ = ENetPacketPeerTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<ENetPacketPeerTypedArray>(class_);
  }

  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new_static(GDExtensionObjectPtr owner){
    ENetPacketPeerTypedArray obj = ENetPacketPeerTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void ENetPacketPeerTypedArray::set_gdowner_ENetPacketPeerTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  ENetPacketPeerTypedArray::ENetPacketPeerTypedArray(const ENetPacketPeerTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ENetPacketPeerTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  ENetPacketPeerTypedArray& ENetPacketPeerTypedArray::operator=(const ENetPacketPeerTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ENetPacketPeerTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new0(){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new0(){
    auto _class = ENetPacketPeerTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new1(Array& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = ENetPacketPeerTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = ENetPacketPeerTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new3(PackedByteArray& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = ENetPacketPeerTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new4(PackedInt32Array& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = ENetPacketPeerTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new5(PackedInt64Array& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = ENetPacketPeerTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new6(PackedFloat32Array& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = ENetPacketPeerTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new7(PackedFloat64Array& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = ENetPacketPeerTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new8(PackedStringArray& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = ENetPacketPeerTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new9(PackedVector2Array& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = ENetPacketPeerTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new10(PackedVector3Array& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = ENetPacketPeerTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}
  ENetPacketPeerTypedArray ENetPacketPeerTypedArray::new11(PackedColorArray& from_){
    ENetPacketPeerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ENetPacketPeerTypedArray> ENetPacketPeerTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = ENetPacketPeerTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ENetPacketPeerTypedArray>(_class);
}

  Variant ENetPacketPeerTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long ENetPacketPeerTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long ENetPacketPeerTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ENetPacketPeerTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool ENetPacketPeerTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ENetPacketPeerTypedArray::py_clear(){
    this->clear();

  }


  void ENetPacketPeerTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ENetPacketPeerTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long ENetPacketPeerTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ENetPacketPeerTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void ENetPacketPeerTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ENetPacketPeerTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ENetPacketPeerTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ENetPacketPeerTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ENetPacketPeerTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ENetPacketPeerTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ENetPacketPeerTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ENetPacketPeerTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void ENetPacketPeerTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long ENetPacketPeerTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long ENetPacketPeerTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ENetPacketPeerTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ENetPacketPeerTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void ENetPacketPeerTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void ENetPacketPeerTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ENetPacketPeerTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ENetPacketPeerTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ENetPacketPeerTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ENetPacketPeerTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* ENetPacketPeerTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ENetPacketPeerTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ENetPacketPeerTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long ENetPacketPeerTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ENetPacketPeerTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ENetPacketPeerTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ENetPacketPeerTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ENetPacketPeerTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ENetPacketPeerTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ENetPacketPeerTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool ENetPacketPeerTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ENetPacketPeerTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ENetPacketPeerTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ENetPacketPeerTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void ENetPacketPeerTypedArray::py_sort(){
    this->sort();

  }


  void ENetPacketPeerTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void ENetPacketPeerTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void ENetPacketPeerTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ENetPacketPeerTypedArray::py_shuffle(){
    this->shuffle();

  }


  void ENetPacketPeerTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ENetPacketPeerTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ENetPacketPeerTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ENetPacketPeerTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ENetPacketPeerTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void ENetPacketPeerTypedArray::py_reverse(){
    this->reverse();

  }


  void ENetPacketPeerTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> ENetPacketPeerTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array ENetPacketPeerTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ENetPacketPeerTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array ENetPacketPeerTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> ENetPacketPeerTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ENetPacketPeerTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ENetPacketPeerTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ENetPacketPeerTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* ENetPacketPeerTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool ENetPacketPeerTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool ENetPacketPeerTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ENetPacketPeerTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool ENetPacketPeerTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ENetPacketPeerTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ENetPacketPeerTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool ENetPacketPeerTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool ENetPacketPeerTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ENetPacketPeerTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool ENetPacketPeerTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ENetPacketPeerTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long ENetPacketPeerTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> ENetPacketPeerTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName ENetPacketPeerTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* ENetPacketPeerTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ENetPacketPeerTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void ENetPacketPeerTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void ENetPacketPeerTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool ENetPacketPeerTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool ENetPacketPeerTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ENetPacketPeerTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool ENetPacketPeerTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool ENetPacketPeerTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ENetPacketPeerTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array ENetPacketPeerTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> ENetPacketPeerTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Vector2iTypedArray::Vector2iTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Vector2iTypedArray::~Vector2iTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::constructor(){
    Vector2iTypedArray class_ = Vector2iTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Vector2iTypedArray>(class_);
  }

  Vector2iTypedArray Vector2iTypedArray::new_static(GDExtensionObjectPtr owner){
    Vector2iTypedArray obj = Vector2iTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Vector2iTypedArray::set_gdowner_Vector2iTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Vector2iTypedArray::Vector2iTypedArray(const Vector2iTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Vector2iTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Vector2iTypedArray& Vector2iTypedArray::operator=(const Vector2iTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Vector2iTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Vector2iTypedArray Vector2iTypedArray::new0(){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new0(){
    auto _class = Vector2iTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new1(Array& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Vector2iTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Vector2iTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new3(PackedByteArray& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Vector2iTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new4(PackedInt32Array& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Vector2iTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new5(PackedInt64Array& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Vector2iTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new6(PackedFloat32Array& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Vector2iTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new7(PackedFloat64Array& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Vector2iTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new8(PackedStringArray& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Vector2iTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new9(PackedVector2Array& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Vector2iTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new10(PackedVector3Array& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Vector2iTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}
  Vector2iTypedArray Vector2iTypedArray::new11(PackedColorArray& from_){
    Vector2iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector2iTypedArray> Vector2iTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Vector2iTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector2iTypedArray>(_class);
}

  Variant Vector2iTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Vector2iTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Vector2iTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector2iTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Vector2iTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Vector2iTypedArray::py_clear(){
    this->clear();

  }


  void Vector2iTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Vector2iTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Vector2iTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Vector2iTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Vector2iTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2iTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2iTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2iTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2iTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2iTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2iTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2iTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Vector2iTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Vector2iTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Vector2iTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Vector2iTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector2iTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Vector2iTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Vector2iTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2iTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2iTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2iTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector2iTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Vector2iTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2iTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2iTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2iTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2iTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2iTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Vector2iTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Vector2iTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector2iTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Vector2iTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector2iTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector2iTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Vector2iTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Vector2iTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Vector2iTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2iTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2iTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2iTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2iTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2iTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Vector2iTypedArray::py_sort(){
    this->sort();

  }


  void Vector2iTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Vector2iTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Vector2iTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector2iTypedArray::py_shuffle(){
    this->shuffle();

  }


  void Vector2iTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Vector2iTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector2iTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector2iTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector2iTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Vector2iTypedArray::py_reverse(){
    this->reverse();

  }


  void Vector2iTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Vector2iTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Vector2iTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Vector2iTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Vector2iTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Vector2iTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Vector2iTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Vector2iTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Vector2iTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Vector2iTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Vector2iTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Vector2iTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Vector2iTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Vector2iTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Vector2iTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Vector2iTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2iTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector2iTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2iTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Vector2iTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Vector2iTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector2iTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Vector2iTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Vector2iTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Vector2iTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Vector2iTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Vector2iTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Vector2iTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector2iTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Vector2iTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Vector2iTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Vector2iTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Vector2iTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector2iTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Vector2iTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Vector2iTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2iTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Vector2iTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Vector2iTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Vector2iTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2iTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Vector2iTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2iTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Vector2iTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2iTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Vector2iTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2iTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Vector2iTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector2iTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Vector2iTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Vector2iTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Node2DTypedArray::Node2DTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Node2DTypedArray::~Node2DTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::constructor(){
    Node2DTypedArray class_ = Node2DTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Node2DTypedArray>(class_);
  }

  Node2DTypedArray Node2DTypedArray::new_static(GDExtensionObjectPtr owner){
    Node2DTypedArray obj = Node2DTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Node2DTypedArray::set_gdowner_Node2DTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Node2DTypedArray::Node2DTypedArray(const Node2DTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Node2DTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Node2DTypedArray& Node2DTypedArray::operator=(const Node2DTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Node2DTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Node2DTypedArray Node2DTypedArray::new0(){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new0(){
    auto _class = Node2DTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new1(Array& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Node2DTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Node2DTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new3(PackedByteArray& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Node2DTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new4(PackedInt32Array& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Node2DTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new5(PackedInt64Array& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Node2DTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new6(PackedFloat32Array& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Node2DTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new7(PackedFloat64Array& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Node2DTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new8(PackedStringArray& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Node2DTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new9(PackedVector2Array& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Node2DTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new10(PackedVector3Array& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Node2DTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}
  Node2DTypedArray Node2DTypedArray::new11(PackedColorArray& from_){
    Node2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node2DTypedArray> Node2DTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Node2DTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node2DTypedArray>(_class);
}

  Variant Node2DTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Node2DTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Node2DTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Node2DTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Node2DTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Node2DTypedArray::py_clear(){
    this->clear();

  }


  void Node2DTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Node2DTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Node2DTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Node2DTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Node2DTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node2DTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node2DTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node2DTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node2DTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node2DTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node2DTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node2DTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Node2DTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Node2DTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Node2DTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Node2DTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node2DTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Node2DTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Node2DTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node2DTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node2DTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node2DTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node2DTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Node2DTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node2DTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node2DTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node2DTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node2DTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node2DTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Node2DTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Node2DTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Node2DTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Node2DTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Node2DTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node2DTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Node2DTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Node2DTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Node2DTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node2DTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node2DTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node2DTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node2DTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node2DTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Node2DTypedArray::py_sort(){
    this->sort();

  }


  void Node2DTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Node2DTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Node2DTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node2DTypedArray::py_shuffle(){
    this->shuffle();

  }


  void Node2DTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Node2DTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node2DTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Node2DTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node2DTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Node2DTypedArray::py_reverse(){
    this->reverse();

  }


  void Node2DTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Node2DTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Node2DTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Node2DTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Node2DTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Node2DTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Node2DTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Node2DTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Node2DTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Node2DTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Node2DTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Node2DTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Node2DTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Node2DTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Node2DTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Node2DTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node2DTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node2DTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node2DTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Node2DTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Node2DTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Node2DTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Node2DTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Node2DTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Node2DTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Node2DTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Node2DTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Node2DTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node2DTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Node2DTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Node2DTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Node2DTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Node2DTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Node2DTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Node2DTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Node2DTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node2DTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Node2DTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Node2DTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Node2DTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node2DTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Node2DTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node2DTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Node2DTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node2DTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Node2DTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node2DTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Node2DTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node2DTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Node2DTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Node2DTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void RegExMatchTypedArray::RegExMatchTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  RegExMatchTypedArray::~RegExMatchTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::constructor(){
    RegExMatchTypedArray class_ = RegExMatchTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<RegExMatchTypedArray>(class_);
  }

  RegExMatchTypedArray RegExMatchTypedArray::new_static(GDExtensionObjectPtr owner){
    RegExMatchTypedArray obj = RegExMatchTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void RegExMatchTypedArray::set_gdowner_RegExMatchTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  RegExMatchTypedArray::RegExMatchTypedArray(const RegExMatchTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RegExMatchTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  RegExMatchTypedArray& RegExMatchTypedArray::operator=(const RegExMatchTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RegExMatchTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  RegExMatchTypedArray RegExMatchTypedArray::new0(){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new0(){
    auto _class = RegExMatchTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new1(Array& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = RegExMatchTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = RegExMatchTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new3(PackedByteArray& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = RegExMatchTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new4(PackedInt32Array& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = RegExMatchTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new5(PackedInt64Array& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = RegExMatchTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new6(PackedFloat32Array& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = RegExMatchTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new7(PackedFloat64Array& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = RegExMatchTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new8(PackedStringArray& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = RegExMatchTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new9(PackedVector2Array& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = RegExMatchTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new10(PackedVector3Array& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = RegExMatchTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}
  RegExMatchTypedArray RegExMatchTypedArray::new11(PackedColorArray& from_){
    RegExMatchTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RegExMatchTypedArray> RegExMatchTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = RegExMatchTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RegExMatchTypedArray>(_class);
}

  Variant RegExMatchTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long RegExMatchTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long RegExMatchTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RegExMatchTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool RegExMatchTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RegExMatchTypedArray::py_clear(){
    this->clear();

  }


  void RegExMatchTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RegExMatchTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long RegExMatchTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RegExMatchTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void RegExMatchTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RegExMatchTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RegExMatchTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RegExMatchTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RegExMatchTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RegExMatchTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RegExMatchTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RegExMatchTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void RegExMatchTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long RegExMatchTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long RegExMatchTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RegExMatchTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RegExMatchTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void RegExMatchTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void RegExMatchTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RegExMatchTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RegExMatchTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RegExMatchTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RegExMatchTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* RegExMatchTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RegExMatchTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RegExMatchTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RegExMatchTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RegExMatchTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RegExMatchTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long RegExMatchTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RegExMatchTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RegExMatchTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RegExMatchTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RegExMatchTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RegExMatchTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RegExMatchTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool RegExMatchTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RegExMatchTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RegExMatchTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RegExMatchTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RegExMatchTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RegExMatchTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RegExMatchTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void RegExMatchTypedArray::py_sort(){
    this->sort();

  }


  void RegExMatchTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void RegExMatchTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void RegExMatchTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RegExMatchTypedArray::py_shuffle(){
    this->shuffle();

  }


  void RegExMatchTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RegExMatchTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RegExMatchTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RegExMatchTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RegExMatchTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void RegExMatchTypedArray::py_reverse(){
    this->reverse();

  }


  void RegExMatchTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> RegExMatchTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array RegExMatchTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RegExMatchTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array RegExMatchTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> RegExMatchTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RegExMatchTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RegExMatchTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RegExMatchTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* RegExMatchTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant RegExMatchTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool RegExMatchTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool RegExMatchTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RegExMatchTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool RegExMatchTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RegExMatchTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RegExMatchTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RegExMatchTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RegExMatchTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool RegExMatchTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool RegExMatchTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RegExMatchTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool RegExMatchTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RegExMatchTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long RegExMatchTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> RegExMatchTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName RegExMatchTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* RegExMatchTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RegExMatchTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void RegExMatchTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void RegExMatchTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool RegExMatchTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool RegExMatchTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RegExMatchTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RegExMatchTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool RegExMatchTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RegExMatchTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool RegExMatchTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RegExMatchTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool RegExMatchTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RegExMatchTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool RegExMatchTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RegExMatchTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool RegExMatchTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RegExMatchTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool RegExMatchTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RegExMatchTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool RegExMatchTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RegExMatchTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array RegExMatchTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> RegExMatchTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void PhysicsBody2DTypedArray::PhysicsBody2DTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  PhysicsBody2DTypedArray::~PhysicsBody2DTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::constructor(){
    PhysicsBody2DTypedArray class_ = PhysicsBody2DTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<PhysicsBody2DTypedArray>(class_);
  }

  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new_static(GDExtensionObjectPtr owner){
    PhysicsBody2DTypedArray obj = PhysicsBody2DTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void PhysicsBody2DTypedArray::set_gdowner_PhysicsBody2DTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  PhysicsBody2DTypedArray::PhysicsBody2DTypedArray(const PhysicsBody2DTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PhysicsBody2DTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  PhysicsBody2DTypedArray& PhysicsBody2DTypedArray::operator=(const PhysicsBody2DTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PhysicsBody2DTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new0(){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new0(){
    auto _class = PhysicsBody2DTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new1(Array& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = PhysicsBody2DTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = PhysicsBody2DTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new3(PackedByteArray& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = PhysicsBody2DTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new4(PackedInt32Array& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = PhysicsBody2DTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new5(PackedInt64Array& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = PhysicsBody2DTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new6(PackedFloat32Array& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = PhysicsBody2DTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new7(PackedFloat64Array& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = PhysicsBody2DTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new8(PackedStringArray& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = PhysicsBody2DTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new9(PackedVector2Array& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = PhysicsBody2DTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new10(PackedVector3Array& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = PhysicsBody2DTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}
  PhysicsBody2DTypedArray PhysicsBody2DTypedArray::new11(PackedColorArray& from_){
    PhysicsBody2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody2DTypedArray> PhysicsBody2DTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = PhysicsBody2DTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody2DTypedArray>(_class);
}

  Variant PhysicsBody2DTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long PhysicsBody2DTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long PhysicsBody2DTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PhysicsBody2DTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool PhysicsBody2DTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PhysicsBody2DTypedArray::py_clear(){
    this->clear();

  }


  void PhysicsBody2DTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PhysicsBody2DTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long PhysicsBody2DTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PhysicsBody2DTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void PhysicsBody2DTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody2DTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody2DTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody2DTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody2DTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody2DTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody2DTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody2DTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void PhysicsBody2DTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long PhysicsBody2DTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long PhysicsBody2DTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PhysicsBody2DTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PhysicsBody2DTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void PhysicsBody2DTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void PhysicsBody2DTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody2DTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody2DTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody2DTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody2DTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* PhysicsBody2DTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody2DTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody2DTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long PhysicsBody2DTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PhysicsBody2DTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PhysicsBody2DTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PhysicsBody2DTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PhysicsBody2DTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PhysicsBody2DTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PhysicsBody2DTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool PhysicsBody2DTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PhysicsBody2DTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody2DTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody2DTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void PhysicsBody2DTypedArray::py_sort(){
    this->sort();

  }


  void PhysicsBody2DTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void PhysicsBody2DTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void PhysicsBody2DTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody2DTypedArray::py_shuffle(){
    this->shuffle();

  }


  void PhysicsBody2DTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PhysicsBody2DTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PhysicsBody2DTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PhysicsBody2DTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PhysicsBody2DTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void PhysicsBody2DTypedArray::py_reverse(){
    this->reverse();

  }


  void PhysicsBody2DTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> PhysicsBody2DTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array PhysicsBody2DTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PhysicsBody2DTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array PhysicsBody2DTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> PhysicsBody2DTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PhysicsBody2DTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PhysicsBody2DTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PhysicsBody2DTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* PhysicsBody2DTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool PhysicsBody2DTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool PhysicsBody2DTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PhysicsBody2DTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool PhysicsBody2DTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PhysicsBody2DTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody2DTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool PhysicsBody2DTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool PhysicsBody2DTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PhysicsBody2DTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool PhysicsBody2DTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PhysicsBody2DTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long PhysicsBody2DTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> PhysicsBody2DTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName PhysicsBody2DTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* PhysicsBody2DTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody2DTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void PhysicsBody2DTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void PhysicsBody2DTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool PhysicsBody2DTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool PhysicsBody2DTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PhysicsBody2DTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool PhysicsBody2DTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool PhysicsBody2DTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody2DTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array PhysicsBody2DTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> PhysicsBody2DTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void RDPipelineSpecializationConstantTypedArray::RDPipelineSpecializationConstantTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  RDPipelineSpecializationConstantTypedArray::~RDPipelineSpecializationConstantTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::constructor(){
    RDPipelineSpecializationConstantTypedArray class_ = RDPipelineSpecializationConstantTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(class_);
  }

  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new_static(GDExtensionObjectPtr owner){
    RDPipelineSpecializationConstantTypedArray obj = RDPipelineSpecializationConstantTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void RDPipelineSpecializationConstantTypedArray::set_gdowner_RDPipelineSpecializationConstantTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  RDPipelineSpecializationConstantTypedArray::RDPipelineSpecializationConstantTypedArray(const RDPipelineSpecializationConstantTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDPipelineSpecializationConstantTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  RDPipelineSpecializationConstantTypedArray& RDPipelineSpecializationConstantTypedArray::operator=(const RDPipelineSpecializationConstantTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDPipelineSpecializationConstantTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new0(){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new0(){
    auto _class = RDPipelineSpecializationConstantTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new1(Array& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = RDPipelineSpecializationConstantTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new3(PackedByteArray& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new4(PackedInt32Array& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new5(PackedInt64Array& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new6(PackedFloat32Array& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new7(PackedFloat64Array& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new8(PackedStringArray& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new9(PackedVector2Array& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new10(PackedVector3Array& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}
  RDPipelineSpecializationConstantTypedArray RDPipelineSpecializationConstantTypedArray::new11(PackedColorArray& from_){
    RDPipelineSpecializationConstantTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDPipelineSpecializationConstantTypedArray> RDPipelineSpecializationConstantTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = RDPipelineSpecializationConstantTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDPipelineSpecializationConstantTypedArray>(_class);
}

  Variant RDPipelineSpecializationConstantTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long RDPipelineSpecializationConstantTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDPipelineSpecializationConstantTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool RDPipelineSpecializationConstantTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDPipelineSpecializationConstantTypedArray::py_clear(){
    this->clear();

  }


  void RDPipelineSpecializationConstantTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDPipelineSpecializationConstantTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDPipelineSpecializationConstantTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void RDPipelineSpecializationConstantTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineSpecializationConstantTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineSpecializationConstantTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineSpecializationConstantTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineSpecializationConstantTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineSpecializationConstantTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineSpecializationConstantTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineSpecializationConstantTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void RDPipelineSpecializationConstantTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long RDPipelineSpecializationConstantTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDPipelineSpecializationConstantTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void RDPipelineSpecializationConstantTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void RDPipelineSpecializationConstantTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineSpecializationConstantTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineSpecializationConstantTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineSpecializationConstantTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDPipelineSpecializationConstantTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long RDPipelineSpecializationConstantTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDPipelineSpecializationConstantTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDPipelineSpecializationConstantTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDPipelineSpecializationConstantTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool RDPipelineSpecializationConstantTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void RDPipelineSpecializationConstantTypedArray::py_sort(){
    this->sort();

  }


  void RDPipelineSpecializationConstantTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void RDPipelineSpecializationConstantTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void RDPipelineSpecializationConstantTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDPipelineSpecializationConstantTypedArray::py_shuffle(){
    this->shuffle();

  }


  void RDPipelineSpecializationConstantTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDPipelineSpecializationConstantTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDPipelineSpecializationConstantTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void RDPipelineSpecializationConstantTypedArray::py_reverse(){
    this->reverse();

  }


  void RDPipelineSpecializationConstantTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> RDPipelineSpecializationConstantTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDPipelineSpecializationConstantTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDPipelineSpecializationConstantTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDPipelineSpecializationConstantTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> RDPipelineSpecializationConstantTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDPipelineSpecializationConstantTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDPipelineSpecializationConstantTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDPipelineSpecializationConstantTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool RDPipelineSpecializationConstantTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool RDPipelineSpecializationConstantTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDPipelineSpecializationConstantTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool RDPipelineSpecializationConstantTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool RDPipelineSpecializationConstantTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool RDPipelineSpecializationConstantTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDPipelineSpecializationConstantTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool RDPipelineSpecializationConstantTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDPipelineSpecializationConstantTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long RDPipelineSpecializationConstantTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> RDPipelineSpecializationConstantTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName RDPipelineSpecializationConstantTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* RDPipelineSpecializationConstantTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDPipelineSpecializationConstantTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void RDPipelineSpecializationConstantTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void RDPipelineSpecializationConstantTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool RDPipelineSpecializationConstantTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool RDPipelineSpecializationConstantTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDPipelineSpecializationConstantTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDPipelineSpecializationConstantTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array RDPipelineSpecializationConstantTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> RDPipelineSpecializationConstantTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Vector3TypedArray::Vector3TypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Vector3TypedArray::~Vector3TypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::constructor(){
    Vector3TypedArray class_ = Vector3TypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Vector3TypedArray>(class_);
  }

  Vector3TypedArray Vector3TypedArray::new_static(GDExtensionObjectPtr owner){
    Vector3TypedArray obj = Vector3TypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Vector3TypedArray::set_gdowner_Vector3TypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Vector3TypedArray::Vector3TypedArray(const Vector3TypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Vector3TypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Vector3TypedArray& Vector3TypedArray::operator=(const Vector3TypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Vector3TypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Vector3TypedArray Vector3TypedArray::new0(){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new0(){
    auto _class = Vector3TypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new1(Array& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Vector3TypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Vector3TypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new3(PackedByteArray& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Vector3TypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new4(PackedInt32Array& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Vector3TypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new5(PackedInt64Array& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Vector3TypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new6(PackedFloat32Array& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Vector3TypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new7(PackedFloat64Array& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Vector3TypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new8(PackedStringArray& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Vector3TypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new9(PackedVector2Array& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Vector3TypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new10(PackedVector3Array& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Vector3TypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}
  Vector3TypedArray Vector3TypedArray::new11(PackedColorArray& from_){
    Vector3TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3TypedArray> Vector3TypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Vector3TypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3TypedArray>(_class);
}

  Variant Vector3TypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Vector3TypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Vector3TypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector3TypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Vector3TypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Vector3TypedArray::py_clear(){
    this->clear();

  }


  void Vector3TypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Vector3TypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Vector3TypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Vector3TypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Vector3TypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3TypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3TypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3TypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3TypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3TypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3TypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3TypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Vector3TypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Vector3TypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Vector3TypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Vector3TypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector3TypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Vector3TypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Vector3TypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3TypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3TypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3TypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3TypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Vector3TypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3TypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3TypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3TypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3TypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3TypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Vector3TypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Vector3TypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector3TypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Vector3TypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector3TypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector3TypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Vector3TypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Vector3TypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Vector3TypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3TypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3TypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3TypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3TypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3TypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Vector3TypedArray::py_sort(){
    this->sort();

  }


  void Vector3TypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Vector3TypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Vector3TypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3TypedArray::py_shuffle(){
    this->shuffle();

  }


  void Vector3TypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Vector3TypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector3TypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector3TypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector3TypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Vector3TypedArray::py_reverse(){
    this->reverse();

  }


  void Vector3TypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Vector3TypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Vector3TypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Vector3TypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Vector3TypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Vector3TypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Vector3TypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Vector3TypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Vector3TypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Vector3TypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Vector3TypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Vector3TypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Vector3TypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Vector3TypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Vector3TypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Vector3TypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3TypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3TypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3TypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Vector3TypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Vector3TypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector3TypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Vector3TypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Vector3TypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Vector3TypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Vector3TypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Vector3TypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Vector3TypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3TypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Vector3TypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Vector3TypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Vector3TypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Vector3TypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector3TypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Vector3TypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Vector3TypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3TypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Vector3TypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Vector3TypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Vector3TypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3TypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Vector3TypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3TypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Vector3TypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3TypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Vector3TypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3TypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Vector3TypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3TypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Vector3TypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Vector3TypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void NodePathTypedArray::NodePathTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  NodePathTypedArray::~NodePathTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::constructor(){
    NodePathTypedArray class_ = NodePathTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<NodePathTypedArray>(class_);
  }

  NodePathTypedArray NodePathTypedArray::new_static(GDExtensionObjectPtr owner){
    NodePathTypedArray obj = NodePathTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void NodePathTypedArray::set_gdowner_NodePathTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  NodePathTypedArray::NodePathTypedArray(const NodePathTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<NodePathTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  NodePathTypedArray& NodePathTypedArray::operator=(const NodePathTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<NodePathTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  NodePathTypedArray NodePathTypedArray::new0(){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new0(){
    auto _class = NodePathTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new1(Array& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = NodePathTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = NodePathTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new3(PackedByteArray& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = NodePathTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new4(PackedInt32Array& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = NodePathTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new5(PackedInt64Array& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = NodePathTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new6(PackedFloat32Array& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = NodePathTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new7(PackedFloat64Array& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = NodePathTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new8(PackedStringArray& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = NodePathTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new9(PackedVector2Array& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = NodePathTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new10(PackedVector3Array& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = NodePathTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}
  NodePathTypedArray NodePathTypedArray::new11(PackedColorArray& from_){
    NodePathTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodePathTypedArray> NodePathTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = NodePathTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodePathTypedArray>(_class);
}

  Variant NodePathTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long NodePathTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long NodePathTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool NodePathTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool NodePathTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void NodePathTypedArray::py_clear(){
    this->clear();

  }


  void NodePathTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long NodePathTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long NodePathTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void NodePathTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void NodePathTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodePathTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodePathTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodePathTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodePathTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodePathTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodePathTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodePathTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void NodePathTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long NodePathTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long NodePathTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long NodePathTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long NodePathTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void NodePathTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void NodePathTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodePathTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodePathTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodePathTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodePathTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* NodePathTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodePathTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodePathTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodePathTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodePathTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodePathTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long NodePathTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long NodePathTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long NodePathTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long NodePathTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long NodePathTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long NodePathTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool NodePathTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool NodePathTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* NodePathTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodePathTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodePathTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodePathTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodePathTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodePathTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void NodePathTypedArray::py_sort(){
    this->sort();

  }


  void NodePathTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void NodePathTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void NodePathTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodePathTypedArray::py_shuffle(){
    this->shuffle();

  }


  void NodePathTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long NodePathTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long NodePathTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long NodePathTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long NodePathTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void NodePathTypedArray::py_reverse(){
    this->reverse();

  }


  void NodePathTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> NodePathTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array NodePathTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> NodePathTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array NodePathTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> NodePathTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array NodePathTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> NodePathTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array NodePathTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* NodePathTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant NodePathTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool NodePathTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool NodePathTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool NodePathTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool NodePathTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* NodePathTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodePathTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodePathTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodePathTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool NodePathTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool NodePathTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool NodePathTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool NodePathTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long NodePathTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long NodePathTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> NodePathTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName NodePathTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* NodePathTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodePathTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void NodePathTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void NodePathTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool NodePathTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool NodePathTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool NodePathTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool NodePathTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool NodePathTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodePathTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool NodePathTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool NodePathTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool NodePathTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodePathTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool NodePathTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodePathTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool NodePathTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodePathTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool NodePathTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodePathTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool NodePathTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodePathTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array NodePathTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> NodePathTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void TreeItemTypedArray::TreeItemTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  TreeItemTypedArray::~TreeItemTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::constructor(){
    TreeItemTypedArray class_ = TreeItemTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<TreeItemTypedArray>(class_);
  }

  TreeItemTypedArray TreeItemTypedArray::new_static(GDExtensionObjectPtr owner){
    TreeItemTypedArray obj = TreeItemTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void TreeItemTypedArray::set_gdowner_TreeItemTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  TreeItemTypedArray::TreeItemTypedArray(const TreeItemTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<TreeItemTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  TreeItemTypedArray& TreeItemTypedArray::operator=(const TreeItemTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<TreeItemTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  TreeItemTypedArray TreeItemTypedArray::new0(){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new0(){
    auto _class = TreeItemTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new1(Array& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = TreeItemTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = TreeItemTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new3(PackedByteArray& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = TreeItemTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new4(PackedInt32Array& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = TreeItemTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new5(PackedInt64Array& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = TreeItemTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new6(PackedFloat32Array& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = TreeItemTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new7(PackedFloat64Array& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = TreeItemTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new8(PackedStringArray& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = TreeItemTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new9(PackedVector2Array& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = TreeItemTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new10(PackedVector3Array& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = TreeItemTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}
  TreeItemTypedArray TreeItemTypedArray::new11(PackedColorArray& from_){
    TreeItemTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TreeItemTypedArray> TreeItemTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = TreeItemTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TreeItemTypedArray>(_class);
}

  Variant TreeItemTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long TreeItemTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long TreeItemTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool TreeItemTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool TreeItemTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void TreeItemTypedArray::py_clear(){
    this->clear();

  }


  void TreeItemTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long TreeItemTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long TreeItemTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void TreeItemTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void TreeItemTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TreeItemTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TreeItemTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TreeItemTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TreeItemTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TreeItemTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TreeItemTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TreeItemTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void TreeItemTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long TreeItemTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long TreeItemTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long TreeItemTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long TreeItemTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void TreeItemTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void TreeItemTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TreeItemTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TreeItemTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TreeItemTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TreeItemTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* TreeItemTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TreeItemTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TreeItemTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TreeItemTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TreeItemTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TreeItemTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long TreeItemTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long TreeItemTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long TreeItemTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long TreeItemTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long TreeItemTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long TreeItemTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool TreeItemTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool TreeItemTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* TreeItemTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TreeItemTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TreeItemTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TreeItemTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TreeItemTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TreeItemTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void TreeItemTypedArray::py_sort(){
    this->sort();

  }


  void TreeItemTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void TreeItemTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void TreeItemTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TreeItemTypedArray::py_shuffle(){
    this->shuffle();

  }


  void TreeItemTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long TreeItemTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long TreeItemTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long TreeItemTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long TreeItemTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void TreeItemTypedArray::py_reverse(){
    this->reverse();

  }


  void TreeItemTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> TreeItemTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array TreeItemTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> TreeItemTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array TreeItemTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> TreeItemTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array TreeItemTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> TreeItemTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array TreeItemTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* TreeItemTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant TreeItemTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool TreeItemTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool TreeItemTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool TreeItemTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool TreeItemTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* TreeItemTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TreeItemTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TreeItemTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TreeItemTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool TreeItemTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool TreeItemTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool TreeItemTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool TreeItemTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long TreeItemTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long TreeItemTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> TreeItemTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName TreeItemTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* TreeItemTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TreeItemTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void TreeItemTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void TreeItemTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool TreeItemTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool TreeItemTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool TreeItemTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool TreeItemTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool TreeItemTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TreeItemTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool TreeItemTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool TreeItemTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool TreeItemTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TreeItemTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool TreeItemTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TreeItemTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool TreeItemTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TreeItemTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool TreeItemTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TreeItemTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool TreeItemTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TreeItemTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array TreeItemTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> TreeItemTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFNodeTypedArray::GLTFNodeTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFNodeTypedArray::~GLTFNodeTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::constructor(){
    GLTFNodeTypedArray class_ = GLTFNodeTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFNodeTypedArray>(class_);
  }

  GLTFNodeTypedArray GLTFNodeTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFNodeTypedArray obj = GLTFNodeTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFNodeTypedArray::set_gdowner_GLTFNodeTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFNodeTypedArray::GLTFNodeTypedArray(const GLTFNodeTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFNodeTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFNodeTypedArray& GLTFNodeTypedArray::operator=(const GLTFNodeTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFNodeTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFNodeTypedArray GLTFNodeTypedArray::new0(){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new0(){
    auto _class = GLTFNodeTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new1(Array& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFNodeTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFNodeTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new3(PackedByteArray& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFNodeTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new4(PackedInt32Array& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFNodeTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new5(PackedInt64Array& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFNodeTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new6(PackedFloat32Array& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFNodeTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new7(PackedFloat64Array& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFNodeTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new8(PackedStringArray& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFNodeTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new9(PackedVector2Array& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFNodeTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new10(PackedVector3Array& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFNodeTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}
  GLTFNodeTypedArray GLTFNodeTypedArray::new11(PackedColorArray& from_){
    GLTFNodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFNodeTypedArray> GLTFNodeTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFNodeTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFNodeTypedArray>(_class);
}

  Variant GLTFNodeTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFNodeTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFNodeTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFNodeTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFNodeTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFNodeTypedArray::py_clear(){
    this->clear();

  }


  void GLTFNodeTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFNodeTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFNodeTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFNodeTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFNodeTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFNodeTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFNodeTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFNodeTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFNodeTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFNodeTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFNodeTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFNodeTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFNodeTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFNodeTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFNodeTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFNodeTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFNodeTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFNodeTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFNodeTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFNodeTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFNodeTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFNodeTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFNodeTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFNodeTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFNodeTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFNodeTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFNodeTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFNodeTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFNodeTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFNodeTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFNodeTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFNodeTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFNodeTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFNodeTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFNodeTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFNodeTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFNodeTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFNodeTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFNodeTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFNodeTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFNodeTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFNodeTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFNodeTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFNodeTypedArray::py_sort(){
    this->sort();

  }


  void GLTFNodeTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFNodeTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFNodeTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFNodeTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFNodeTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFNodeTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFNodeTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFNodeTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFNodeTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFNodeTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFNodeTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFNodeTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFNodeTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFNodeTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFNodeTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFNodeTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFNodeTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFNodeTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFNodeTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFNodeTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFNodeTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFNodeTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFNodeTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFNodeTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFNodeTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFNodeTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFNodeTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFNodeTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFNodeTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFNodeTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFNodeTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFNodeTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFNodeTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFNodeTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFNodeTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFNodeTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFNodeTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFNodeTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFNodeTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFNodeTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFNodeTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFNodeTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFNodeTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFNodeTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFNodeTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFNodeTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFNodeTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFNodeTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFNodeTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFNodeTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFNodeTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFNodeTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFNodeTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFNodeTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFNodeTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFNodeTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFNodeTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFNodeTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFNodeTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFNodeTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFNodeTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFLightTypedArray::GLTFLightTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFLightTypedArray::~GLTFLightTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::constructor(){
    GLTFLightTypedArray class_ = GLTFLightTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFLightTypedArray>(class_);
  }

  GLTFLightTypedArray GLTFLightTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFLightTypedArray obj = GLTFLightTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFLightTypedArray::set_gdowner_GLTFLightTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFLightTypedArray::GLTFLightTypedArray(const GLTFLightTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFLightTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFLightTypedArray& GLTFLightTypedArray::operator=(const GLTFLightTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFLightTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFLightTypedArray GLTFLightTypedArray::new0(){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new0(){
    auto _class = GLTFLightTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new1(Array& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFLightTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFLightTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new3(PackedByteArray& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFLightTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new4(PackedInt32Array& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFLightTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new5(PackedInt64Array& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFLightTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new6(PackedFloat32Array& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFLightTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new7(PackedFloat64Array& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFLightTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new8(PackedStringArray& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFLightTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new9(PackedVector2Array& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFLightTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new10(PackedVector3Array& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFLightTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}
  GLTFLightTypedArray GLTFLightTypedArray::new11(PackedColorArray& from_){
    GLTFLightTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFLightTypedArray> GLTFLightTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFLightTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFLightTypedArray>(_class);
}

  Variant GLTFLightTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFLightTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFLightTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFLightTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFLightTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFLightTypedArray::py_clear(){
    this->clear();

  }


  void GLTFLightTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFLightTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFLightTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFLightTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFLightTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFLightTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFLightTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFLightTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFLightTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFLightTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFLightTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFLightTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFLightTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFLightTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFLightTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFLightTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFLightTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFLightTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFLightTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFLightTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFLightTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFLightTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFLightTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFLightTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFLightTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFLightTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFLightTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFLightTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFLightTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFLightTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFLightTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFLightTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFLightTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFLightTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFLightTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFLightTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFLightTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFLightTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFLightTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFLightTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFLightTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFLightTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFLightTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFLightTypedArray::py_sort(){
    this->sort();

  }


  void GLTFLightTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFLightTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFLightTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFLightTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFLightTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFLightTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFLightTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFLightTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFLightTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFLightTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFLightTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFLightTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFLightTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFLightTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFLightTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFLightTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFLightTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFLightTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFLightTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFLightTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFLightTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFLightTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFLightTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFLightTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFLightTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFLightTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFLightTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFLightTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFLightTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFLightTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFLightTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFLightTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFLightTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFLightTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFLightTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFLightTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFLightTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFLightTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFLightTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFLightTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFLightTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFLightTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFLightTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFLightTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFLightTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFLightTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFLightTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFLightTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFLightTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFLightTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFLightTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFLightTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFLightTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFLightTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFLightTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFLightTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFLightTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFLightTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFLightTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFLightTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFLightTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFSkeletonTypedArray::GLTFSkeletonTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFSkeletonTypedArray::~GLTFSkeletonTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::constructor(){
    GLTFSkeletonTypedArray class_ = GLTFSkeletonTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFSkeletonTypedArray>(class_);
  }

  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFSkeletonTypedArray obj = GLTFSkeletonTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFSkeletonTypedArray::set_gdowner_GLTFSkeletonTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFSkeletonTypedArray::GLTFSkeletonTypedArray(const GLTFSkeletonTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFSkeletonTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFSkeletonTypedArray& GLTFSkeletonTypedArray::operator=(const GLTFSkeletonTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFSkeletonTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new0(){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new0(){
    auto _class = GLTFSkeletonTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new1(Array& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFSkeletonTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFSkeletonTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new3(PackedByteArray& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFSkeletonTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new4(PackedInt32Array& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFSkeletonTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new5(PackedInt64Array& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFSkeletonTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new6(PackedFloat32Array& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFSkeletonTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new7(PackedFloat64Array& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFSkeletonTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new8(PackedStringArray& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFSkeletonTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new9(PackedVector2Array& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFSkeletonTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new10(PackedVector3Array& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFSkeletonTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}
  GLTFSkeletonTypedArray GLTFSkeletonTypedArray::new11(PackedColorArray& from_){
    GLTFSkeletonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkeletonTypedArray> GLTFSkeletonTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFSkeletonTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkeletonTypedArray>(_class);
}

  Variant GLTFSkeletonTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFSkeletonTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFSkeletonTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFSkeletonTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFSkeletonTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFSkeletonTypedArray::py_clear(){
    this->clear();

  }


  void GLTFSkeletonTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFSkeletonTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFSkeletonTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFSkeletonTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFSkeletonTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkeletonTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkeletonTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkeletonTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkeletonTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkeletonTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkeletonTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkeletonTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFSkeletonTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFSkeletonTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFSkeletonTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFSkeletonTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFSkeletonTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFSkeletonTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFSkeletonTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkeletonTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkeletonTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkeletonTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkeletonTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFSkeletonTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkeletonTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkeletonTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFSkeletonTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFSkeletonTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFSkeletonTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFSkeletonTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFSkeletonTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFSkeletonTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFSkeletonTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFSkeletonTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFSkeletonTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkeletonTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkeletonTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFSkeletonTypedArray::py_sort(){
    this->sort();

  }


  void GLTFSkeletonTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFSkeletonTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFSkeletonTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkeletonTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFSkeletonTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFSkeletonTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFSkeletonTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFSkeletonTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFSkeletonTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFSkeletonTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFSkeletonTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFSkeletonTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFSkeletonTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFSkeletonTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFSkeletonTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFSkeletonTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFSkeletonTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFSkeletonTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFSkeletonTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFSkeletonTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFSkeletonTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFSkeletonTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFSkeletonTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFSkeletonTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFSkeletonTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkeletonTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFSkeletonTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFSkeletonTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFSkeletonTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFSkeletonTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFSkeletonTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFSkeletonTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFSkeletonTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFSkeletonTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFSkeletonTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkeletonTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFSkeletonTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFSkeletonTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFSkeletonTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFSkeletonTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFSkeletonTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFSkeletonTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFSkeletonTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkeletonTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFSkeletonTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFSkeletonTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFCameraTypedArray::GLTFCameraTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFCameraTypedArray::~GLTFCameraTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::constructor(){
    GLTFCameraTypedArray class_ = GLTFCameraTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFCameraTypedArray>(class_);
  }

  GLTFCameraTypedArray GLTFCameraTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFCameraTypedArray obj = GLTFCameraTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFCameraTypedArray::set_gdowner_GLTFCameraTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFCameraTypedArray::GLTFCameraTypedArray(const GLTFCameraTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFCameraTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFCameraTypedArray& GLTFCameraTypedArray::operator=(const GLTFCameraTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFCameraTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFCameraTypedArray GLTFCameraTypedArray::new0(){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new0(){
    auto _class = GLTFCameraTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new1(Array& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFCameraTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFCameraTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new3(PackedByteArray& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFCameraTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new4(PackedInt32Array& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFCameraTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new5(PackedInt64Array& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFCameraTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new6(PackedFloat32Array& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFCameraTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new7(PackedFloat64Array& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFCameraTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new8(PackedStringArray& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFCameraTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new9(PackedVector2Array& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFCameraTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new10(PackedVector3Array& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFCameraTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}
  GLTFCameraTypedArray GLTFCameraTypedArray::new11(PackedColorArray& from_){
    GLTFCameraTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFCameraTypedArray> GLTFCameraTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFCameraTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFCameraTypedArray>(_class);
}

  Variant GLTFCameraTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFCameraTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFCameraTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFCameraTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFCameraTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFCameraTypedArray::py_clear(){
    this->clear();

  }


  void GLTFCameraTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFCameraTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFCameraTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFCameraTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFCameraTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFCameraTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFCameraTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFCameraTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFCameraTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFCameraTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFCameraTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFCameraTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFCameraTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFCameraTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFCameraTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFCameraTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFCameraTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFCameraTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFCameraTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFCameraTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFCameraTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFCameraTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFCameraTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFCameraTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFCameraTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFCameraTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFCameraTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFCameraTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFCameraTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFCameraTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFCameraTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFCameraTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFCameraTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFCameraTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFCameraTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFCameraTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFCameraTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFCameraTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFCameraTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFCameraTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFCameraTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFCameraTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFCameraTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFCameraTypedArray::py_sort(){
    this->sort();

  }


  void GLTFCameraTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFCameraTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFCameraTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFCameraTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFCameraTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFCameraTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFCameraTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFCameraTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFCameraTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFCameraTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFCameraTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFCameraTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFCameraTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFCameraTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFCameraTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFCameraTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFCameraTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFCameraTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFCameraTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFCameraTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFCameraTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFCameraTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFCameraTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFCameraTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFCameraTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFCameraTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFCameraTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFCameraTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFCameraTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFCameraTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFCameraTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFCameraTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFCameraTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFCameraTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFCameraTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFCameraTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFCameraTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFCameraTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFCameraTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFCameraTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFCameraTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFCameraTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFCameraTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFCameraTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFCameraTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFCameraTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFCameraTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFCameraTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFCameraTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFCameraTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFCameraTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFCameraTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFCameraTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFCameraTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFCameraTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFCameraTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFCameraTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFCameraTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFCameraTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFCameraTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFCameraTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void ImageTypedArray::ImageTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  ImageTypedArray::~ImageTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<ImageTypedArray> ImageTypedArray::constructor(){
    ImageTypedArray class_ = ImageTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<ImageTypedArray>(class_);
  }

  ImageTypedArray ImageTypedArray::new_static(GDExtensionObjectPtr owner){
    ImageTypedArray obj = ImageTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void ImageTypedArray::set_gdowner_ImageTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  ImageTypedArray::ImageTypedArray(const ImageTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ImageTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  ImageTypedArray& ImageTypedArray::operator=(const ImageTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ImageTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  ImageTypedArray ImageTypedArray::new0(){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new0(){
    auto _class = ImageTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new1(Array& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = ImageTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = ImageTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new3(PackedByteArray& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = ImageTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new4(PackedInt32Array& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = ImageTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new5(PackedInt64Array& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = ImageTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new6(PackedFloat32Array& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = ImageTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new7(PackedFloat64Array& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = ImageTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new8(PackedStringArray& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = ImageTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new9(PackedVector2Array& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = ImageTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new10(PackedVector3Array& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = ImageTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}
  ImageTypedArray ImageTypedArray::new11(PackedColorArray& from_){
    ImageTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ImageTypedArray> ImageTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = ImageTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ImageTypedArray>(_class);
}

  Variant ImageTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long ImageTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long ImageTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ImageTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool ImageTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ImageTypedArray::py_clear(){
    this->clear();

  }


  void ImageTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ImageTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long ImageTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ImageTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void ImageTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ImageTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ImageTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ImageTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ImageTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ImageTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ImageTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ImageTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void ImageTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long ImageTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long ImageTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ImageTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ImageTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void ImageTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void ImageTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ImageTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ImageTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ImageTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ImageTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* ImageTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ImageTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ImageTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ImageTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ImageTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ImageTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long ImageTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ImageTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ImageTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ImageTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ImageTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ImageTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ImageTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool ImageTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ImageTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ImageTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ImageTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ImageTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ImageTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ImageTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void ImageTypedArray::py_sort(){
    this->sort();

  }


  void ImageTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void ImageTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void ImageTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ImageTypedArray::py_shuffle(){
    this->shuffle();

  }


  void ImageTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ImageTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ImageTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ImageTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ImageTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void ImageTypedArray::py_reverse(){
    this->reverse();

  }


  void ImageTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> ImageTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array ImageTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ImageTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array ImageTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> ImageTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ImageTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ImageTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ImageTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* ImageTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant ImageTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool ImageTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool ImageTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ImageTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool ImageTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ImageTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ImageTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ImageTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ImageTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool ImageTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool ImageTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ImageTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool ImageTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ImageTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long ImageTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> ImageTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName ImageTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* ImageTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ImageTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void ImageTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void ImageTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool ImageTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool ImageTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ImageTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ImageTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool ImageTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ImageTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool ImageTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ImageTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool ImageTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ImageTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool ImageTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ImageTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool ImageTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ImageTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool ImageTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ImageTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool ImageTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ImageTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array ImageTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> ImageTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void intTypedArray::intTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  intTypedArray::~intTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<intTypedArray> intTypedArray::constructor(){
    intTypedArray class_ = intTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<intTypedArray>(class_);
  }

  intTypedArray intTypedArray::new_static(GDExtensionObjectPtr owner){
    intTypedArray obj = intTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void intTypedArray::set_gdowner_intTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  intTypedArray::intTypedArray(const intTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<intTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  intTypedArray& intTypedArray::operator=(const intTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<intTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  intTypedArray intTypedArray::new0(){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new0(){
    auto _class = intTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new1(Array& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = intTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = intTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new3(PackedByteArray& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = intTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new4(PackedInt32Array& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = intTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new5(PackedInt64Array& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = intTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new6(PackedFloat32Array& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = intTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new7(PackedFloat64Array& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = intTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new8(PackedStringArray& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = intTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new9(PackedVector2Array& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = intTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new10(PackedVector3Array& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = intTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}
  intTypedArray intTypedArray::new11(PackedColorArray& from_){
    intTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<intTypedArray> intTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = intTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<intTypedArray>(_class);
}

  Variant intTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long intTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long intTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool intTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool intTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void intTypedArray::py_clear(){
    this->clear();

  }


  void intTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long intTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long intTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void intTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void intTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void intTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void intTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void intTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void intTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void intTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void intTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void intTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void intTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long intTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long intTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long intTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long intTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void intTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void intTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void intTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void intTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void intTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void intTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* intTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant intTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* intTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant intTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* intTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant intTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long intTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long intTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long intTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long intTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long intTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long intTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool intTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool intTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* intTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant intTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* intTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant intTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* intTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant intTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void intTypedArray::py_sort(){
    this->sort();

  }


  void intTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void intTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void intTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void intTypedArray::py_shuffle(){
    this->shuffle();

  }


  void intTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long intTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long intTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long intTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long intTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void intTypedArray::py_reverse(){
    this->reverse();

  }


  void intTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> intTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array intTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> intTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array intTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> intTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array intTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> intTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array intTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* intTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant intTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool intTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool intTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool intTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool intTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* intTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant intTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* intTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant intTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool intTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool intTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool intTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool intTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long intTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long intTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> intTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName intTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* intTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant intTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void intTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void intTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool intTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool intTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool intTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool intTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool intTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool intTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool intTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool intTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool intTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool intTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool intTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool intTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool intTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool intTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool intTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool intTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool intTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool intTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array intTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> intTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void TweenTypedArray::TweenTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  TweenTypedArray::~TweenTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<TweenTypedArray> TweenTypedArray::constructor(){
    TweenTypedArray class_ = TweenTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<TweenTypedArray>(class_);
  }

  TweenTypedArray TweenTypedArray::new_static(GDExtensionObjectPtr owner){
    TweenTypedArray obj = TweenTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void TweenTypedArray::set_gdowner_TweenTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  TweenTypedArray::TweenTypedArray(const TweenTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<TweenTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  TweenTypedArray& TweenTypedArray::operator=(const TweenTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<TweenTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  TweenTypedArray TweenTypedArray::new0(){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new0(){
    auto _class = TweenTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new1(Array& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = TweenTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = TweenTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new3(PackedByteArray& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = TweenTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new4(PackedInt32Array& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = TweenTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new5(PackedInt64Array& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = TweenTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new6(PackedFloat32Array& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = TweenTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new7(PackedFloat64Array& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = TweenTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new8(PackedStringArray& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = TweenTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new9(PackedVector2Array& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = TweenTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new10(PackedVector3Array& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = TweenTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}
  TweenTypedArray TweenTypedArray::new11(PackedColorArray& from_){
    TweenTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<TweenTypedArray> TweenTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = TweenTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<TweenTypedArray>(_class);
}

  Variant TweenTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long TweenTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long TweenTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool TweenTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool TweenTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void TweenTypedArray::py_clear(){
    this->clear();

  }


  void TweenTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long TweenTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long TweenTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void TweenTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void TweenTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TweenTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TweenTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TweenTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TweenTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TweenTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TweenTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TweenTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void TweenTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long TweenTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long TweenTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long TweenTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long TweenTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void TweenTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void TweenTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TweenTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TweenTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TweenTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void TweenTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* TweenTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TweenTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TweenTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TweenTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TweenTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TweenTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long TweenTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long TweenTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long TweenTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long TweenTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long TweenTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long TweenTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool TweenTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool TweenTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* TweenTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TweenTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TweenTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TweenTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TweenTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TweenTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void TweenTypedArray::py_sort(){
    this->sort();

  }


  void TweenTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void TweenTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void TweenTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void TweenTypedArray::py_shuffle(){
    this->shuffle();

  }


  void TweenTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long TweenTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long TweenTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long TweenTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long TweenTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void TweenTypedArray::py_reverse(){
    this->reverse();

  }


  void TweenTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> TweenTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array TweenTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> TweenTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array TweenTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> TweenTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array TweenTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> TweenTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array TweenTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* TweenTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant TweenTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool TweenTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool TweenTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool TweenTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool TweenTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* TweenTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TweenTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* TweenTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TweenTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool TweenTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool TweenTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool TweenTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool TweenTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long TweenTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long TweenTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> TweenTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName TweenTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* TweenTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant TweenTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void TweenTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void TweenTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool TweenTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool TweenTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool TweenTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool TweenTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool TweenTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TweenTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool TweenTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool TweenTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool TweenTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TweenTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool TweenTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TweenTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool TweenTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TweenTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool TweenTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TweenTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool TweenTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool TweenTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array TweenTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> TweenTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void BaseButtonTypedArray::BaseButtonTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  BaseButtonTypedArray::~BaseButtonTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::constructor(){
    BaseButtonTypedArray class_ = BaseButtonTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<BaseButtonTypedArray>(class_);
  }

  BaseButtonTypedArray BaseButtonTypedArray::new_static(GDExtensionObjectPtr owner){
    BaseButtonTypedArray obj = BaseButtonTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void BaseButtonTypedArray::set_gdowner_BaseButtonTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  BaseButtonTypedArray::BaseButtonTypedArray(const BaseButtonTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<BaseButtonTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  BaseButtonTypedArray& BaseButtonTypedArray::operator=(const BaseButtonTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<BaseButtonTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  BaseButtonTypedArray BaseButtonTypedArray::new0(){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new0(){
    auto _class = BaseButtonTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new1(Array& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = BaseButtonTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = BaseButtonTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new3(PackedByteArray& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = BaseButtonTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new4(PackedInt32Array& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = BaseButtonTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new5(PackedInt64Array& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = BaseButtonTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new6(PackedFloat32Array& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = BaseButtonTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new7(PackedFloat64Array& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = BaseButtonTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new8(PackedStringArray& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = BaseButtonTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new9(PackedVector2Array& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = BaseButtonTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new10(PackedVector3Array& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = BaseButtonTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}
  BaseButtonTypedArray BaseButtonTypedArray::new11(PackedColorArray& from_){
    BaseButtonTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<BaseButtonTypedArray> BaseButtonTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = BaseButtonTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<BaseButtonTypedArray>(_class);
}

  Variant BaseButtonTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long BaseButtonTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long BaseButtonTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool BaseButtonTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool BaseButtonTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void BaseButtonTypedArray::py_clear(){
    this->clear();

  }


  void BaseButtonTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long BaseButtonTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long BaseButtonTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void BaseButtonTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void BaseButtonTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void BaseButtonTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void BaseButtonTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void BaseButtonTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void BaseButtonTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void BaseButtonTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void BaseButtonTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void BaseButtonTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void BaseButtonTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long BaseButtonTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long BaseButtonTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long BaseButtonTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long BaseButtonTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void BaseButtonTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void BaseButtonTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void BaseButtonTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void BaseButtonTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void BaseButtonTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void BaseButtonTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* BaseButtonTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant BaseButtonTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* BaseButtonTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant BaseButtonTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* BaseButtonTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant BaseButtonTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long BaseButtonTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long BaseButtonTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long BaseButtonTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long BaseButtonTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long BaseButtonTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long BaseButtonTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool BaseButtonTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool BaseButtonTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* BaseButtonTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant BaseButtonTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* BaseButtonTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant BaseButtonTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* BaseButtonTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant BaseButtonTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void BaseButtonTypedArray::py_sort(){
    this->sort();

  }


  void BaseButtonTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void BaseButtonTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void BaseButtonTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void BaseButtonTypedArray::py_shuffle(){
    this->shuffle();

  }


  void BaseButtonTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long BaseButtonTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long BaseButtonTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long BaseButtonTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long BaseButtonTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void BaseButtonTypedArray::py_reverse(){
    this->reverse();

  }


  void BaseButtonTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> BaseButtonTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array BaseButtonTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> BaseButtonTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array BaseButtonTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> BaseButtonTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array BaseButtonTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> BaseButtonTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array BaseButtonTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* BaseButtonTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant BaseButtonTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool BaseButtonTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool BaseButtonTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool BaseButtonTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool BaseButtonTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* BaseButtonTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant BaseButtonTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* BaseButtonTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant BaseButtonTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool BaseButtonTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool BaseButtonTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool BaseButtonTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool BaseButtonTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long BaseButtonTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long BaseButtonTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> BaseButtonTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName BaseButtonTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* BaseButtonTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant BaseButtonTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void BaseButtonTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void BaseButtonTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool BaseButtonTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool BaseButtonTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool BaseButtonTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool BaseButtonTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool BaseButtonTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool BaseButtonTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool BaseButtonTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool BaseButtonTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool BaseButtonTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool BaseButtonTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool BaseButtonTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool BaseButtonTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool BaseButtonTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool BaseButtonTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool BaseButtonTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool BaseButtonTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool BaseButtonTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool BaseButtonTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array BaseButtonTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> BaseButtonTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Vector3iTypedArray::Vector3iTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Vector3iTypedArray::~Vector3iTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::constructor(){
    Vector3iTypedArray class_ = Vector3iTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Vector3iTypedArray>(class_);
  }

  Vector3iTypedArray Vector3iTypedArray::new_static(GDExtensionObjectPtr owner){
    Vector3iTypedArray obj = Vector3iTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Vector3iTypedArray::set_gdowner_Vector3iTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Vector3iTypedArray::Vector3iTypedArray(const Vector3iTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Vector3iTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Vector3iTypedArray& Vector3iTypedArray::operator=(const Vector3iTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Vector3iTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Vector3iTypedArray Vector3iTypedArray::new0(){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new0(){
    auto _class = Vector3iTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new1(Array& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Vector3iTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Vector3iTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new3(PackedByteArray& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Vector3iTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new4(PackedInt32Array& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Vector3iTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new5(PackedInt64Array& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Vector3iTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new6(PackedFloat32Array& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Vector3iTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new7(PackedFloat64Array& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Vector3iTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new8(PackedStringArray& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Vector3iTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new9(PackedVector2Array& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Vector3iTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new10(PackedVector3Array& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Vector3iTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}
  Vector3iTypedArray Vector3iTypedArray::new11(PackedColorArray& from_){
    Vector3iTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Vector3iTypedArray> Vector3iTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Vector3iTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Vector3iTypedArray>(_class);
}

  Variant Vector3iTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Vector3iTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Vector3iTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector3iTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Vector3iTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Vector3iTypedArray::py_clear(){
    this->clear();

  }


  void Vector3iTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Vector3iTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Vector3iTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Vector3iTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Vector3iTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3iTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3iTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3iTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3iTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3iTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3iTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3iTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Vector3iTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Vector3iTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Vector3iTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Vector3iTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector3iTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Vector3iTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Vector3iTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3iTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3iTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3iTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Vector3iTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Vector3iTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3iTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3iTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3iTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3iTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3iTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Vector3iTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Vector3iTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector3iTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Vector3iTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector3iTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector3iTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Vector3iTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Vector3iTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Vector3iTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3iTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3iTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3iTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3iTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3iTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Vector3iTypedArray::py_sort(){
    this->sort();

  }


  void Vector3iTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Vector3iTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Vector3iTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Vector3iTypedArray::py_shuffle(){
    this->shuffle();

  }


  void Vector3iTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Vector3iTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector3iTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Vector3iTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Vector3iTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Vector3iTypedArray::py_reverse(){
    this->reverse();

  }


  void Vector3iTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Vector3iTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Vector3iTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Vector3iTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Vector3iTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Vector3iTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Vector3iTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Vector3iTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Vector3iTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Vector3iTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Vector3iTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Vector3iTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Vector3iTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Vector3iTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Vector3iTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Vector3iTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3iTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Vector3iTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3iTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Vector3iTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Vector3iTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector3iTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Vector3iTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Vector3iTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Vector3iTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Vector3iTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Vector3iTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Vector3iTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Vector3iTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Vector3iTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Vector3iTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Vector3iTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Vector3iTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Vector3iTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Vector3iTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Vector3iTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3iTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Vector3iTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Vector3iTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Vector3iTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3iTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Vector3iTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3iTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Vector3iTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3iTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Vector3iTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3iTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Vector3iTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Vector3iTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Vector3iTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Vector3iTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void MaterialTypedArray::MaterialTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  MaterialTypedArray::~MaterialTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::constructor(){
    MaterialTypedArray class_ = MaterialTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<MaterialTypedArray>(class_);
  }

  MaterialTypedArray MaterialTypedArray::new_static(GDExtensionObjectPtr owner){
    MaterialTypedArray obj = MaterialTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void MaterialTypedArray::set_gdowner_MaterialTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  MaterialTypedArray::MaterialTypedArray(const MaterialTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<MaterialTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  MaterialTypedArray& MaterialTypedArray::operator=(const MaterialTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<MaterialTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  MaterialTypedArray MaterialTypedArray::new0(){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new0(){
    auto _class = MaterialTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new1(Array& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = MaterialTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = MaterialTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new3(PackedByteArray& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = MaterialTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new4(PackedInt32Array& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = MaterialTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new5(PackedInt64Array& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = MaterialTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new6(PackedFloat32Array& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = MaterialTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new7(PackedFloat64Array& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = MaterialTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new8(PackedStringArray& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = MaterialTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new9(PackedVector2Array& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = MaterialTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new10(PackedVector3Array& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = MaterialTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}
  MaterialTypedArray MaterialTypedArray::new11(PackedColorArray& from_){
    MaterialTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MaterialTypedArray> MaterialTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = MaterialTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MaterialTypedArray>(_class);
}

  Variant MaterialTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long MaterialTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long MaterialTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool MaterialTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool MaterialTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void MaterialTypedArray::py_clear(){
    this->clear();

  }


  void MaterialTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long MaterialTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long MaterialTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void MaterialTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void MaterialTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MaterialTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MaterialTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MaterialTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MaterialTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MaterialTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MaterialTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MaterialTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void MaterialTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long MaterialTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long MaterialTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long MaterialTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long MaterialTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void MaterialTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void MaterialTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MaterialTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MaterialTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MaterialTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MaterialTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* MaterialTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MaterialTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MaterialTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MaterialTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MaterialTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MaterialTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long MaterialTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long MaterialTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long MaterialTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long MaterialTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long MaterialTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long MaterialTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool MaterialTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool MaterialTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* MaterialTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MaterialTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MaterialTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MaterialTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MaterialTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MaterialTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void MaterialTypedArray::py_sort(){
    this->sort();

  }


  void MaterialTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void MaterialTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void MaterialTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MaterialTypedArray::py_shuffle(){
    this->shuffle();

  }


  void MaterialTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long MaterialTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long MaterialTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long MaterialTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long MaterialTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void MaterialTypedArray::py_reverse(){
    this->reverse();

  }


  void MaterialTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> MaterialTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array MaterialTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> MaterialTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array MaterialTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> MaterialTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array MaterialTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> MaterialTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array MaterialTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* MaterialTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant MaterialTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool MaterialTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool MaterialTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool MaterialTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool MaterialTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* MaterialTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MaterialTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MaterialTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MaterialTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool MaterialTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool MaterialTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool MaterialTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool MaterialTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long MaterialTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long MaterialTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> MaterialTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName MaterialTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* MaterialTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MaterialTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void MaterialTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void MaterialTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool MaterialTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool MaterialTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool MaterialTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool MaterialTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool MaterialTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MaterialTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool MaterialTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool MaterialTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool MaterialTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MaterialTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool MaterialTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MaterialTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool MaterialTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MaterialTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool MaterialTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MaterialTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool MaterialTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MaterialTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array MaterialTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> MaterialTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFSkinTypedArray::GLTFSkinTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFSkinTypedArray::~GLTFSkinTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::constructor(){
    GLTFSkinTypedArray class_ = GLTFSkinTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFSkinTypedArray>(class_);
  }

  GLTFSkinTypedArray GLTFSkinTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFSkinTypedArray obj = GLTFSkinTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFSkinTypedArray::set_gdowner_GLTFSkinTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFSkinTypedArray::GLTFSkinTypedArray(const GLTFSkinTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFSkinTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFSkinTypedArray& GLTFSkinTypedArray::operator=(const GLTFSkinTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFSkinTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFSkinTypedArray GLTFSkinTypedArray::new0(){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new0(){
    auto _class = GLTFSkinTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new1(Array& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFSkinTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFSkinTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new3(PackedByteArray& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFSkinTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new4(PackedInt32Array& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFSkinTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new5(PackedInt64Array& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFSkinTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new6(PackedFloat32Array& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFSkinTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new7(PackedFloat64Array& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFSkinTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new8(PackedStringArray& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFSkinTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new9(PackedVector2Array& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFSkinTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new10(PackedVector3Array& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFSkinTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}
  GLTFSkinTypedArray GLTFSkinTypedArray::new11(PackedColorArray& from_){
    GLTFSkinTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFSkinTypedArray> GLTFSkinTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFSkinTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFSkinTypedArray>(_class);
}

  Variant GLTFSkinTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFSkinTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFSkinTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFSkinTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFSkinTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFSkinTypedArray::py_clear(){
    this->clear();

  }


  void GLTFSkinTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFSkinTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFSkinTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFSkinTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFSkinTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkinTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkinTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkinTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkinTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkinTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkinTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkinTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFSkinTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFSkinTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFSkinTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFSkinTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFSkinTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFSkinTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFSkinTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkinTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkinTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkinTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFSkinTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFSkinTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkinTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkinTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkinTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkinTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkinTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFSkinTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFSkinTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFSkinTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFSkinTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFSkinTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFSkinTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFSkinTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFSkinTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFSkinTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkinTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkinTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkinTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkinTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkinTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFSkinTypedArray::py_sort(){
    this->sort();

  }


  void GLTFSkinTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFSkinTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFSkinTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFSkinTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFSkinTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFSkinTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFSkinTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFSkinTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFSkinTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFSkinTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFSkinTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFSkinTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFSkinTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFSkinTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFSkinTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFSkinTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFSkinTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFSkinTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFSkinTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFSkinTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFSkinTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFSkinTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFSkinTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFSkinTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFSkinTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFSkinTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkinTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFSkinTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkinTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFSkinTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFSkinTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFSkinTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFSkinTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFSkinTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFSkinTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFSkinTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFSkinTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFSkinTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFSkinTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFSkinTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFSkinTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFSkinTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFSkinTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFSkinTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFSkinTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFSkinTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkinTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFSkinTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFSkinTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFSkinTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkinTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFSkinTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkinTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFSkinTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkinTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFSkinTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkinTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFSkinTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFSkinTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFSkinTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFSkinTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFMeshTypedArray::GLTFMeshTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFMeshTypedArray::~GLTFMeshTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::constructor(){
    GLTFMeshTypedArray class_ = GLTFMeshTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFMeshTypedArray>(class_);
  }

  GLTFMeshTypedArray GLTFMeshTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFMeshTypedArray obj = GLTFMeshTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFMeshTypedArray::set_gdowner_GLTFMeshTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFMeshTypedArray::GLTFMeshTypedArray(const GLTFMeshTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFMeshTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFMeshTypedArray& GLTFMeshTypedArray::operator=(const GLTFMeshTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFMeshTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFMeshTypedArray GLTFMeshTypedArray::new0(){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new0(){
    auto _class = GLTFMeshTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new1(Array& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFMeshTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFMeshTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new3(PackedByteArray& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFMeshTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new4(PackedInt32Array& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFMeshTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new5(PackedInt64Array& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFMeshTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new6(PackedFloat32Array& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFMeshTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new7(PackedFloat64Array& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFMeshTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new8(PackedStringArray& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFMeshTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new9(PackedVector2Array& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFMeshTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new10(PackedVector3Array& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFMeshTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}
  GLTFMeshTypedArray GLTFMeshTypedArray::new11(PackedColorArray& from_){
    GLTFMeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFMeshTypedArray> GLTFMeshTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFMeshTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFMeshTypedArray>(_class);
}

  Variant GLTFMeshTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFMeshTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFMeshTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFMeshTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFMeshTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFMeshTypedArray::py_clear(){
    this->clear();

  }


  void GLTFMeshTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFMeshTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFMeshTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFMeshTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFMeshTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFMeshTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFMeshTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFMeshTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFMeshTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFMeshTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFMeshTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFMeshTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFMeshTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFMeshTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFMeshTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFMeshTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFMeshTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFMeshTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFMeshTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFMeshTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFMeshTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFMeshTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFMeshTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFMeshTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFMeshTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFMeshTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFMeshTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFMeshTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFMeshTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFMeshTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFMeshTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFMeshTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFMeshTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFMeshTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFMeshTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFMeshTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFMeshTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFMeshTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFMeshTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFMeshTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFMeshTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFMeshTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFMeshTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFMeshTypedArray::py_sort(){
    this->sort();

  }


  void GLTFMeshTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFMeshTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFMeshTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFMeshTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFMeshTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFMeshTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFMeshTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFMeshTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFMeshTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFMeshTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFMeshTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFMeshTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFMeshTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFMeshTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFMeshTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFMeshTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFMeshTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFMeshTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFMeshTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFMeshTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFMeshTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFMeshTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFMeshTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFMeshTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFMeshTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFMeshTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFMeshTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFMeshTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFMeshTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFMeshTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFMeshTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFMeshTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFMeshTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFMeshTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFMeshTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFMeshTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFMeshTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFMeshTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFMeshTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFMeshTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFMeshTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFMeshTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFMeshTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFMeshTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFMeshTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFMeshTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFMeshTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFMeshTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFMeshTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFMeshTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFMeshTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFMeshTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFMeshTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFMeshTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFMeshTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFMeshTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFMeshTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFMeshTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFMeshTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFMeshTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFMeshTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFBufferViewTypedArray::GLTFBufferViewTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFBufferViewTypedArray::~GLTFBufferViewTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::constructor(){
    GLTFBufferViewTypedArray class_ = GLTFBufferViewTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFBufferViewTypedArray>(class_);
  }

  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFBufferViewTypedArray obj = GLTFBufferViewTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFBufferViewTypedArray::set_gdowner_GLTFBufferViewTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFBufferViewTypedArray::GLTFBufferViewTypedArray(const GLTFBufferViewTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFBufferViewTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFBufferViewTypedArray& GLTFBufferViewTypedArray::operator=(const GLTFBufferViewTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFBufferViewTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new0(){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new0(){
    auto _class = GLTFBufferViewTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new1(Array& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFBufferViewTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFBufferViewTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new3(PackedByteArray& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFBufferViewTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new4(PackedInt32Array& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFBufferViewTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new5(PackedInt64Array& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFBufferViewTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new6(PackedFloat32Array& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFBufferViewTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new7(PackedFloat64Array& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFBufferViewTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new8(PackedStringArray& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFBufferViewTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new9(PackedVector2Array& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFBufferViewTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new10(PackedVector3Array& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFBufferViewTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}
  GLTFBufferViewTypedArray GLTFBufferViewTypedArray::new11(PackedColorArray& from_){
    GLTFBufferViewTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFBufferViewTypedArray> GLTFBufferViewTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFBufferViewTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFBufferViewTypedArray>(_class);
}

  Variant GLTFBufferViewTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFBufferViewTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFBufferViewTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFBufferViewTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFBufferViewTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFBufferViewTypedArray::py_clear(){
    this->clear();

  }


  void GLTFBufferViewTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFBufferViewTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFBufferViewTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFBufferViewTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFBufferViewTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFBufferViewTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFBufferViewTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFBufferViewTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFBufferViewTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFBufferViewTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFBufferViewTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFBufferViewTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFBufferViewTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFBufferViewTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFBufferViewTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFBufferViewTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFBufferViewTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFBufferViewTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFBufferViewTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFBufferViewTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFBufferViewTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFBufferViewTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFBufferViewTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFBufferViewTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFBufferViewTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFBufferViewTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFBufferViewTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFBufferViewTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFBufferViewTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFBufferViewTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFBufferViewTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFBufferViewTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFBufferViewTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFBufferViewTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFBufferViewTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFBufferViewTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFBufferViewTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFBufferViewTypedArray::py_sort(){
    this->sort();

  }


  void GLTFBufferViewTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFBufferViewTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFBufferViewTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFBufferViewTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFBufferViewTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFBufferViewTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFBufferViewTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFBufferViewTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFBufferViewTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFBufferViewTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFBufferViewTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFBufferViewTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFBufferViewTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFBufferViewTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFBufferViewTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFBufferViewTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFBufferViewTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFBufferViewTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFBufferViewTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFBufferViewTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFBufferViewTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFBufferViewTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFBufferViewTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFBufferViewTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFBufferViewTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFBufferViewTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFBufferViewTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFBufferViewTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFBufferViewTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFBufferViewTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFBufferViewTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFBufferViewTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFBufferViewTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFBufferViewTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFBufferViewTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFBufferViewTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFBufferViewTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFBufferViewTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFBufferViewTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFBufferViewTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFBufferViewTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFBufferViewTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFBufferViewTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFBufferViewTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFBufferViewTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFBufferViewTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Node3DTypedArray::Node3DTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Node3DTypedArray::~Node3DTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::constructor(){
    Node3DTypedArray class_ = Node3DTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Node3DTypedArray>(class_);
  }

  Node3DTypedArray Node3DTypedArray::new_static(GDExtensionObjectPtr owner){
    Node3DTypedArray obj = Node3DTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Node3DTypedArray::set_gdowner_Node3DTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Node3DTypedArray::Node3DTypedArray(const Node3DTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Node3DTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Node3DTypedArray& Node3DTypedArray::operator=(const Node3DTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Node3DTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Node3DTypedArray Node3DTypedArray::new0(){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new0(){
    auto _class = Node3DTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new1(Array& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Node3DTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Node3DTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new3(PackedByteArray& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Node3DTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new4(PackedInt32Array& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Node3DTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new5(PackedInt64Array& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Node3DTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new6(PackedFloat32Array& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Node3DTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new7(PackedFloat64Array& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Node3DTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new8(PackedStringArray& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Node3DTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new9(PackedVector2Array& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Node3DTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new10(PackedVector3Array& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Node3DTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}
  Node3DTypedArray Node3DTypedArray::new11(PackedColorArray& from_){
    Node3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DTypedArray> Node3DTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Node3DTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DTypedArray>(_class);
}

  Variant Node3DTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Node3DTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Node3DTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Node3DTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Node3DTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Node3DTypedArray::py_clear(){
    this->clear();

  }


  void Node3DTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Node3DTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Node3DTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Node3DTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Node3DTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Node3DTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Node3DTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Node3DTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Node3DTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node3DTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Node3DTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Node3DTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Node3DTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Node3DTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Node3DTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Node3DTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Node3DTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Node3DTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node3DTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Node3DTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Node3DTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Node3DTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Node3DTypedArray::py_sort(){
    this->sort();

  }


  void Node3DTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Node3DTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Node3DTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DTypedArray::py_shuffle(){
    this->shuffle();

  }


  void Node3DTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Node3DTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node3DTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Node3DTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node3DTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Node3DTypedArray::py_reverse(){
    this->reverse();

  }


  void Node3DTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Node3DTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Node3DTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Node3DTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Node3DTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Node3DTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Node3DTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Node3DTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Node3DTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Node3DTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Node3DTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Node3DTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Node3DTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Node3DTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Node3DTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Node3DTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Node3DTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Node3DTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Node3DTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Node3DTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Node3DTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Node3DTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Node3DTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Node3DTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Node3DTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Node3DTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Node3DTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Node3DTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Node3DTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Node3DTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Node3DTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Node3DTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Node3DTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Node3DTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Node3DTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Node3DTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Node3DTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Node3DTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Node3DTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Node3DTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Node3DTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void FontTypedArray::FontTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  FontTypedArray::~FontTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<FontTypedArray> FontTypedArray::constructor(){
    FontTypedArray class_ = FontTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<FontTypedArray>(class_);
  }

  FontTypedArray FontTypedArray::new_static(GDExtensionObjectPtr owner){
    FontTypedArray obj = FontTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void FontTypedArray::set_gdowner_FontTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  FontTypedArray::FontTypedArray(const FontTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<FontTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  FontTypedArray& FontTypedArray::operator=(const FontTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<FontTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  FontTypedArray FontTypedArray::new0(){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new0(){
    auto _class = FontTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new1(Array& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = FontTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = FontTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new3(PackedByteArray& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = FontTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new4(PackedInt32Array& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = FontTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new5(PackedInt64Array& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = FontTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new6(PackedFloat32Array& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = FontTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new7(PackedFloat64Array& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = FontTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new8(PackedStringArray& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = FontTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new9(PackedVector2Array& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = FontTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new10(PackedVector3Array& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = FontTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}
  FontTypedArray FontTypedArray::new11(PackedColorArray& from_){
    FontTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<FontTypedArray> FontTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = FontTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<FontTypedArray>(_class);
}

  Variant FontTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long FontTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long FontTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool FontTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool FontTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void FontTypedArray::py_clear(){
    this->clear();

  }


  void FontTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long FontTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long FontTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void FontTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void FontTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void FontTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void FontTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void FontTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void FontTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void FontTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void FontTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void FontTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void FontTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long FontTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long FontTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long FontTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long FontTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void FontTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void FontTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void FontTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void FontTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void FontTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void FontTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* FontTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant FontTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* FontTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant FontTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* FontTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant FontTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long FontTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long FontTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long FontTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long FontTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long FontTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long FontTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool FontTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool FontTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* FontTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant FontTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* FontTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant FontTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* FontTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant FontTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void FontTypedArray::py_sort(){
    this->sort();

  }


  void FontTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void FontTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void FontTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void FontTypedArray::py_shuffle(){
    this->shuffle();

  }


  void FontTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long FontTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long FontTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long FontTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long FontTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void FontTypedArray::py_reverse(){
    this->reverse();

  }


  void FontTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> FontTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array FontTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> FontTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array FontTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> FontTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array FontTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> FontTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array FontTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* FontTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant FontTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool FontTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool FontTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool FontTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool FontTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* FontTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant FontTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* FontTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant FontTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool FontTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool FontTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool FontTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool FontTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long FontTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long FontTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> FontTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName FontTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* FontTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant FontTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void FontTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void FontTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool FontTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool FontTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool FontTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool FontTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool FontTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool FontTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool FontTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool FontTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool FontTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool FontTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool FontTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool FontTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool FontTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool FontTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool FontTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool FontTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool FontTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool FontTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array FontTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> FontTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void RDUniformTypedArray::RDUniformTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  RDUniformTypedArray::~RDUniformTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::constructor(){
    RDUniformTypedArray class_ = RDUniformTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<RDUniformTypedArray>(class_);
  }

  RDUniformTypedArray RDUniformTypedArray::new_static(GDExtensionObjectPtr owner){
    RDUniformTypedArray obj = RDUniformTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void RDUniformTypedArray::set_gdowner_RDUniformTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  RDUniformTypedArray::RDUniformTypedArray(const RDUniformTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDUniformTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  RDUniformTypedArray& RDUniformTypedArray::operator=(const RDUniformTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDUniformTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  RDUniformTypedArray RDUniformTypedArray::new0(){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new0(){
    auto _class = RDUniformTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new1(Array& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = RDUniformTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = RDUniformTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new3(PackedByteArray& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = RDUniformTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new4(PackedInt32Array& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = RDUniformTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new5(PackedInt64Array& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = RDUniformTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new6(PackedFloat32Array& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = RDUniformTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new7(PackedFloat64Array& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = RDUniformTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new8(PackedStringArray& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = RDUniformTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new9(PackedVector2Array& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = RDUniformTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new10(PackedVector3Array& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = RDUniformTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}
  RDUniformTypedArray RDUniformTypedArray::new11(PackedColorArray& from_){
    RDUniformTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDUniformTypedArray> RDUniformTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = RDUniformTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDUniformTypedArray>(_class);
}

  Variant RDUniformTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long RDUniformTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long RDUniformTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDUniformTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool RDUniformTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDUniformTypedArray::py_clear(){
    this->clear();

  }


  void RDUniformTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDUniformTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long RDUniformTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDUniformTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void RDUniformTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDUniformTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDUniformTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDUniformTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDUniformTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDUniformTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDUniformTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDUniformTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void RDUniformTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long RDUniformTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long RDUniformTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDUniformTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDUniformTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void RDUniformTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void RDUniformTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDUniformTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDUniformTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDUniformTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDUniformTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* RDUniformTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDUniformTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDUniformTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDUniformTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDUniformTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDUniformTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long RDUniformTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDUniformTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDUniformTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDUniformTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDUniformTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDUniformTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDUniformTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool RDUniformTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDUniformTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDUniformTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDUniformTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDUniformTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDUniformTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDUniformTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void RDUniformTypedArray::py_sort(){
    this->sort();

  }


  void RDUniformTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void RDUniformTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void RDUniformTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDUniformTypedArray::py_shuffle(){
    this->shuffle();

  }


  void RDUniformTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDUniformTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDUniformTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDUniformTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDUniformTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void RDUniformTypedArray::py_reverse(){
    this->reverse();

  }


  void RDUniformTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> RDUniformTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDUniformTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDUniformTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDUniformTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> RDUniformTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDUniformTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDUniformTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDUniformTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* RDUniformTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant RDUniformTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool RDUniformTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool RDUniformTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDUniformTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool RDUniformTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDUniformTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDUniformTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDUniformTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDUniformTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool RDUniformTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool RDUniformTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDUniformTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool RDUniformTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDUniformTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long RDUniformTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> RDUniformTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName RDUniformTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* RDUniformTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDUniformTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void RDUniformTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void RDUniformTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool RDUniformTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool RDUniformTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDUniformTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDUniformTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool RDUniformTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDUniformTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool RDUniformTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDUniformTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool RDUniformTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDUniformTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool RDUniformTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDUniformTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool RDUniformTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDUniformTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool RDUniformTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDUniformTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool RDUniformTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDUniformTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array RDUniformTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> RDUniformTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Node3DGizmoTypedArray::Node3DGizmoTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Node3DGizmoTypedArray::~Node3DGizmoTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::constructor(){
    Node3DGizmoTypedArray class_ = Node3DGizmoTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Node3DGizmoTypedArray>(class_);
  }

  Node3DGizmoTypedArray Node3DGizmoTypedArray::new_static(GDExtensionObjectPtr owner){
    Node3DGizmoTypedArray obj = Node3DGizmoTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Node3DGizmoTypedArray::set_gdowner_Node3DGizmoTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Node3DGizmoTypedArray::Node3DGizmoTypedArray(const Node3DGizmoTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Node3DGizmoTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Node3DGizmoTypedArray& Node3DGizmoTypedArray::operator=(const Node3DGizmoTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Node3DGizmoTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new0(){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new0(){
    auto _class = Node3DGizmoTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new1(Array& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Node3DGizmoTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Node3DGizmoTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new3(PackedByteArray& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Node3DGizmoTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new4(PackedInt32Array& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Node3DGizmoTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new5(PackedInt64Array& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Node3DGizmoTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new6(PackedFloat32Array& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Node3DGizmoTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new7(PackedFloat64Array& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Node3DGizmoTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new8(PackedStringArray& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Node3DGizmoTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new9(PackedVector2Array& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Node3DGizmoTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new10(PackedVector3Array& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Node3DGizmoTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}
  Node3DGizmoTypedArray Node3DGizmoTypedArray::new11(PackedColorArray& from_){
    Node3DGizmoTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Node3DGizmoTypedArray> Node3DGizmoTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Node3DGizmoTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Node3DGizmoTypedArray>(_class);
}

  Variant Node3DGizmoTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Node3DGizmoTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Node3DGizmoTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Node3DGizmoTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Node3DGizmoTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Node3DGizmoTypedArray::py_clear(){
    this->clear();

  }


  void Node3DGizmoTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Node3DGizmoTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Node3DGizmoTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Node3DGizmoTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Node3DGizmoTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DGizmoTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DGizmoTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DGizmoTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DGizmoTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DGizmoTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DGizmoTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DGizmoTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Node3DGizmoTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Node3DGizmoTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Node3DGizmoTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Node3DGizmoTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node3DGizmoTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Node3DGizmoTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Node3DGizmoTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DGizmoTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DGizmoTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DGizmoTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Node3DGizmoTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Node3DGizmoTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DGizmoTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DGizmoTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Node3DGizmoTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Node3DGizmoTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Node3DGizmoTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Node3DGizmoTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Node3DGizmoTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node3DGizmoTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Node3DGizmoTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Node3DGizmoTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Node3DGizmoTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DGizmoTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DGizmoTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Node3DGizmoTypedArray::py_sort(){
    this->sort();

  }


  void Node3DGizmoTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Node3DGizmoTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Node3DGizmoTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Node3DGizmoTypedArray::py_shuffle(){
    this->shuffle();

  }


  void Node3DGizmoTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Node3DGizmoTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node3DGizmoTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Node3DGizmoTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Node3DGizmoTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Node3DGizmoTypedArray::py_reverse(){
    this->reverse();

  }


  void Node3DGizmoTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Node3DGizmoTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Node3DGizmoTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Node3DGizmoTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Node3DGizmoTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Node3DGizmoTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Node3DGizmoTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Node3DGizmoTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Node3DGizmoTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Node3DGizmoTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Node3DGizmoTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Node3DGizmoTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Node3DGizmoTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Node3DGizmoTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Node3DGizmoTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Node3DGizmoTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Node3DGizmoTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Node3DGizmoTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Node3DGizmoTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Node3DGizmoTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Node3DGizmoTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Node3DGizmoTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Node3DGizmoTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Node3DGizmoTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Node3DGizmoTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Node3DGizmoTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Node3DGizmoTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Node3DGizmoTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Node3DGizmoTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Node3DGizmoTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Node3DGizmoTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Node3DGizmoTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Node3DGizmoTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DGizmoTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Node3DGizmoTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Node3DGizmoTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Node3DGizmoTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DGizmoTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Node3DGizmoTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DGizmoTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Node3DGizmoTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DGizmoTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Node3DGizmoTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DGizmoTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Node3DGizmoTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Node3DGizmoTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Node3DGizmoTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Node3DGizmoTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Texture2DTypedArray::Texture2DTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Texture2DTypedArray::~Texture2DTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::constructor(){
    Texture2DTypedArray class_ = Texture2DTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Texture2DTypedArray>(class_);
  }

  Texture2DTypedArray Texture2DTypedArray::new_static(GDExtensionObjectPtr owner){
    Texture2DTypedArray obj = Texture2DTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Texture2DTypedArray::set_gdowner_Texture2DTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Texture2DTypedArray::Texture2DTypedArray(const Texture2DTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Texture2DTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Texture2DTypedArray& Texture2DTypedArray::operator=(const Texture2DTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Texture2DTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Texture2DTypedArray Texture2DTypedArray::new0(){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new0(){
    auto _class = Texture2DTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new1(Array& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Texture2DTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Texture2DTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new3(PackedByteArray& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Texture2DTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new4(PackedInt32Array& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Texture2DTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new5(PackedInt64Array& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Texture2DTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new6(PackedFloat32Array& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Texture2DTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new7(PackedFloat64Array& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Texture2DTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new8(PackedStringArray& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Texture2DTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new9(PackedVector2Array& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Texture2DTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new10(PackedVector3Array& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Texture2DTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}
  Texture2DTypedArray Texture2DTypedArray::new11(PackedColorArray& from_){
    Texture2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Texture2DTypedArray> Texture2DTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Texture2DTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Texture2DTypedArray>(_class);
}

  Variant Texture2DTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Texture2DTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Texture2DTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Texture2DTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Texture2DTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Texture2DTypedArray::py_clear(){
    this->clear();

  }


  void Texture2DTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Texture2DTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Texture2DTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Texture2DTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Texture2DTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Texture2DTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Texture2DTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Texture2DTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Texture2DTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Texture2DTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Texture2DTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Texture2DTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Texture2DTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Texture2DTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Texture2DTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Texture2DTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Texture2DTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Texture2DTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Texture2DTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Texture2DTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Texture2DTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Texture2DTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Texture2DTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Texture2DTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Texture2DTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Texture2DTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Texture2DTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Texture2DTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Texture2DTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Texture2DTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Texture2DTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Texture2DTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Texture2DTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Texture2DTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Texture2DTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Texture2DTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Texture2DTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Texture2DTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Texture2DTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Texture2DTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Texture2DTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Texture2DTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Texture2DTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Texture2DTypedArray::py_sort(){
    this->sort();

  }


  void Texture2DTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Texture2DTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Texture2DTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Texture2DTypedArray::py_shuffle(){
    this->shuffle();

  }


  void Texture2DTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Texture2DTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Texture2DTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Texture2DTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Texture2DTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Texture2DTypedArray::py_reverse(){
    this->reverse();

  }


  void Texture2DTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Texture2DTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Texture2DTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Texture2DTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Texture2DTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Texture2DTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Texture2DTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Texture2DTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Texture2DTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Texture2DTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Texture2DTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Texture2DTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Texture2DTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Texture2DTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Texture2DTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Texture2DTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Texture2DTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Texture2DTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Texture2DTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Texture2DTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Texture2DTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Texture2DTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Texture2DTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Texture2DTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Texture2DTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Texture2DTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Texture2DTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Texture2DTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Texture2DTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Texture2DTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Texture2DTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Texture2DTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Texture2DTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Texture2DTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Texture2DTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Texture2DTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Texture2DTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Texture2DTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Texture2DTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Texture2DTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Texture2DTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Texture2DTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Texture2DTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Texture2DTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Texture2DTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Texture2DTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Texture2DTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Texture2DTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Texture2DTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Texture2DTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Texture2DTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void NodeTypedArray::NodeTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  NodeTypedArray::~NodeTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<NodeTypedArray> NodeTypedArray::constructor(){
    NodeTypedArray class_ = NodeTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<NodeTypedArray>(class_);
  }

  NodeTypedArray NodeTypedArray::new_static(GDExtensionObjectPtr owner){
    NodeTypedArray obj = NodeTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void NodeTypedArray::set_gdowner_NodeTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  NodeTypedArray::NodeTypedArray(const NodeTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<NodeTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  NodeTypedArray& NodeTypedArray::operator=(const NodeTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<NodeTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  NodeTypedArray NodeTypedArray::new0(){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new0(){
    auto _class = NodeTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new1(Array& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = NodeTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = NodeTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new3(PackedByteArray& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = NodeTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new4(PackedInt32Array& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = NodeTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new5(PackedInt64Array& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = NodeTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new6(PackedFloat32Array& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = NodeTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new7(PackedFloat64Array& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = NodeTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new8(PackedStringArray& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = NodeTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new9(PackedVector2Array& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = NodeTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new10(PackedVector3Array& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = NodeTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}
  NodeTypedArray NodeTypedArray::new11(PackedColorArray& from_){
    NodeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<NodeTypedArray> NodeTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = NodeTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<NodeTypedArray>(_class);
}

  Variant NodeTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long NodeTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long NodeTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool NodeTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool NodeTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void NodeTypedArray::py_clear(){
    this->clear();

  }


  void NodeTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long NodeTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long NodeTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void NodeTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void NodeTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodeTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodeTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodeTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodeTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodeTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodeTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodeTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void NodeTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long NodeTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long NodeTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long NodeTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long NodeTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void NodeTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void NodeTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodeTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodeTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodeTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void NodeTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* NodeTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodeTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodeTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodeTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodeTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodeTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long NodeTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long NodeTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long NodeTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long NodeTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long NodeTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long NodeTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool NodeTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool NodeTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* NodeTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodeTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodeTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodeTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodeTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodeTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void NodeTypedArray::py_sort(){
    this->sort();

  }


  void NodeTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void NodeTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void NodeTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void NodeTypedArray::py_shuffle(){
    this->shuffle();

  }


  void NodeTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long NodeTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long NodeTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long NodeTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long NodeTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void NodeTypedArray::py_reverse(){
    this->reverse();

  }


  void NodeTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> NodeTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array NodeTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> NodeTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array NodeTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> NodeTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array NodeTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> NodeTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array NodeTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* NodeTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant NodeTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool NodeTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool NodeTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool NodeTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool NodeTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* NodeTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodeTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* NodeTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodeTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool NodeTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool NodeTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool NodeTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool NodeTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long NodeTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long NodeTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> NodeTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName NodeTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* NodeTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant NodeTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void NodeTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void NodeTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool NodeTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool NodeTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool NodeTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool NodeTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool NodeTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodeTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool NodeTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool NodeTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool NodeTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodeTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool NodeTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodeTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool NodeTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodeTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool NodeTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodeTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool NodeTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool NodeTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array NodeTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> NodeTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Transform3DTypedArray::Transform3DTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Transform3DTypedArray::~Transform3DTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::constructor(){
    Transform3DTypedArray class_ = Transform3DTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Transform3DTypedArray>(class_);
  }

  Transform3DTypedArray Transform3DTypedArray::new_static(GDExtensionObjectPtr owner){
    Transform3DTypedArray obj = Transform3DTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Transform3DTypedArray::set_gdowner_Transform3DTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Transform3DTypedArray::Transform3DTypedArray(const Transform3DTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Transform3DTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Transform3DTypedArray& Transform3DTypedArray::operator=(const Transform3DTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Transform3DTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Transform3DTypedArray Transform3DTypedArray::new0(){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new0(){
    auto _class = Transform3DTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new1(Array& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Transform3DTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Transform3DTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new3(PackedByteArray& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Transform3DTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new4(PackedInt32Array& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Transform3DTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new5(PackedInt64Array& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Transform3DTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new6(PackedFloat32Array& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Transform3DTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new7(PackedFloat64Array& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Transform3DTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new8(PackedStringArray& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Transform3DTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new9(PackedVector2Array& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Transform3DTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new10(PackedVector3Array& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Transform3DTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}
  Transform3DTypedArray Transform3DTypedArray::new11(PackedColorArray& from_){
    Transform3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Transform3DTypedArray> Transform3DTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Transform3DTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Transform3DTypedArray>(_class);
}

  Variant Transform3DTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Transform3DTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Transform3DTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Transform3DTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Transform3DTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Transform3DTypedArray::py_clear(){
    this->clear();

  }


  void Transform3DTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Transform3DTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Transform3DTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Transform3DTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Transform3DTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Transform3DTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Transform3DTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Transform3DTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Transform3DTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Transform3DTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Transform3DTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Transform3DTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Transform3DTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Transform3DTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Transform3DTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Transform3DTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Transform3DTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Transform3DTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Transform3DTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Transform3DTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Transform3DTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Transform3DTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Transform3DTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Transform3DTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Transform3DTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Transform3DTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Transform3DTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Transform3DTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Transform3DTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Transform3DTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Transform3DTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Transform3DTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Transform3DTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Transform3DTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Transform3DTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Transform3DTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Transform3DTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Transform3DTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Transform3DTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Transform3DTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Transform3DTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Transform3DTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Transform3DTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Transform3DTypedArray::py_sort(){
    this->sort();

  }


  void Transform3DTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Transform3DTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Transform3DTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Transform3DTypedArray::py_shuffle(){
    this->shuffle();

  }


  void Transform3DTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Transform3DTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Transform3DTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Transform3DTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Transform3DTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Transform3DTypedArray::py_reverse(){
    this->reverse();

  }


  void Transform3DTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Transform3DTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Transform3DTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Transform3DTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Transform3DTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Transform3DTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Transform3DTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Transform3DTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Transform3DTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Transform3DTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Transform3DTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Transform3DTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Transform3DTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Transform3DTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Transform3DTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Transform3DTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Transform3DTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Transform3DTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Transform3DTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Transform3DTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Transform3DTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Transform3DTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Transform3DTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Transform3DTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Transform3DTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Transform3DTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Transform3DTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Transform3DTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Transform3DTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Transform3DTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Transform3DTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Transform3DTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Transform3DTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Transform3DTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Transform3DTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Transform3DTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Transform3DTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Transform3DTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Transform3DTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Transform3DTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Transform3DTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Transform3DTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Transform3DTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Transform3DTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Transform3DTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Transform3DTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Transform3DTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Transform3DTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Transform3DTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Transform3DTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Transform3DTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void RDVertexAttributeTypedArray::RDVertexAttributeTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  RDVertexAttributeTypedArray::~RDVertexAttributeTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::constructor(){
    RDVertexAttributeTypedArray class_ = RDVertexAttributeTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<RDVertexAttributeTypedArray>(class_);
  }

  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new_static(GDExtensionObjectPtr owner){
    RDVertexAttributeTypedArray obj = RDVertexAttributeTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void RDVertexAttributeTypedArray::set_gdowner_RDVertexAttributeTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  RDVertexAttributeTypedArray::RDVertexAttributeTypedArray(const RDVertexAttributeTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDVertexAttributeTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  RDVertexAttributeTypedArray& RDVertexAttributeTypedArray::operator=(const RDVertexAttributeTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDVertexAttributeTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new0(){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new0(){
    auto _class = RDVertexAttributeTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new1(Array& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = RDVertexAttributeTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = RDVertexAttributeTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new3(PackedByteArray& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = RDVertexAttributeTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new4(PackedInt32Array& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = RDVertexAttributeTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new5(PackedInt64Array& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = RDVertexAttributeTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new6(PackedFloat32Array& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = RDVertexAttributeTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new7(PackedFloat64Array& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = RDVertexAttributeTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new8(PackedStringArray& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = RDVertexAttributeTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new9(PackedVector2Array& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = RDVertexAttributeTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new10(PackedVector3Array& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = RDVertexAttributeTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}
  RDVertexAttributeTypedArray RDVertexAttributeTypedArray::new11(PackedColorArray& from_){
    RDVertexAttributeTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDVertexAttributeTypedArray> RDVertexAttributeTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = RDVertexAttributeTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDVertexAttributeTypedArray>(_class);
}

  Variant RDVertexAttributeTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long RDVertexAttributeTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long RDVertexAttributeTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDVertexAttributeTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool RDVertexAttributeTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDVertexAttributeTypedArray::py_clear(){
    this->clear();

  }


  void RDVertexAttributeTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDVertexAttributeTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long RDVertexAttributeTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDVertexAttributeTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void RDVertexAttributeTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDVertexAttributeTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDVertexAttributeTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDVertexAttributeTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDVertexAttributeTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDVertexAttributeTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDVertexAttributeTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDVertexAttributeTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void RDVertexAttributeTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long RDVertexAttributeTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long RDVertexAttributeTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDVertexAttributeTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDVertexAttributeTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void RDVertexAttributeTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void RDVertexAttributeTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDVertexAttributeTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDVertexAttributeTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDVertexAttributeTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDVertexAttributeTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* RDVertexAttributeTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDVertexAttributeTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDVertexAttributeTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long RDVertexAttributeTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDVertexAttributeTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDVertexAttributeTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDVertexAttributeTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDVertexAttributeTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDVertexAttributeTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDVertexAttributeTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool RDVertexAttributeTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDVertexAttributeTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDVertexAttributeTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDVertexAttributeTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void RDVertexAttributeTypedArray::py_sort(){
    this->sort();

  }


  void RDVertexAttributeTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void RDVertexAttributeTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void RDVertexAttributeTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDVertexAttributeTypedArray::py_shuffle(){
    this->shuffle();

  }


  void RDVertexAttributeTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDVertexAttributeTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDVertexAttributeTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDVertexAttributeTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDVertexAttributeTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void RDVertexAttributeTypedArray::py_reverse(){
    this->reverse();

  }


  void RDVertexAttributeTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> RDVertexAttributeTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDVertexAttributeTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDVertexAttributeTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDVertexAttributeTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> RDVertexAttributeTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDVertexAttributeTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDVertexAttributeTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDVertexAttributeTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* RDVertexAttributeTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool RDVertexAttributeTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool RDVertexAttributeTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDVertexAttributeTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool RDVertexAttributeTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDVertexAttributeTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDVertexAttributeTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool RDVertexAttributeTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool RDVertexAttributeTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDVertexAttributeTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool RDVertexAttributeTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDVertexAttributeTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long RDVertexAttributeTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> RDVertexAttributeTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName RDVertexAttributeTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* RDVertexAttributeTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDVertexAttributeTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void RDVertexAttributeTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void RDVertexAttributeTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool RDVertexAttributeTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool RDVertexAttributeTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDVertexAttributeTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool RDVertexAttributeTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool RDVertexAttributeTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDVertexAttributeTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array RDVertexAttributeTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> RDVertexAttributeTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void PackedVector2ArrayTypedArray::PackedVector2ArrayTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  PackedVector2ArrayTypedArray::~PackedVector2ArrayTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::constructor(){
    PackedVector2ArrayTypedArray class_ = PackedVector2ArrayTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<PackedVector2ArrayTypedArray>(class_);
  }

  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new_static(GDExtensionObjectPtr owner){
    PackedVector2ArrayTypedArray obj = PackedVector2ArrayTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void PackedVector2ArrayTypedArray::set_gdowner_PackedVector2ArrayTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  PackedVector2ArrayTypedArray::PackedVector2ArrayTypedArray(const PackedVector2ArrayTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PackedVector2ArrayTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  PackedVector2ArrayTypedArray& PackedVector2ArrayTypedArray::operator=(const PackedVector2ArrayTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PackedVector2ArrayTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new0(){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new0(){
    auto _class = PackedVector2ArrayTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new1(Array& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = PackedVector2ArrayTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = PackedVector2ArrayTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new3(PackedByteArray& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = PackedVector2ArrayTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new4(PackedInt32Array& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = PackedVector2ArrayTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new5(PackedInt64Array& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = PackedVector2ArrayTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new6(PackedFloat32Array& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = PackedVector2ArrayTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new7(PackedFloat64Array& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = PackedVector2ArrayTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new8(PackedStringArray& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = PackedVector2ArrayTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new9(PackedVector2Array& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = PackedVector2ArrayTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new10(PackedVector3Array& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = PackedVector2ArrayTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}
  PackedVector2ArrayTypedArray PackedVector2ArrayTypedArray::new11(PackedColorArray& from_){
    PackedVector2ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedVector2ArrayTypedArray> PackedVector2ArrayTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = PackedVector2ArrayTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedVector2ArrayTypedArray>(_class);
}

  Variant PackedVector2ArrayTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long PackedVector2ArrayTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PackedVector2ArrayTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool PackedVector2ArrayTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PackedVector2ArrayTypedArray::py_clear(){
    this->clear();

  }


  void PackedVector2ArrayTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PackedVector2ArrayTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PackedVector2ArrayTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void PackedVector2ArrayTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedVector2ArrayTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedVector2ArrayTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedVector2ArrayTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedVector2ArrayTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedVector2ArrayTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedVector2ArrayTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedVector2ArrayTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void PackedVector2ArrayTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long PackedVector2ArrayTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PackedVector2ArrayTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void PackedVector2ArrayTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void PackedVector2ArrayTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedVector2ArrayTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedVector2ArrayTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedVector2ArrayTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedVector2ArrayTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* PackedVector2ArrayTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedVector2ArrayTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedVector2ArrayTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long PackedVector2ArrayTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PackedVector2ArrayTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PackedVector2ArrayTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PackedVector2ArrayTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool PackedVector2ArrayTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PackedVector2ArrayTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedVector2ArrayTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedVector2ArrayTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void PackedVector2ArrayTypedArray::py_sort(){
    this->sort();

  }


  void PackedVector2ArrayTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void PackedVector2ArrayTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void PackedVector2ArrayTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedVector2ArrayTypedArray::py_shuffle(){
    this->shuffle();

  }


  void PackedVector2ArrayTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PackedVector2ArrayTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PackedVector2ArrayTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void PackedVector2ArrayTypedArray::py_reverse(){
    this->reverse();

  }


  void PackedVector2ArrayTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> PackedVector2ArrayTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array PackedVector2ArrayTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PackedVector2ArrayTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array PackedVector2ArrayTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> PackedVector2ArrayTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PackedVector2ArrayTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PackedVector2ArrayTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PackedVector2ArrayTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* PackedVector2ArrayTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool PackedVector2ArrayTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool PackedVector2ArrayTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PackedVector2ArrayTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool PackedVector2ArrayTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PackedVector2ArrayTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedVector2ArrayTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool PackedVector2ArrayTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool PackedVector2ArrayTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PackedVector2ArrayTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool PackedVector2ArrayTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PackedVector2ArrayTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long PackedVector2ArrayTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> PackedVector2ArrayTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName PackedVector2ArrayTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* PackedVector2ArrayTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedVector2ArrayTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void PackedVector2ArrayTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void PackedVector2ArrayTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool PackedVector2ArrayTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool PackedVector2ArrayTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PackedVector2ArrayTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedVector2ArrayTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array PackedVector2ArrayTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> PackedVector2ArrayTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void InputEventTypedArray::InputEventTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  InputEventTypedArray::~InputEventTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::constructor(){
    InputEventTypedArray class_ = InputEventTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<InputEventTypedArray>(class_);
  }

  InputEventTypedArray InputEventTypedArray::new_static(GDExtensionObjectPtr owner){
    InputEventTypedArray obj = InputEventTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void InputEventTypedArray::set_gdowner_InputEventTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  InputEventTypedArray::InputEventTypedArray(const InputEventTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<InputEventTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  InputEventTypedArray& InputEventTypedArray::operator=(const InputEventTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<InputEventTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  InputEventTypedArray InputEventTypedArray::new0(){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new0(){
    auto _class = InputEventTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new1(Array& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = InputEventTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = InputEventTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new3(PackedByteArray& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = InputEventTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new4(PackedInt32Array& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = InputEventTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new5(PackedInt64Array& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = InputEventTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new6(PackedFloat32Array& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = InputEventTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new7(PackedFloat64Array& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = InputEventTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new8(PackedStringArray& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = InputEventTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new9(PackedVector2Array& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = InputEventTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new10(PackedVector3Array& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = InputEventTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}
  InputEventTypedArray InputEventTypedArray::new11(PackedColorArray& from_){
    InputEventTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<InputEventTypedArray> InputEventTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = InputEventTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<InputEventTypedArray>(_class);
}

  Variant InputEventTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long InputEventTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long InputEventTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool InputEventTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool InputEventTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void InputEventTypedArray::py_clear(){
    this->clear();

  }


  void InputEventTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long InputEventTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long InputEventTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void InputEventTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void InputEventTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void InputEventTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void InputEventTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void InputEventTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void InputEventTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void InputEventTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void InputEventTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void InputEventTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void InputEventTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long InputEventTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long InputEventTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long InputEventTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long InputEventTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void InputEventTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void InputEventTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void InputEventTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void InputEventTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void InputEventTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void InputEventTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* InputEventTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant InputEventTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* InputEventTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant InputEventTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* InputEventTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant InputEventTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long InputEventTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long InputEventTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long InputEventTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long InputEventTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long InputEventTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long InputEventTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool InputEventTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool InputEventTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* InputEventTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant InputEventTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* InputEventTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant InputEventTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* InputEventTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant InputEventTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void InputEventTypedArray::py_sort(){
    this->sort();

  }


  void InputEventTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void InputEventTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void InputEventTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void InputEventTypedArray::py_shuffle(){
    this->shuffle();

  }


  void InputEventTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long InputEventTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long InputEventTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long InputEventTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long InputEventTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void InputEventTypedArray::py_reverse(){
    this->reverse();

  }


  void InputEventTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> InputEventTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array InputEventTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> InputEventTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array InputEventTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> InputEventTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array InputEventTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> InputEventTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array InputEventTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* InputEventTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant InputEventTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool InputEventTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool InputEventTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool InputEventTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool InputEventTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* InputEventTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant InputEventTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* InputEventTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant InputEventTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool InputEventTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool InputEventTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool InputEventTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool InputEventTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long InputEventTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long InputEventTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> InputEventTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName InputEventTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* InputEventTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant InputEventTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void InputEventTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void InputEventTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool InputEventTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool InputEventTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool InputEventTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool InputEventTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool InputEventTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool InputEventTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool InputEventTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool InputEventTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool InputEventTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool InputEventTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool InputEventTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool InputEventTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool InputEventTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool InputEventTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool InputEventTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool InputEventTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool InputEventTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool InputEventTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array InputEventTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> InputEventTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void ArrayTypedArray::ArrayTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  ArrayTypedArray::~ArrayTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::constructor(){
    ArrayTypedArray class_ = ArrayTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<ArrayTypedArray>(class_);
  }

  ArrayTypedArray ArrayTypedArray::new_static(GDExtensionObjectPtr owner){
    ArrayTypedArray obj = ArrayTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void ArrayTypedArray::set_gdowner_ArrayTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  ArrayTypedArray::ArrayTypedArray(const ArrayTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ArrayTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  ArrayTypedArray& ArrayTypedArray::operator=(const ArrayTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ArrayTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  ArrayTypedArray ArrayTypedArray::new0(){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new0(){
    auto _class = ArrayTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new1(Array& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = ArrayTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = ArrayTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new3(PackedByteArray& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = ArrayTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new4(PackedInt32Array& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = ArrayTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new5(PackedInt64Array& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = ArrayTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new6(PackedFloat32Array& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = ArrayTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new7(PackedFloat64Array& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = ArrayTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new8(PackedStringArray& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = ArrayTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new9(PackedVector2Array& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = ArrayTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new10(PackedVector3Array& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = ArrayTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}
  ArrayTypedArray ArrayTypedArray::new11(PackedColorArray& from_){
    ArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ArrayTypedArray> ArrayTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = ArrayTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ArrayTypedArray>(_class);
}

  Variant ArrayTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long ArrayTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long ArrayTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ArrayTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool ArrayTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ArrayTypedArray::py_clear(){
    this->clear();

  }


  void ArrayTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ArrayTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long ArrayTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ArrayTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void ArrayTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ArrayTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ArrayTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ArrayTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ArrayTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ArrayTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ArrayTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ArrayTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void ArrayTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long ArrayTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long ArrayTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ArrayTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ArrayTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void ArrayTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void ArrayTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ArrayTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ArrayTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ArrayTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ArrayTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* ArrayTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ArrayTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ArrayTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ArrayTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ArrayTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ArrayTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long ArrayTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ArrayTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ArrayTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ArrayTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ArrayTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ArrayTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ArrayTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool ArrayTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ArrayTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ArrayTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ArrayTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ArrayTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ArrayTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ArrayTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void ArrayTypedArray::py_sort(){
    this->sort();

  }


  void ArrayTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void ArrayTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void ArrayTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ArrayTypedArray::py_shuffle(){
    this->shuffle();

  }


  void ArrayTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ArrayTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ArrayTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ArrayTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ArrayTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void ArrayTypedArray::py_reverse(){
    this->reverse();

  }


  void ArrayTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> ArrayTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array ArrayTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ArrayTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array ArrayTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> ArrayTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ArrayTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ArrayTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ArrayTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* ArrayTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant ArrayTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool ArrayTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool ArrayTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ArrayTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool ArrayTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ArrayTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ArrayTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ArrayTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ArrayTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool ArrayTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool ArrayTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ArrayTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool ArrayTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ArrayTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long ArrayTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> ArrayTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName ArrayTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* ArrayTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ArrayTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void ArrayTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void ArrayTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool ArrayTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool ArrayTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ArrayTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ArrayTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool ArrayTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ArrayTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool ArrayTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ArrayTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool ArrayTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ArrayTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool ArrayTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ArrayTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool ArrayTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ArrayTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool ArrayTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ArrayTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool ArrayTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ArrayTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array ArrayTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> ArrayTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFTextureSamplerTypedArray::GLTFTextureSamplerTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFTextureSamplerTypedArray::~GLTFTextureSamplerTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::constructor(){
    GLTFTextureSamplerTypedArray class_ = GLTFTextureSamplerTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFTextureSamplerTypedArray>(class_);
  }

  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFTextureSamplerTypedArray obj = GLTFTextureSamplerTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFTextureSamplerTypedArray::set_gdowner_GLTFTextureSamplerTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFTextureSamplerTypedArray::GLTFTextureSamplerTypedArray(const GLTFTextureSamplerTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFTextureSamplerTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFTextureSamplerTypedArray& GLTFTextureSamplerTypedArray::operator=(const GLTFTextureSamplerTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFTextureSamplerTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new0(){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new0(){
    auto _class = GLTFTextureSamplerTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new1(Array& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFTextureSamplerTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new3(PackedByteArray& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new4(PackedInt32Array& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new5(PackedInt64Array& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new6(PackedFloat32Array& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new7(PackedFloat64Array& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new8(PackedStringArray& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new9(PackedVector2Array& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new10(PackedVector3Array& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}
  GLTFTextureSamplerTypedArray GLTFTextureSamplerTypedArray::new11(PackedColorArray& from_){
    GLTFTextureSamplerTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureSamplerTypedArray> GLTFTextureSamplerTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFTextureSamplerTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureSamplerTypedArray>(_class);
}

  Variant GLTFTextureSamplerTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFTextureSamplerTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFTextureSamplerTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFTextureSamplerTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFTextureSamplerTypedArray::py_clear(){
    this->clear();

  }


  void GLTFTextureSamplerTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFTextureSamplerTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFTextureSamplerTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFTextureSamplerTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureSamplerTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureSamplerTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureSamplerTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureSamplerTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureSamplerTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureSamplerTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureSamplerTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFTextureSamplerTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFTextureSamplerTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFTextureSamplerTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFTextureSamplerTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFTextureSamplerTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureSamplerTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureSamplerTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureSamplerTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureSamplerTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFTextureSamplerTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureSamplerTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureSamplerTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFTextureSamplerTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFTextureSamplerTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFTextureSamplerTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFTextureSamplerTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFTextureSamplerTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFTextureSamplerTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureSamplerTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureSamplerTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFTextureSamplerTypedArray::py_sort(){
    this->sort();

  }


  void GLTFTextureSamplerTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFTextureSamplerTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFTextureSamplerTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureSamplerTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFTextureSamplerTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFTextureSamplerTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFTextureSamplerTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFTextureSamplerTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFTextureSamplerTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFTextureSamplerTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFTextureSamplerTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFTextureSamplerTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFTextureSamplerTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFTextureSamplerTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFTextureSamplerTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFTextureSamplerTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFTextureSamplerTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFTextureSamplerTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFTextureSamplerTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFTextureSamplerTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFTextureSamplerTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFTextureSamplerTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFTextureSamplerTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureSamplerTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFTextureSamplerTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFTextureSamplerTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFTextureSamplerTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFTextureSamplerTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFTextureSamplerTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFTextureSamplerTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFTextureSamplerTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFTextureSamplerTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFTextureSamplerTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureSamplerTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFTextureSamplerTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFTextureSamplerTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFTextureSamplerTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFTextureSamplerTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFTextureSamplerTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureSamplerTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFTextureSamplerTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFTextureSamplerTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void ScriptTypedArray::ScriptTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  ScriptTypedArray::~ScriptTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::constructor(){
    ScriptTypedArray class_ = ScriptTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<ScriptTypedArray>(class_);
  }

  ScriptTypedArray ScriptTypedArray::new_static(GDExtensionObjectPtr owner){
    ScriptTypedArray obj = ScriptTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void ScriptTypedArray::set_gdowner_ScriptTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  ScriptTypedArray::ScriptTypedArray(const ScriptTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ScriptTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  ScriptTypedArray& ScriptTypedArray::operator=(const ScriptTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ScriptTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  ScriptTypedArray ScriptTypedArray::new0(){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new0(){
    auto _class = ScriptTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new1(Array& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = ScriptTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = ScriptTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new3(PackedByteArray& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = ScriptTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new4(PackedInt32Array& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = ScriptTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new5(PackedInt64Array& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = ScriptTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new6(PackedFloat32Array& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = ScriptTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new7(PackedFloat64Array& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = ScriptTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new8(PackedStringArray& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = ScriptTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new9(PackedVector2Array& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = ScriptTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new10(PackedVector3Array& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = ScriptTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}
  ScriptTypedArray ScriptTypedArray::new11(PackedColorArray& from_){
    ScriptTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptTypedArray> ScriptTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = ScriptTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptTypedArray>(_class);
}

  Variant ScriptTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long ScriptTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long ScriptTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ScriptTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool ScriptTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ScriptTypedArray::py_clear(){
    this->clear();

  }


  void ScriptTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ScriptTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long ScriptTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ScriptTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void ScriptTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void ScriptTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long ScriptTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long ScriptTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ScriptTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ScriptTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void ScriptTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void ScriptTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* ScriptTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long ScriptTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ScriptTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ScriptTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ScriptTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ScriptTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ScriptTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ScriptTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool ScriptTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ScriptTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void ScriptTypedArray::py_sort(){
    this->sort();

  }


  void ScriptTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void ScriptTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void ScriptTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptTypedArray::py_shuffle(){
    this->shuffle();

  }


  void ScriptTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ScriptTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ScriptTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ScriptTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ScriptTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void ScriptTypedArray::py_reverse(){
    this->reverse();

  }


  void ScriptTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> ScriptTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array ScriptTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ScriptTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array ScriptTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> ScriptTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ScriptTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ScriptTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ScriptTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* ScriptTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant ScriptTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool ScriptTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool ScriptTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ScriptTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool ScriptTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ScriptTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool ScriptTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool ScriptTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ScriptTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool ScriptTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ScriptTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long ScriptTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> ScriptTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName ScriptTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* ScriptTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void ScriptTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void ScriptTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool ScriptTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool ScriptTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ScriptTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ScriptTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool ScriptTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool ScriptTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ScriptTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool ScriptTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool ScriptTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool ScriptTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool ScriptTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool ScriptTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array ScriptTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> ScriptTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void RDAttachmentFormatTypedArray::RDAttachmentFormatTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  RDAttachmentFormatTypedArray::~RDAttachmentFormatTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::constructor(){
    RDAttachmentFormatTypedArray class_ = RDAttachmentFormatTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<RDAttachmentFormatTypedArray>(class_);
  }

  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new_static(GDExtensionObjectPtr owner){
    RDAttachmentFormatTypedArray obj = RDAttachmentFormatTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void RDAttachmentFormatTypedArray::set_gdowner_RDAttachmentFormatTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  RDAttachmentFormatTypedArray::RDAttachmentFormatTypedArray(const RDAttachmentFormatTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDAttachmentFormatTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  RDAttachmentFormatTypedArray& RDAttachmentFormatTypedArray::operator=(const RDAttachmentFormatTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<RDAttachmentFormatTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new0(){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new0(){
    auto _class = RDAttachmentFormatTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new1(Array& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = RDAttachmentFormatTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = RDAttachmentFormatTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new3(PackedByteArray& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = RDAttachmentFormatTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new4(PackedInt32Array& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = RDAttachmentFormatTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new5(PackedInt64Array& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = RDAttachmentFormatTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new6(PackedFloat32Array& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = RDAttachmentFormatTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new7(PackedFloat64Array& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = RDAttachmentFormatTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new8(PackedStringArray& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = RDAttachmentFormatTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new9(PackedVector2Array& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = RDAttachmentFormatTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new10(PackedVector3Array& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = RDAttachmentFormatTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}
  RDAttachmentFormatTypedArray RDAttachmentFormatTypedArray::new11(PackedColorArray& from_){
    RDAttachmentFormatTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<RDAttachmentFormatTypedArray> RDAttachmentFormatTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = RDAttachmentFormatTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<RDAttachmentFormatTypedArray>(_class);
}

  Variant RDAttachmentFormatTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long RDAttachmentFormatTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDAttachmentFormatTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool RDAttachmentFormatTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDAttachmentFormatTypedArray::py_clear(){
    this->clear();

  }


  void RDAttachmentFormatTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDAttachmentFormatTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void RDAttachmentFormatTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void RDAttachmentFormatTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDAttachmentFormatTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDAttachmentFormatTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDAttachmentFormatTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDAttachmentFormatTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDAttachmentFormatTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDAttachmentFormatTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDAttachmentFormatTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void RDAttachmentFormatTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long RDAttachmentFormatTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDAttachmentFormatTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void RDAttachmentFormatTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void RDAttachmentFormatTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDAttachmentFormatTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDAttachmentFormatTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDAttachmentFormatTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void RDAttachmentFormatTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* RDAttachmentFormatTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDAttachmentFormatTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDAttachmentFormatTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long RDAttachmentFormatTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDAttachmentFormatTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDAttachmentFormatTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDAttachmentFormatTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool RDAttachmentFormatTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDAttachmentFormatTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDAttachmentFormatTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDAttachmentFormatTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void RDAttachmentFormatTypedArray::py_sort(){
    this->sort();

  }


  void RDAttachmentFormatTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void RDAttachmentFormatTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void RDAttachmentFormatTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void RDAttachmentFormatTypedArray::py_shuffle(){
    this->shuffle();

  }


  void RDAttachmentFormatTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long RDAttachmentFormatTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long RDAttachmentFormatTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void RDAttachmentFormatTypedArray::py_reverse(){
    this->reverse();

  }


  void RDAttachmentFormatTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> RDAttachmentFormatTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDAttachmentFormatTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDAttachmentFormatTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array RDAttachmentFormatTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> RDAttachmentFormatTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDAttachmentFormatTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> RDAttachmentFormatTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array RDAttachmentFormatTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* RDAttachmentFormatTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool RDAttachmentFormatTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool RDAttachmentFormatTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool RDAttachmentFormatTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool RDAttachmentFormatTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* RDAttachmentFormatTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* RDAttachmentFormatTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool RDAttachmentFormatTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool RDAttachmentFormatTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDAttachmentFormatTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool RDAttachmentFormatTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long RDAttachmentFormatTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long RDAttachmentFormatTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> RDAttachmentFormatTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName RDAttachmentFormatTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* RDAttachmentFormatTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant RDAttachmentFormatTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void RDAttachmentFormatTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void RDAttachmentFormatTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool RDAttachmentFormatTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool RDAttachmentFormatTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool RDAttachmentFormatTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool RDAttachmentFormatTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array RDAttachmentFormatTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> RDAttachmentFormatTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Area2DTypedArray::Area2DTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Area2DTypedArray::~Area2DTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::constructor(){
    Area2DTypedArray class_ = Area2DTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Area2DTypedArray>(class_);
  }

  Area2DTypedArray Area2DTypedArray::new_static(GDExtensionObjectPtr owner){
    Area2DTypedArray obj = Area2DTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Area2DTypedArray::set_gdowner_Area2DTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Area2DTypedArray::Area2DTypedArray(const Area2DTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Area2DTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Area2DTypedArray& Area2DTypedArray::operator=(const Area2DTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Area2DTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Area2DTypedArray Area2DTypedArray::new0(){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new0(){
    auto _class = Area2DTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new1(Array& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Area2DTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Area2DTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new3(PackedByteArray& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Area2DTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new4(PackedInt32Array& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Area2DTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new5(PackedInt64Array& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Area2DTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new6(PackedFloat32Array& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Area2DTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new7(PackedFloat64Array& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Area2DTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new8(PackedStringArray& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Area2DTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new9(PackedVector2Array& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Area2DTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new10(PackedVector3Array& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Area2DTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}
  Area2DTypedArray Area2DTypedArray::new11(PackedColorArray& from_){
    Area2DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area2DTypedArray> Area2DTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Area2DTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area2DTypedArray>(_class);
}

  Variant Area2DTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Area2DTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Area2DTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Area2DTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Area2DTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Area2DTypedArray::py_clear(){
    this->clear();

  }


  void Area2DTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Area2DTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Area2DTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Area2DTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Area2DTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area2DTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area2DTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area2DTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area2DTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area2DTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area2DTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area2DTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Area2DTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Area2DTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Area2DTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Area2DTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Area2DTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Area2DTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Area2DTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area2DTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area2DTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area2DTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area2DTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Area2DTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area2DTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area2DTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area2DTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area2DTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area2DTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Area2DTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Area2DTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Area2DTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Area2DTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Area2DTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Area2DTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Area2DTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Area2DTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Area2DTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area2DTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area2DTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area2DTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area2DTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area2DTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Area2DTypedArray::py_sort(){
    this->sort();

  }


  void Area2DTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Area2DTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Area2DTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area2DTypedArray::py_shuffle(){
    this->shuffle();

  }


  void Area2DTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Area2DTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Area2DTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Area2DTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Area2DTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Area2DTypedArray::py_reverse(){
    this->reverse();

  }


  void Area2DTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Area2DTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Area2DTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Area2DTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Area2DTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Area2DTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Area2DTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Area2DTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Area2DTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Area2DTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Area2DTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Area2DTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Area2DTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Area2DTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Area2DTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Area2DTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area2DTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area2DTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area2DTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Area2DTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Area2DTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Area2DTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Area2DTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Area2DTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Area2DTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Area2DTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Area2DTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Area2DTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area2DTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Area2DTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Area2DTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Area2DTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Area2DTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Area2DTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Area2DTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Area2DTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area2DTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Area2DTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Area2DTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Area2DTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area2DTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Area2DTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area2DTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Area2DTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area2DTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Area2DTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area2DTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Area2DTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area2DTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Area2DTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Area2DTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void GLTFTextureTypedArray::GLTFTextureTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  GLTFTextureTypedArray::~GLTFTextureTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::constructor(){
    GLTFTextureTypedArray class_ = GLTFTextureTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<GLTFTextureTypedArray>(class_);
  }

  GLTFTextureTypedArray GLTFTextureTypedArray::new_static(GDExtensionObjectPtr owner){
    GLTFTextureTypedArray obj = GLTFTextureTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void GLTFTextureTypedArray::set_gdowner_GLTFTextureTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  GLTFTextureTypedArray::GLTFTextureTypedArray(const GLTFTextureTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFTextureTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  GLTFTextureTypedArray& GLTFTextureTypedArray::operator=(const GLTFTextureTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<GLTFTextureTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  GLTFTextureTypedArray GLTFTextureTypedArray::new0(){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new0(){
    auto _class = GLTFTextureTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new1(Array& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = GLTFTextureTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = GLTFTextureTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new3(PackedByteArray& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = GLTFTextureTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new4(PackedInt32Array& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = GLTFTextureTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new5(PackedInt64Array& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = GLTFTextureTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new6(PackedFloat32Array& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = GLTFTextureTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new7(PackedFloat64Array& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = GLTFTextureTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new8(PackedStringArray& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = GLTFTextureTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new9(PackedVector2Array& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = GLTFTextureTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new10(PackedVector3Array& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = GLTFTextureTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}
  GLTFTextureTypedArray GLTFTextureTypedArray::new11(PackedColorArray& from_){
    GLTFTextureTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<GLTFTextureTypedArray> GLTFTextureTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = GLTFTextureTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<GLTFTextureTypedArray>(_class);
}

  Variant GLTFTextureTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long GLTFTextureTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long GLTFTextureTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFTextureTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool GLTFTextureTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFTextureTypedArray::py_clear(){
    this->clear();

  }


  void GLTFTextureTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFTextureTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long GLTFTextureTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void GLTFTextureTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void GLTFTextureTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void GLTFTextureTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long GLTFTextureTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long GLTFTextureTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFTextureTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFTextureTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void GLTFTextureTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void GLTFTextureTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void GLTFTextureTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* GLTFTextureTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long GLTFTextureTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFTextureTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFTextureTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long GLTFTextureTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFTextureTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFTextureTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFTextureTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool GLTFTextureTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFTextureTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void GLTFTextureTypedArray::py_sort(){
    this->sort();

  }


  void GLTFTextureTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void GLTFTextureTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void GLTFTextureTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void GLTFTextureTypedArray::py_shuffle(){
    this->shuffle();

  }


  void GLTFTextureTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long GLTFTextureTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFTextureTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long GLTFTextureTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long GLTFTextureTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void GLTFTextureTypedArray::py_reverse(){
    this->reverse();

  }


  void GLTFTextureTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> GLTFTextureTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFTextureTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFTextureTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array GLTFTextureTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> GLTFTextureTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFTextureTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> GLTFTextureTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array GLTFTextureTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* GLTFTextureTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant GLTFTextureTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool GLTFTextureTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool GLTFTextureTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool GLTFTextureTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool GLTFTextureTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* GLTFTextureTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* GLTFTextureTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool GLTFTextureTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool GLTFTextureTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFTextureTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool GLTFTextureTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long GLTFTextureTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long GLTFTextureTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> GLTFTextureTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName GLTFTextureTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* GLTFTextureTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant GLTFTextureTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void GLTFTextureTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void GLTFTextureTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool GLTFTextureTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool GLTFTextureTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool GLTFTextureTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFTextureTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool GLTFTextureTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool GLTFTextureTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool GLTFTextureTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool GLTFTextureTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool GLTFTextureTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool GLTFTextureTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool GLTFTextureTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool GLTFTextureTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool GLTFTextureTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array GLTFTextureTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> GLTFTextureTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void ScriptEditorBaseTypedArray::ScriptEditorBaseTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  ScriptEditorBaseTypedArray::~ScriptEditorBaseTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::constructor(){
    ScriptEditorBaseTypedArray class_ = ScriptEditorBaseTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<ScriptEditorBaseTypedArray>(class_);
  }

  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new_static(GDExtensionObjectPtr owner){
    ScriptEditorBaseTypedArray obj = ScriptEditorBaseTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void ScriptEditorBaseTypedArray::set_gdowner_ScriptEditorBaseTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  ScriptEditorBaseTypedArray::ScriptEditorBaseTypedArray(const ScriptEditorBaseTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ScriptEditorBaseTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  ScriptEditorBaseTypedArray& ScriptEditorBaseTypedArray::operator=(const ScriptEditorBaseTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<ScriptEditorBaseTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new0(){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new0(){
    auto _class = ScriptEditorBaseTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new1(Array& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = ScriptEditorBaseTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = ScriptEditorBaseTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new3(PackedByteArray& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = ScriptEditorBaseTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new4(PackedInt32Array& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = ScriptEditorBaseTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new5(PackedInt64Array& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = ScriptEditorBaseTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new6(PackedFloat32Array& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = ScriptEditorBaseTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new7(PackedFloat64Array& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = ScriptEditorBaseTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new8(PackedStringArray& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = ScriptEditorBaseTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new9(PackedVector2Array& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = ScriptEditorBaseTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new10(PackedVector3Array& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = ScriptEditorBaseTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}
  ScriptEditorBaseTypedArray ScriptEditorBaseTypedArray::new11(PackedColorArray& from_){
    ScriptEditorBaseTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<ScriptEditorBaseTypedArray> ScriptEditorBaseTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = ScriptEditorBaseTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<ScriptEditorBaseTypedArray>(_class);
}

  Variant ScriptEditorBaseTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long ScriptEditorBaseTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ScriptEditorBaseTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool ScriptEditorBaseTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ScriptEditorBaseTypedArray::py_clear(){
    this->clear();

  }


  void ScriptEditorBaseTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ScriptEditorBaseTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void ScriptEditorBaseTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void ScriptEditorBaseTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptEditorBaseTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptEditorBaseTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptEditorBaseTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptEditorBaseTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptEditorBaseTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptEditorBaseTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptEditorBaseTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void ScriptEditorBaseTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long ScriptEditorBaseTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ScriptEditorBaseTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void ScriptEditorBaseTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void ScriptEditorBaseTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptEditorBaseTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptEditorBaseTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptEditorBaseTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void ScriptEditorBaseTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* ScriptEditorBaseTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptEditorBaseTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptEditorBaseTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long ScriptEditorBaseTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ScriptEditorBaseTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ScriptEditorBaseTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ScriptEditorBaseTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool ScriptEditorBaseTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ScriptEditorBaseTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptEditorBaseTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptEditorBaseTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void ScriptEditorBaseTypedArray::py_sort(){
    this->sort();

  }


  void ScriptEditorBaseTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void ScriptEditorBaseTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void ScriptEditorBaseTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void ScriptEditorBaseTypedArray::py_shuffle(){
    this->shuffle();

  }


  void ScriptEditorBaseTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long ScriptEditorBaseTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long ScriptEditorBaseTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void ScriptEditorBaseTypedArray::py_reverse(){
    this->reverse();

  }


  void ScriptEditorBaseTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> ScriptEditorBaseTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array ScriptEditorBaseTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ScriptEditorBaseTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array ScriptEditorBaseTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> ScriptEditorBaseTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ScriptEditorBaseTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> ScriptEditorBaseTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array ScriptEditorBaseTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* ScriptEditorBaseTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool ScriptEditorBaseTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool ScriptEditorBaseTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool ScriptEditorBaseTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool ScriptEditorBaseTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* ScriptEditorBaseTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* ScriptEditorBaseTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool ScriptEditorBaseTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool ScriptEditorBaseTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ScriptEditorBaseTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool ScriptEditorBaseTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long ScriptEditorBaseTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long ScriptEditorBaseTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> ScriptEditorBaseTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName ScriptEditorBaseTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* ScriptEditorBaseTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant ScriptEditorBaseTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void ScriptEditorBaseTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void ScriptEditorBaseTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool ScriptEditorBaseTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool ScriptEditorBaseTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool ScriptEditorBaseTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool ScriptEditorBaseTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array ScriptEditorBaseTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> ScriptEditorBaseTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Area3DTypedArray::Area3DTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Area3DTypedArray::~Area3DTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::constructor(){
    Area3DTypedArray class_ = Area3DTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Area3DTypedArray>(class_);
  }

  Area3DTypedArray Area3DTypedArray::new_static(GDExtensionObjectPtr owner){
    Area3DTypedArray obj = Area3DTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Area3DTypedArray::set_gdowner_Area3DTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Area3DTypedArray::Area3DTypedArray(const Area3DTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Area3DTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Area3DTypedArray& Area3DTypedArray::operator=(const Area3DTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Area3DTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Area3DTypedArray Area3DTypedArray::new0(){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new0(){
    auto _class = Area3DTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new1(Array& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Area3DTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Area3DTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new3(PackedByteArray& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Area3DTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new4(PackedInt32Array& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Area3DTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new5(PackedInt64Array& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Area3DTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new6(PackedFloat32Array& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Area3DTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new7(PackedFloat64Array& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Area3DTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new8(PackedStringArray& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Area3DTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new9(PackedVector2Array& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Area3DTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new10(PackedVector3Array& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Area3DTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}
  Area3DTypedArray Area3DTypedArray::new11(PackedColorArray& from_){
    Area3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Area3DTypedArray> Area3DTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Area3DTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Area3DTypedArray>(_class);
}

  Variant Area3DTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Area3DTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Area3DTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Area3DTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Area3DTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Area3DTypedArray::py_clear(){
    this->clear();

  }


  void Area3DTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Area3DTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Area3DTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Area3DTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Area3DTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area3DTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area3DTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area3DTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area3DTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area3DTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area3DTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area3DTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Area3DTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Area3DTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Area3DTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Area3DTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Area3DTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Area3DTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Area3DTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area3DTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area3DTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area3DTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Area3DTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Area3DTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area3DTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area3DTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area3DTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area3DTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area3DTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Area3DTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Area3DTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Area3DTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Area3DTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Area3DTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Area3DTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Area3DTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Area3DTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Area3DTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area3DTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area3DTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area3DTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area3DTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area3DTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Area3DTypedArray::py_sort(){
    this->sort();

  }


  void Area3DTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Area3DTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Area3DTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Area3DTypedArray::py_shuffle(){
    this->shuffle();

  }


  void Area3DTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Area3DTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Area3DTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Area3DTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Area3DTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Area3DTypedArray::py_reverse(){
    this->reverse();

  }


  void Area3DTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Area3DTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Area3DTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Area3DTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Area3DTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Area3DTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Area3DTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Area3DTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Area3DTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Area3DTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Area3DTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Area3DTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Area3DTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Area3DTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Area3DTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Area3DTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area3DTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Area3DTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area3DTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Area3DTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Area3DTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Area3DTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Area3DTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Area3DTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Area3DTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Area3DTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Area3DTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Area3DTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Area3DTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Area3DTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Area3DTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Area3DTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Area3DTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Area3DTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Area3DTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Area3DTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area3DTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Area3DTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Area3DTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Area3DTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area3DTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Area3DTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area3DTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Area3DTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area3DTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Area3DTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area3DTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Area3DTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Area3DTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Area3DTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Area3DTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void PhysicsBody3DTypedArray::PhysicsBody3DTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  PhysicsBody3DTypedArray::~PhysicsBody3DTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::constructor(){
    PhysicsBody3DTypedArray class_ = PhysicsBody3DTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<PhysicsBody3DTypedArray>(class_);
  }

  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new_static(GDExtensionObjectPtr owner){
    PhysicsBody3DTypedArray obj = PhysicsBody3DTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void PhysicsBody3DTypedArray::set_gdowner_PhysicsBody3DTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  PhysicsBody3DTypedArray::PhysicsBody3DTypedArray(const PhysicsBody3DTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PhysicsBody3DTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  PhysicsBody3DTypedArray& PhysicsBody3DTypedArray::operator=(const PhysicsBody3DTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PhysicsBody3DTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new0(){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new0(){
    auto _class = PhysicsBody3DTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new1(Array& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = PhysicsBody3DTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = PhysicsBody3DTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new3(PackedByteArray& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = PhysicsBody3DTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new4(PackedInt32Array& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = PhysicsBody3DTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new5(PackedInt64Array& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = PhysicsBody3DTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new6(PackedFloat32Array& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = PhysicsBody3DTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new7(PackedFloat64Array& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = PhysicsBody3DTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new8(PackedStringArray& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = PhysicsBody3DTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new9(PackedVector2Array& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = PhysicsBody3DTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new10(PackedVector3Array& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = PhysicsBody3DTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}
  PhysicsBody3DTypedArray PhysicsBody3DTypedArray::new11(PackedColorArray& from_){
    PhysicsBody3DTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PhysicsBody3DTypedArray> PhysicsBody3DTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = PhysicsBody3DTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PhysicsBody3DTypedArray>(_class);
}

  Variant PhysicsBody3DTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long PhysicsBody3DTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long PhysicsBody3DTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PhysicsBody3DTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool PhysicsBody3DTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PhysicsBody3DTypedArray::py_clear(){
    this->clear();

  }


  void PhysicsBody3DTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PhysicsBody3DTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long PhysicsBody3DTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PhysicsBody3DTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void PhysicsBody3DTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody3DTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody3DTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody3DTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody3DTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody3DTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody3DTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody3DTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void PhysicsBody3DTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long PhysicsBody3DTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long PhysicsBody3DTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PhysicsBody3DTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PhysicsBody3DTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void PhysicsBody3DTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void PhysicsBody3DTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody3DTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody3DTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody3DTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PhysicsBody3DTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* PhysicsBody3DTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody3DTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody3DTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long PhysicsBody3DTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PhysicsBody3DTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PhysicsBody3DTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PhysicsBody3DTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PhysicsBody3DTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PhysicsBody3DTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PhysicsBody3DTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool PhysicsBody3DTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PhysicsBody3DTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody3DTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody3DTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void PhysicsBody3DTypedArray::py_sort(){
    this->sort();

  }


  void PhysicsBody3DTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void PhysicsBody3DTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void PhysicsBody3DTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PhysicsBody3DTypedArray::py_shuffle(){
    this->shuffle();

  }


  void PhysicsBody3DTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PhysicsBody3DTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PhysicsBody3DTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PhysicsBody3DTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PhysicsBody3DTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void PhysicsBody3DTypedArray::py_reverse(){
    this->reverse();

  }


  void PhysicsBody3DTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> PhysicsBody3DTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array PhysicsBody3DTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PhysicsBody3DTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array PhysicsBody3DTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> PhysicsBody3DTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PhysicsBody3DTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PhysicsBody3DTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PhysicsBody3DTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* PhysicsBody3DTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool PhysicsBody3DTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool PhysicsBody3DTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PhysicsBody3DTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool PhysicsBody3DTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PhysicsBody3DTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PhysicsBody3DTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool PhysicsBody3DTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool PhysicsBody3DTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PhysicsBody3DTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool PhysicsBody3DTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PhysicsBody3DTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long PhysicsBody3DTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> PhysicsBody3DTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName PhysicsBody3DTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* PhysicsBody3DTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PhysicsBody3DTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void PhysicsBody3DTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void PhysicsBody3DTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool PhysicsBody3DTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool PhysicsBody3DTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PhysicsBody3DTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool PhysicsBody3DTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool PhysicsBody3DTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PhysicsBody3DTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array PhysicsBody3DTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> PhysicsBody3DTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void PackedByteArrayTypedArray::PackedByteArrayTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  PackedByteArrayTypedArray::~PackedByteArrayTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::constructor(){
    PackedByteArrayTypedArray class_ = PackedByteArrayTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<PackedByteArrayTypedArray>(class_);
  }

  PackedByteArrayTypedArray PackedByteArrayTypedArray::new_static(GDExtensionObjectPtr owner){
    PackedByteArrayTypedArray obj = PackedByteArrayTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void PackedByteArrayTypedArray::set_gdowner_PackedByteArrayTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  PackedByteArrayTypedArray::PackedByteArrayTypedArray(const PackedByteArrayTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PackedByteArrayTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  PackedByteArrayTypedArray& PackedByteArrayTypedArray::operator=(const PackedByteArrayTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<PackedByteArrayTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new0(){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new0(){
    auto _class = PackedByteArrayTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new1(Array& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = PackedByteArrayTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = PackedByteArrayTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new3(PackedByteArray& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = PackedByteArrayTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new4(PackedInt32Array& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = PackedByteArrayTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new5(PackedInt64Array& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = PackedByteArrayTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new6(PackedFloat32Array& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = PackedByteArrayTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new7(PackedFloat64Array& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = PackedByteArrayTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new8(PackedStringArray& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = PackedByteArrayTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new9(PackedVector2Array& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = PackedByteArrayTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new10(PackedVector3Array& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = PackedByteArrayTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}
  PackedByteArrayTypedArray PackedByteArrayTypedArray::new11(PackedColorArray& from_){
    PackedByteArrayTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<PackedByteArrayTypedArray> PackedByteArrayTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = PackedByteArrayTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<PackedByteArrayTypedArray>(_class);
}

  Variant PackedByteArrayTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long PackedByteArrayTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long PackedByteArrayTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PackedByteArrayTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool PackedByteArrayTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PackedByteArrayTypedArray::py_clear(){
    this->clear();

  }


  void PackedByteArrayTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PackedByteArrayTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long PackedByteArrayTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void PackedByteArrayTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void PackedByteArrayTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedByteArrayTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedByteArrayTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedByteArrayTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedByteArrayTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedByteArrayTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedByteArrayTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedByteArrayTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void PackedByteArrayTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long PackedByteArrayTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long PackedByteArrayTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PackedByteArrayTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PackedByteArrayTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void PackedByteArrayTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void PackedByteArrayTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedByteArrayTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedByteArrayTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedByteArrayTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void PackedByteArrayTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* PackedByteArrayTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedByteArrayTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedByteArrayTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long PackedByteArrayTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PackedByteArrayTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PackedByteArrayTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long PackedByteArrayTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PackedByteArrayTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PackedByteArrayTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PackedByteArrayTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool PackedByteArrayTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PackedByteArrayTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedByteArrayTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedByteArrayTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void PackedByteArrayTypedArray::py_sort(){
    this->sort();

  }


  void PackedByteArrayTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void PackedByteArrayTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void PackedByteArrayTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void PackedByteArrayTypedArray::py_shuffle(){
    this->shuffle();

  }


  void PackedByteArrayTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long PackedByteArrayTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PackedByteArrayTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long PackedByteArrayTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long PackedByteArrayTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void PackedByteArrayTypedArray::py_reverse(){
    this->reverse();

  }


  void PackedByteArrayTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> PackedByteArrayTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array PackedByteArrayTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PackedByteArrayTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array PackedByteArrayTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> PackedByteArrayTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PackedByteArrayTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> PackedByteArrayTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array PackedByteArrayTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* PackedByteArrayTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool PackedByteArrayTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool PackedByteArrayTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool PackedByteArrayTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool PackedByteArrayTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* PackedByteArrayTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* PackedByteArrayTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool PackedByteArrayTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool PackedByteArrayTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PackedByteArrayTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool PackedByteArrayTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long PackedByteArrayTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long PackedByteArrayTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> PackedByteArrayTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName PackedByteArrayTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* PackedByteArrayTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant PackedByteArrayTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void PackedByteArrayTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void PackedByteArrayTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool PackedByteArrayTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool PackedByteArrayTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool PackedByteArrayTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PackedByteArrayTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool PackedByteArrayTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedByteArrayTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool PackedByteArrayTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool PackedByteArrayTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool PackedByteArrayTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedByteArrayTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool PackedByteArrayTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedByteArrayTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool PackedByteArrayTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedByteArrayTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool PackedByteArrayTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedByteArrayTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool PackedByteArrayTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool PackedByteArrayTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array PackedByteArrayTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> PackedByteArrayTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void MeshTypedArray::MeshTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  MeshTypedArray::~MeshTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<MeshTypedArray> MeshTypedArray::constructor(){
    MeshTypedArray class_ = MeshTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<MeshTypedArray>(class_);
  }

  MeshTypedArray MeshTypedArray::new_static(GDExtensionObjectPtr owner){
    MeshTypedArray obj = MeshTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void MeshTypedArray::set_gdowner_MeshTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  MeshTypedArray::MeshTypedArray(const MeshTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<MeshTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  MeshTypedArray& MeshTypedArray::operator=(const MeshTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<MeshTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  MeshTypedArray MeshTypedArray::new0(){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new0(){
    auto _class = MeshTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new1(Array& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = MeshTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = MeshTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new3(PackedByteArray& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = MeshTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new4(PackedInt32Array& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = MeshTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new5(PackedInt64Array& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = MeshTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new6(PackedFloat32Array& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = MeshTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new7(PackedFloat64Array& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = MeshTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new8(PackedStringArray& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = MeshTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new9(PackedVector2Array& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = MeshTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new10(PackedVector3Array& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = MeshTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}
  MeshTypedArray MeshTypedArray::new11(PackedColorArray& from_){
    MeshTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<MeshTypedArray> MeshTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = MeshTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<MeshTypedArray>(_class);
}

  Variant MeshTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long MeshTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long MeshTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool MeshTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool MeshTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void MeshTypedArray::py_clear(){
    this->clear();

  }


  void MeshTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long MeshTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long MeshTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void MeshTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void MeshTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MeshTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MeshTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MeshTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MeshTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MeshTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MeshTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MeshTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void MeshTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long MeshTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long MeshTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long MeshTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long MeshTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void MeshTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void MeshTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MeshTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MeshTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MeshTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void MeshTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* MeshTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MeshTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MeshTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MeshTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MeshTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MeshTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long MeshTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long MeshTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long MeshTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long MeshTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long MeshTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long MeshTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool MeshTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool MeshTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* MeshTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MeshTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MeshTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MeshTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MeshTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MeshTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void MeshTypedArray::py_sort(){
    this->sort();

  }


  void MeshTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void MeshTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void MeshTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void MeshTypedArray::py_shuffle(){
    this->shuffle();

  }


  void MeshTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long MeshTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long MeshTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long MeshTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long MeshTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void MeshTypedArray::py_reverse(){
    this->reverse();

  }


  void MeshTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> MeshTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array MeshTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> MeshTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array MeshTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> MeshTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array MeshTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> MeshTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array MeshTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* MeshTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant MeshTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool MeshTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool MeshTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool MeshTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool MeshTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* MeshTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MeshTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* MeshTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MeshTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool MeshTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool MeshTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool MeshTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool MeshTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long MeshTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long MeshTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> MeshTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName MeshTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* MeshTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant MeshTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void MeshTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void MeshTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool MeshTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool MeshTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool MeshTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool MeshTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool MeshTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MeshTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool MeshTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool MeshTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool MeshTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MeshTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool MeshTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MeshTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool MeshTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MeshTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool MeshTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MeshTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool MeshTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool MeshTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array MeshTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> MeshTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void CameraFeedTypedArray::CameraFeedTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  CameraFeedTypedArray::~CameraFeedTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::constructor(){
    CameraFeedTypedArray class_ = CameraFeedTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<CameraFeedTypedArray>(class_);
  }

  CameraFeedTypedArray CameraFeedTypedArray::new_static(GDExtensionObjectPtr owner){
    CameraFeedTypedArray obj = CameraFeedTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void CameraFeedTypedArray::set_gdowner_CameraFeedTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  CameraFeedTypedArray::CameraFeedTypedArray(const CameraFeedTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<CameraFeedTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  CameraFeedTypedArray& CameraFeedTypedArray::operator=(const CameraFeedTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<CameraFeedTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  CameraFeedTypedArray CameraFeedTypedArray::new0(){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new0(){
    auto _class = CameraFeedTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new1(Array& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = CameraFeedTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = CameraFeedTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new3(PackedByteArray& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = CameraFeedTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new4(PackedInt32Array& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = CameraFeedTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new5(PackedInt64Array& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = CameraFeedTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new6(PackedFloat32Array& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = CameraFeedTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new7(PackedFloat64Array& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = CameraFeedTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new8(PackedStringArray& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = CameraFeedTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new9(PackedVector2Array& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = CameraFeedTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new10(PackedVector3Array& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = CameraFeedTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}
  CameraFeedTypedArray CameraFeedTypedArray::new11(PackedColorArray& from_){
    CameraFeedTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<CameraFeedTypedArray> CameraFeedTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = CameraFeedTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<CameraFeedTypedArray>(_class);
}

  Variant CameraFeedTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long CameraFeedTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long CameraFeedTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool CameraFeedTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool CameraFeedTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void CameraFeedTypedArray::py_clear(){
    this->clear();

  }


  void CameraFeedTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long CameraFeedTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long CameraFeedTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void CameraFeedTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void CameraFeedTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void CameraFeedTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void CameraFeedTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void CameraFeedTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void CameraFeedTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void CameraFeedTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void CameraFeedTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void CameraFeedTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void CameraFeedTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long CameraFeedTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long CameraFeedTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long CameraFeedTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long CameraFeedTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void CameraFeedTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void CameraFeedTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void CameraFeedTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void CameraFeedTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void CameraFeedTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void CameraFeedTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* CameraFeedTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant CameraFeedTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* CameraFeedTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant CameraFeedTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* CameraFeedTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant CameraFeedTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long CameraFeedTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long CameraFeedTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long CameraFeedTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long CameraFeedTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long CameraFeedTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long CameraFeedTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool CameraFeedTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool CameraFeedTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* CameraFeedTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant CameraFeedTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* CameraFeedTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant CameraFeedTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* CameraFeedTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant CameraFeedTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void CameraFeedTypedArray::py_sort(){
    this->sort();

  }


  void CameraFeedTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void CameraFeedTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void CameraFeedTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void CameraFeedTypedArray::py_shuffle(){
    this->shuffle();

  }


  void CameraFeedTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long CameraFeedTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long CameraFeedTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long CameraFeedTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long CameraFeedTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void CameraFeedTypedArray::py_reverse(){
    this->reverse();

  }


  void CameraFeedTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> CameraFeedTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array CameraFeedTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> CameraFeedTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array CameraFeedTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> CameraFeedTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array CameraFeedTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> CameraFeedTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array CameraFeedTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* CameraFeedTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant CameraFeedTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool CameraFeedTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool CameraFeedTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool CameraFeedTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool CameraFeedTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* CameraFeedTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant CameraFeedTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* CameraFeedTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant CameraFeedTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool CameraFeedTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool CameraFeedTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool CameraFeedTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool CameraFeedTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long CameraFeedTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long CameraFeedTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> CameraFeedTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName CameraFeedTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* CameraFeedTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant CameraFeedTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void CameraFeedTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void CameraFeedTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool CameraFeedTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool CameraFeedTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool CameraFeedTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool CameraFeedTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool CameraFeedTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool CameraFeedTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool CameraFeedTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool CameraFeedTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool CameraFeedTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool CameraFeedTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool CameraFeedTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool CameraFeedTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool CameraFeedTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool CameraFeedTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool CameraFeedTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool CameraFeedTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool CameraFeedTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool CameraFeedTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array CameraFeedTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> CameraFeedTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void Rect2TypedArray::Rect2TypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  Rect2TypedArray::~Rect2TypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::constructor(){
    Rect2TypedArray class_ = Rect2TypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<Rect2TypedArray>(class_);
  }

  Rect2TypedArray Rect2TypedArray::new_static(GDExtensionObjectPtr owner){
    Rect2TypedArray obj = Rect2TypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void Rect2TypedArray::set_gdowner_Rect2TypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  Rect2TypedArray::Rect2TypedArray(const Rect2TypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Rect2TypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  Rect2TypedArray& Rect2TypedArray::operator=(const Rect2TypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<Rect2TypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  Rect2TypedArray Rect2TypedArray::new0(){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new0(){
    auto _class = Rect2TypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new1(Array& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = Rect2TypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = Rect2TypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new3(PackedByteArray& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = Rect2TypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new4(PackedInt32Array& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = Rect2TypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new5(PackedInt64Array& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = Rect2TypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new6(PackedFloat32Array& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = Rect2TypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new7(PackedFloat64Array& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = Rect2TypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new8(PackedStringArray& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = Rect2TypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new9(PackedVector2Array& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = Rect2TypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new10(PackedVector3Array& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = Rect2TypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}
  Rect2TypedArray Rect2TypedArray::new11(PackedColorArray& from_){
    Rect2TypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<Rect2TypedArray> Rect2TypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = Rect2TypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<Rect2TypedArray>(_class);
}

  Variant Rect2TypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long Rect2TypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long Rect2TypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Rect2TypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool Rect2TypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Rect2TypedArray::py_clear(){
    this->clear();

  }


  void Rect2TypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Rect2TypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long Rect2TypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void Rect2TypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void Rect2TypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Rect2TypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Rect2TypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Rect2TypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Rect2TypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Rect2TypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Rect2TypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Rect2TypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void Rect2TypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long Rect2TypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long Rect2TypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Rect2TypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Rect2TypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void Rect2TypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void Rect2TypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Rect2TypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Rect2TypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Rect2TypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void Rect2TypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* Rect2TypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Rect2TypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Rect2TypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Rect2TypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Rect2TypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Rect2TypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long Rect2TypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Rect2TypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Rect2TypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long Rect2TypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Rect2TypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Rect2TypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Rect2TypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool Rect2TypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Rect2TypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Rect2TypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Rect2TypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Rect2TypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Rect2TypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Rect2TypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void Rect2TypedArray::py_sort(){
    this->sort();

  }


  void Rect2TypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void Rect2TypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void Rect2TypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void Rect2TypedArray::py_shuffle(){
    this->shuffle();

  }


  void Rect2TypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long Rect2TypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Rect2TypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long Rect2TypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long Rect2TypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void Rect2TypedArray::py_reverse(){
    this->reverse();

  }


  void Rect2TypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> Rect2TypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array Rect2TypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Rect2TypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array Rect2TypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> Rect2TypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Rect2TypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> Rect2TypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array Rect2TypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* Rect2TypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant Rect2TypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool Rect2TypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool Rect2TypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool Rect2TypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool Rect2TypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* Rect2TypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Rect2TypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* Rect2TypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Rect2TypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool Rect2TypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool Rect2TypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Rect2TypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool Rect2TypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long Rect2TypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long Rect2TypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> Rect2TypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName Rect2TypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* Rect2TypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant Rect2TypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void Rect2TypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void Rect2TypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool Rect2TypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool Rect2TypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool Rect2TypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Rect2TypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool Rect2TypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Rect2TypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool Rect2TypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool Rect2TypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool Rect2TypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Rect2TypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool Rect2TypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Rect2TypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool Rect2TypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Rect2TypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool Rect2TypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Rect2TypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool Rect2TypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool Rect2TypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array Rect2TypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> Rect2TypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }


  void StringNameTypedArray::StringNameTypedArray_py_destroy(){
    auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    if (destructor){destructor(&godot_owner);}
  }
  StringNameTypedArray::~StringNameTypedArray(){
    if(_callback != nullptr){
      delete _callback;
    }
    if(shouldBeDeleted && godot_owner != nullptr){
      auto destructor = functions::get_variant_get_ptr_destructor()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
      if(destructor == nullptr) return;
      destructor(&godot_owner);
    }
  }
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::constructor(){
    StringNameTypedArray class_ = StringNameTypedArray();
    StringName class_name =  c_string_to_string_name("Array");
    class_name.shouldBeDeleted = true;
    class_.set_godot_owner(functions::get_classdb_construct_object()(&class_name.godot_owner));
    return std::make_shared<StringNameTypedArray>(class_);
  }

  StringNameTypedArray StringNameTypedArray::new_static(GDExtensionObjectPtr owner){
    StringNameTypedArray obj = StringNameTypedArray();
    obj.godot_owner = owner;
    obj.shouldBeDeleted = false;
    return obj;
}
  void StringNameTypedArray::set_gdowner_StringNameTypedArray(GDExtensionObjectPtr owner){
    godot_owner = owner;
}
  StringNameTypedArray::StringNameTypedArray(const StringNameTypedArray& copy_val){

    this->shouldBeDeleted = true;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<StringNameTypedArray&>(copy_val).godot_owner;
    godot_owner = (void*)(&data);
    allocated_memory = true;
    constructor(&godot_owner,_args);
  }

  StringNameTypedArray& StringNameTypedArray::operator=(const StringNameTypedArray& copy_val){

    this->shouldBeDeleted = copy_val.shouldBeDeleted;
    this->_callback = nullptr;
    this->set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(this->variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &const_cast<StringNameTypedArray&>(copy_val).godot_owner;
    godot_owner = &data;
    constructor(&godot_owner,_args);
    return *this;  }
  StringNameTypedArray StringNameTypedArray::new0(){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 0);
    GDExtensionTypePtr _args[1];

    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new0(){
    auto _class = StringNameTypedArray::new0();
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new1(Array& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 1);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new1(std::shared_ptr<Array>& from_){
    auto _class = StringNameTypedArray::new1(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new2(Array& base, long long type, StringName& class_name, Variant& script){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 2);
    GDExtensionTypePtr _args[4];
    _args[0] = &base.godot_owner;
    _args[1] = &type;
    _args[2] = &class_name.godot_owner;
    _args[3] = script.get_native_ptr();


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new2(std::shared_ptr<Array>& base, long long type, std::shared_ptr<StringName>& class_name, Variant& script){
    auto _class = StringNameTypedArray::new2(*(base), type, *(class_name), script);
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new3(PackedByteArray& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 3);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new3(std::shared_ptr<PackedByteArray>& from_){
    auto _class = StringNameTypedArray::new3(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new4(PackedInt32Array& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 4);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new4(std::shared_ptr<PackedInt32Array>& from_){
    auto _class = StringNameTypedArray::new4(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new5(PackedInt64Array& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 5);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new5(std::shared_ptr<PackedInt64Array>& from_){
    auto _class = StringNameTypedArray::new5(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new6(PackedFloat32Array& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 6);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new6(std::shared_ptr<PackedFloat32Array>& from_){
    auto _class = StringNameTypedArray::new6(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new7(PackedFloat64Array& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 7);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new7(std::shared_ptr<PackedFloat64Array>& from_){
    auto _class = StringNameTypedArray::new7(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new8(PackedStringArray& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 8);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new8(std::shared_ptr<PackedStringArray>& from_){
    auto _class = StringNameTypedArray::new8(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new9(PackedVector2Array& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 9);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new9(std::shared_ptr<PackedVector2Array>& from_){
    auto _class = StringNameTypedArray::new9(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new10(PackedVector3Array& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 10);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new10(std::shared_ptr<PackedVector3Array>& from_){
    auto _class = StringNameTypedArray::new10(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}
  StringNameTypedArray StringNameTypedArray::new11(PackedColorArray& from_){
    StringNameTypedArray _class{};
    _class.shouldBeDeleted = true;
    _class.set_variant_type(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    GDExtensionPtrConstructor constructor = functions::get_variant_get_ptr_constructor()(_class.variant_type, 11);
    GDExtensionTypePtr _args[1];
    _args[0] = &from_.godot_owner;


    _class.allocated_memory = true;
    constructor(&_class.godot_owner,_args);
    return _class;
}
  std::shared_ptr<StringNameTypedArray> StringNameTypedArray::py_new11(std::shared_ptr<PackedColorArray>& from_){
    auto _class = StringNameTypedArray::new11(*(from_));
    _class.shouldBeDeleted = false;
    return std::make_shared<StringNameTypedArray>(_class);
}

  Variant StringNameTypedArray::operator[](int index){
    return Variant::new_static(functions::get_array_operator_index()(&godot_owner, index));  }

  long long StringNameTypedArray::py_size(){
    auto _ret = this->size();


    return _ret;
  }


  long long StringNameTypedArray::size(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("size");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool StringNameTypedArray::py_is_empty(){
    auto _ret = this->is_empty();


    return _ret;
  }


  bool StringNameTypedArray::is_empty(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_empty");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void StringNameTypedArray::py_clear(){
    this->clear();

  }


  void StringNameTypedArray::clear(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("clear");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long StringNameTypedArray::py_hash(){
    auto _ret = this->hash();


    return _ret;
  }


  long long StringNameTypedArray::hash(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("hash");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  void StringNameTypedArray::py_assign( std::shared_ptr<Array> array){
    this->assign( *(array));

  }


  void StringNameTypedArray::assign( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("assign");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringNameTypedArray::py_push_back( Variant value){
    this->push_back( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringNameTypedArray::push_back( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringNameTypedArray::py_push_front( Variant value){
    this->push_front( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringNameTypedArray::push_front( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("push_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringNameTypedArray::py_append( Variant value){
    this->append( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringNameTypedArray::append( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringNameTypedArray::py_append_array( std::shared_ptr<Array> array){
    this->append_array( *(array));

  }


  void StringNameTypedArray::append_array( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("append_array");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2307260970);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  long long StringNameTypedArray::py_resize( long long size){
    auto _ret = this->resize( size);


    return _ret;
  }


  long long StringNameTypedArray::resize( long long size){

    GDExtensionTypePtr _args[1];
    _args[0] = &size;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("resize");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 848867239);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long StringNameTypedArray::py_insert( long long position, Variant value){
    auto _ret = this->insert( position, value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long StringNameTypedArray::insert( long long position, Variant& value){

    GDExtensionTypePtr _args[2];
    _args[0] = &position;
    _args[1] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("insert");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3176316662);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  void StringNameTypedArray::py_remove_at( long long position){
    this->remove_at( position);

  }


  void StringNameTypedArray::remove_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("remove_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2823966027);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringNameTypedArray::py_fill( Variant value){
    this->fill( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringNameTypedArray::fill( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("fill");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringNameTypedArray::py_erase( Variant value){
    this->erase( value);
    functions::get_variant_destroy()(&value.native_ptr);

  }


  void StringNameTypedArray::erase( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("erase");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3316032543);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  PyObject* StringNameTypedArray::py_front(){
    auto _ret = this->front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringNameTypedArray::front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringNameTypedArray::py_back(){
    auto _ret = this->back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringNameTypedArray::back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringNameTypedArray::py_pick_random(){
    auto _ret = this->pick_random().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringNameTypedArray::pick_random(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pick_random");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  long long StringNameTypedArray::py_find( Variant what, long long from_){
    auto _ret = this->find( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long StringNameTypedArray::find( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("find");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long StringNameTypedArray::py_rfind( Variant what, long long from_){
    auto _ret = this->rfind( what, from_);
    functions::get_variant_destroy()(&what.native_ptr);


    return _ret;
  }


  long long StringNameTypedArray::rfind( Variant& what, long long from_){

    GDExtensionTypePtr _args[2];
    _args[0] = &what.native_ptr;
    _args[1] = &from_;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("rfind");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2336346817);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long StringNameTypedArray::py_count( Variant value){
    auto _ret = this->count( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long StringNameTypedArray::count( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("count");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1481661226);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool StringNameTypedArray::py_has( Variant value){
    auto _ret = this->has( value);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  bool StringNameTypedArray::has( Variant& value){

    GDExtensionTypePtr _args[1];
    _args[0] = &value.native_ptr;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("has");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3680194679);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* StringNameTypedArray::py_pop_back(){
    auto _ret = this->pop_back().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringNameTypedArray::pop_back(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_back");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringNameTypedArray::py_pop_front(){
    auto _ret = this->pop_front().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringNameTypedArray::pop_front(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_front");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1321915136);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringNameTypedArray::py_pop_at( long long position){
    auto _ret = this->pop_at( position).get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringNameTypedArray::pop_at( long long position){

    GDExtensionTypePtr _args[1];
    _args[0] = &position;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("pop_at");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3518259424);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 1);


    return _ret;
}

  void StringNameTypedArray::py_sort(){
    this->sort();

  }


  void StringNameTypedArray::sort(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  void StringNameTypedArray::py_sort_custom( std::shared_ptr<Callable> func){
    this->sort_custom( *(func));

  }


  void StringNameTypedArray::sort_custom( Callable& func){

    GDExtensionTypePtr _args[1];
    _args[0] = &func.godot_owner;

    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("sort_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3470848906);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);

}

  void StringNameTypedArray::py_shuffle(){
    this->shuffle();

  }


  void StringNameTypedArray::shuffle(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("shuffle");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  long long StringNameTypedArray::py_bsearch( Variant value, bool before){
    auto _ret = this->bsearch( value, before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long StringNameTypedArray::bsearch( Variant& value, bool before){

    GDExtensionTypePtr _args[2];
    _args[0] = &value.native_ptr;
    _args[1] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3372222236);


    method_to_call(&godot_owner, &_args[0], &_ret, 2);


    return _ret;
}

  long long StringNameTypedArray::py_bsearch_custom( Variant value, std::shared_ptr<Callable> func, bool before){
    auto _ret = this->bsearch_custom( value, *(func), before);
    functions::get_variant_destroy()(&value.native_ptr);


    return _ret;
  }


  long long StringNameTypedArray::bsearch_custom( Variant& value, Callable& func, bool before){

    GDExtensionTypePtr _args[3];
    _args[0] = &value.native_ptr;
    _args[1] = &func.godot_owner;
    _args[2] = &before;

    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("bsearch_custom");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 161317131);


    method_to_call(&godot_owner, &_args[0], &_ret, 3);


    return _ret;
}

  void StringNameTypedArray::py_reverse(){
    this->reverse();

  }


  void StringNameTypedArray::reverse(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reverse");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  std::shared_ptr<Array> StringNameTypedArray::py_duplicate( bool deep){
    auto _ret = this->duplicate( deep);


    return std::make_shared<Array>(_ret);
  }


  Array StringNameTypedArray::duplicate( bool deep){

    GDExtensionTypePtr _args[1];
    _args[0] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("duplicate");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 636440122);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> StringNameTypedArray::py_slice( long long begin, long long end, long long step, bool deep){
    auto _ret = this->slice( begin, end, step, deep);


    return std::make_shared<Array>(_ret);
  }


  Array StringNameTypedArray::slice( long long begin, long long end, long long step, bool deep){

    GDExtensionTypePtr _args[4];
    _args[0] = &begin;
    _args[1] = &end;
    _args[2] = &step;
    _args[3] = &deep;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("slice");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1393718243);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 4);


    return _ret;
}

  std::shared_ptr<Array> StringNameTypedArray::py_filter( std::shared_ptr<Callable> method){
    auto _ret = this->filter( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array StringNameTypedArray::filter( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("filter");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  std::shared_ptr<Array> StringNameTypedArray::py_map( std::shared_ptr<Callable> method){
    auto _ret = this->map( *(method));


    return std::make_shared<Array>(_ret);
  }


  Array StringNameTypedArray::map( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    Array _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("map");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4075186556);


    method_to_call(&godot_owner, &_args[0], &(_ret.godot_owner), 1);


    return _ret;
}

  PyObject* StringNameTypedArray::py_reduce( std::shared_ptr<Callable> method, Variant accum){
    auto _ret = this->reduce( *(method), accum).get_converted_value_native_ptr(true);
    functions::get_variant_destroy()(&accum.native_ptr);


    return _ret;
  }


  Variant StringNameTypedArray::reduce( Callable& method, Variant& accum){

    GDExtensionTypePtr _args[2];
    _args[0] = &method.godot_owner;
    _args[1] = &accum.native_ptr;

    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("reduce");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4272450342);


    method_to_call(&godot_owner, &_args[0], &(_ret.native_ptr), 2);


    return _ret;
}

  bool StringNameTypedArray::py_any( std::shared_ptr<Callable> method){
    auto _ret = this->any( *(method));


    return _ret;
  }


  bool StringNameTypedArray::any( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("any");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  bool StringNameTypedArray::py_all( std::shared_ptr<Callable> method){
    auto _ret = this->all( *(method));


    return _ret;
  }


  bool StringNameTypedArray::all( Callable& method){

    GDExtensionTypePtr _args[1];
    _args[0] = &method.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("all");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 4129521963);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  PyObject* StringNameTypedArray::py_max(){
    auto _ret = this->max().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringNameTypedArray::max(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("max");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  PyObject* StringNameTypedArray::py_min(){
    auto _ret = this->min().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringNameTypedArray::min(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("min");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  bool StringNameTypedArray::py_is_typed(){
    auto _ret = this->is_typed();


    return _ret;
  }


  bool StringNameTypedArray::is_typed(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool StringNameTypedArray::py_is_same_typed( std::shared_ptr<Array> array){
    auto _ret = this->is_same_typed( *(array));


    return _ret;
  }


  bool StringNameTypedArray::is_same_typed( Array& array){

    GDExtensionTypePtr _args[1];
    _args[0] = &array.godot_owner;

    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_same_typed");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 2988181878);


    method_to_call(&godot_owner, &_args[0], &_ret, 1);


    return _ret;
}

  long long StringNameTypedArray::py_get_typed_builtin(){
    auto _ret = this->get_typed_builtin();


    return _ret;
  }


  long long StringNameTypedArray::get_typed_builtin(){

    GDExtensionVariantPtr _args[1];
    long long _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_builtin");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3173160232);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  std::shared_ptr<StringName> StringNameTypedArray::py_get_typed_class_name(){
    auto _ret = this->get_typed_class_name();


    return std::make_shared<StringName>(_ret);
  }


  StringName StringNameTypedArray::get_typed_class_name(){

    GDExtensionVariantPtr _args[1];
    StringName _ret{};

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_class_name");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1825232092);


    method_to_call(&godot_owner, NULL, &(_ret.godot_owner), 0);


    return _ret;
}

  PyObject* StringNameTypedArray::py_get_typed_script(){
    auto _ret = this->get_typed_script().get_converted_value_native_ptr(true);


    return _ret;
  }


  Variant StringNameTypedArray::get_typed_script(){

    GDExtensionVariantPtr _args[1];
    Variant _ret = Variant(1);

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("get_typed_script");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 1460142086);


    method_to_call(&godot_owner, NULL, &(_ret.native_ptr), 0);


    return _ret;
}

  void StringNameTypedArray::py_make_read_only(){
    this->make_read_only();

  }


  void StringNameTypedArray::make_read_only(){

    GDExtensionVariantPtr _args[1];
    GDExtensionTypePtr _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("make_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3218959716);


    method_to_call(&godot_owner, NULL, &_ret, 0);

}

  bool StringNameTypedArray::py_is_read_only(){
    auto _ret = this->is_read_only();


    return _ret;
  }


  bool StringNameTypedArray::is_read_only(){

    GDExtensionVariantPtr _args[1];
    bool _ret;

    StringName _class_name = c_string_to_string_name("Array");
    _class_name.shouldBeDeleted = true;

    StringName _method_name = c_string_to_string_name("is_read_only");
    _method_name.shouldBeDeleted = true;


    GDExtensionPtrBuiltInMethod method_to_call = functions::get_variant_get_ptr_builtin_method()(GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, &_method_name.godot_owner, 3918633141);


    method_to_call(&godot_owner, NULL, &_ret, 0);


    return _ret;
}

  bool StringNameTypedArray::operator ==(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool StringNameTypedArray::py_operator_equals(Variant& other){
    auto _ret = *this == other;
    return _ret;
  }
  bool StringNameTypedArray::operator ==(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringNameTypedArray::py_operator_equals(std::shared_ptr<Array>& other){
    auto _ret = *this == *(other);
    return _ret;
  }
  bool StringNameTypedArray::operator !=(Variant& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_NIL);
    operator_evaluator(&godot_owner, NULL, &_ret);
    return _ret;
  }
  bool StringNameTypedArray::py_operator_unequals(Variant& other){
    auto _ret = *this != other;
    return _ret;
  }
  bool StringNameTypedArray::operator !=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringNameTypedArray::py_operator_unequals(std::shared_ptr<Array>& other){
    auto _ret = *this != *(other);
    return _ret;
  }
  bool StringNameTypedArray::operator <(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringNameTypedArray::py_operator_lower_than(std::shared_ptr<Array>& other){
    auto _ret = *this < *(other);
    return _ret;
  }
  bool StringNameTypedArray::operator <=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringNameTypedArray::py_operator_lower_equals(std::shared_ptr<Array>& other){
    auto _ret = *this <= *(other);
    return _ret;
  }
  bool StringNameTypedArray::operator >(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringNameTypedArray::py_operator_greater_than(std::shared_ptr<Array>& other){
    auto _ret = *this > *(other);
    return _ret;
  }
  bool StringNameTypedArray::operator >=(Array& other){
    bool _ret = false;

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &_ret);
    return _ret;
  }
  bool StringNameTypedArray::py_operator_greater_euqals(std::shared_ptr<Array>& other){
    auto _ret = *this >= *(other);
    return _ret;
  }
  Array StringNameTypedArray::operator +(Array& other){
    Array _ret = Array::new0();

    GDExtensionPtrOperatorEvaluator operator_evaluator;

    operator_evaluator =     functions::get_variant_get_ptr_operator_evaluator()(GDExtensionVariantOperator::GDEXTENSION_VARIANT_OP_ADD, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY, GDExtensionVariantType::GDEXTENSION_VARIANT_TYPE_ARRAY);
    operator_evaluator(&godot_owner, &other.godot_owner, &(_ret.godot_owner));
    return _ret;
  }
  std::shared_ptr<Array> StringNameTypedArray::py_operator_add(std::shared_ptr<Array>& other){
    auto _ret = *this + *(other);
    return std::make_shared<Array>(_ret);
  }

