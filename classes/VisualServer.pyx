
##################################Import gdnative api#########################################
from enum import *
from utils.Wrapper cimport *
from classes.Reference cimport Reference
from core.node_path.NodePath cimport NodePath
from core.string.String cimport String
from core.variant.Variant cimport Variant
from core.array.Array cimport Array
from core.color.Color cimport Color
from core.plane.Plane cimport Plane
from core.basis.Basis cimport Basis
from core.aabb.AABB cimport AABB
from core.dictionary.Dictionary cimport Dictionary
from core.pool_array.PoolArrays cimport *
from core.quat.Quat cimport Quat
from core.rect2.Rect2 cimport Rect2
from core.rid.RID cimport RID
from core.transform.Transform cimport Transform
from core.transform.Transform2D cimport Transform2D
from core.vector2.Vector2 cimport Vector2
from core.vector3.Vector3 cimport Vector3
from core.variant.Variant cimport Variant_Type
from core.variant.Variant cimport Variant_Operator
from core.vector3.Vector3 cimport Vector3_Axis
from core.color.Color cimport Color
from cython.operator cimport dereference
from godot_api.binding_external cimport *
cimport classes.Object
cimport classes.Image
cimport classes.Image
cimport classes.Image
cimport classes.Image
cimport classes.Image
cimport classes.Object 

##################################Generated method bindings#########################################
cdef godot_method_bind *bind
cdef godot_method_bind *bind_visualserver_black_bars_set_images
cdef godot_method_bind *bind_visualserver_black_bars_set_margins
cdef godot_method_bind *bind_visualserver_camera_create
cdef godot_method_bind *bind_visualserver_camera_set_cull_mask
cdef godot_method_bind *bind_visualserver_camera_set_environment
cdef godot_method_bind *bind_visualserver_camera_set_frustum
cdef godot_method_bind *bind_visualserver_camera_set_orthogonal
cdef godot_method_bind *bind_visualserver_camera_set_perspective
cdef godot_method_bind *bind_visualserver_camera_set_transform
cdef godot_method_bind *bind_visualserver_camera_set_use_vertical_aspect
cdef godot_method_bind *bind_visualserver_canvas_create
cdef godot_method_bind *bind_visualserver_canvas_item_add_circle
cdef godot_method_bind *bind_visualserver_canvas_item_add_clip_ignore
cdef godot_method_bind *bind_visualserver_canvas_item_add_line
cdef godot_method_bind *bind_visualserver_canvas_item_add_mesh
cdef godot_method_bind *bind_visualserver_canvas_item_add_multimesh
cdef godot_method_bind *bind_visualserver_canvas_item_add_nine_patch
cdef godot_method_bind *bind_visualserver_canvas_item_add_particles
cdef godot_method_bind *bind_visualserver_canvas_item_add_polygon
cdef godot_method_bind *bind_visualserver_canvas_item_add_polyline
cdef godot_method_bind *bind_visualserver_canvas_item_add_primitive
cdef godot_method_bind *bind_visualserver_canvas_item_add_rect
cdef godot_method_bind *bind_visualserver_canvas_item_add_set_transform
cdef godot_method_bind *bind_visualserver_canvas_item_add_texture_rect
cdef godot_method_bind *bind_visualserver_canvas_item_add_texture_rect_region
cdef godot_method_bind *bind_visualserver_canvas_item_add_triangle_array
cdef godot_method_bind *bind_visualserver_canvas_item_clear
cdef godot_method_bind *bind_visualserver_canvas_item_create
cdef godot_method_bind *bind_visualserver_canvas_item_set_clip
cdef godot_method_bind *bind_visualserver_canvas_item_set_copy_to_backbuffer
cdef godot_method_bind *bind_visualserver_canvas_item_set_custom_rect
cdef godot_method_bind *bind_visualserver_canvas_item_set_distance_field_mode
cdef godot_method_bind *bind_visualserver_canvas_item_set_draw_behind_parent
cdef godot_method_bind *bind_visualserver_canvas_item_set_draw_index
cdef godot_method_bind *bind_visualserver_canvas_item_set_light_mask
cdef godot_method_bind *bind_visualserver_canvas_item_set_material
cdef godot_method_bind *bind_visualserver_canvas_item_set_modulate
cdef godot_method_bind *bind_visualserver_canvas_item_set_parent
cdef godot_method_bind *bind_visualserver_canvas_item_set_self_modulate
cdef godot_method_bind *bind_visualserver_canvas_item_set_sort_children_by_y
cdef godot_method_bind *bind_visualserver_canvas_item_set_transform
cdef godot_method_bind *bind_visualserver_canvas_item_set_use_parent_material
cdef godot_method_bind *bind_visualserver_canvas_item_set_visible
cdef godot_method_bind *bind_visualserver_canvas_item_set_z_as_relative_to_parent
cdef godot_method_bind *bind_visualserver_canvas_item_set_z_index
cdef godot_method_bind *bind_visualserver_canvas_light_attach_to_canvas
cdef godot_method_bind *bind_visualserver_canvas_light_create
cdef godot_method_bind *bind_visualserver_canvas_light_occluder_attach_to_canvas
cdef godot_method_bind *bind_visualserver_canvas_light_occluder_create
cdef godot_method_bind *bind_visualserver_canvas_light_occluder_set_enabled
cdef godot_method_bind *bind_visualserver_canvas_light_occluder_set_light_mask
cdef godot_method_bind *bind_visualserver_canvas_light_occluder_set_polygon
cdef godot_method_bind *bind_visualserver_canvas_light_occluder_set_transform
cdef godot_method_bind *bind_visualserver_canvas_light_set_color
cdef godot_method_bind *bind_visualserver_canvas_light_set_enabled
cdef godot_method_bind *bind_visualserver_canvas_light_set_energy
cdef godot_method_bind *bind_visualserver_canvas_light_set_height
cdef godot_method_bind *bind_visualserver_canvas_light_set_item_cull_mask
cdef godot_method_bind *bind_visualserver_canvas_light_set_item_shadow_cull_mask
cdef godot_method_bind *bind_visualserver_canvas_light_set_layer_range
cdef godot_method_bind *bind_visualserver_canvas_light_set_mode
cdef godot_method_bind *bind_visualserver_canvas_light_set_scale
cdef godot_method_bind *bind_visualserver_canvas_light_set_shadow_buffer_size
cdef godot_method_bind *bind_visualserver_canvas_light_set_shadow_color
cdef godot_method_bind *bind_visualserver_canvas_light_set_shadow_enabled
cdef godot_method_bind *bind_visualserver_canvas_light_set_shadow_filter
cdef godot_method_bind *bind_visualserver_canvas_light_set_shadow_gradient_length
cdef godot_method_bind *bind_visualserver_canvas_light_set_shadow_smooth
cdef godot_method_bind *bind_visualserver_canvas_light_set_texture
cdef godot_method_bind *bind_visualserver_canvas_light_set_texture_offset
cdef godot_method_bind *bind_visualserver_canvas_light_set_transform
cdef godot_method_bind *bind_visualserver_canvas_light_set_z_range
cdef godot_method_bind *bind_visualserver_canvas_occluder_polygon_create
cdef godot_method_bind *bind_visualserver_canvas_occluder_polygon_set_cull_mode
cdef godot_method_bind *bind_visualserver_canvas_occluder_polygon_set_shape
cdef godot_method_bind *bind_visualserver_canvas_occluder_polygon_set_shape_as_lines
cdef godot_method_bind *bind_visualserver_canvas_set_item_mirroring
cdef godot_method_bind *bind_visualserver_canvas_set_modulate
cdef godot_method_bind *bind_visualserver_directional_light_create
cdef godot_method_bind *bind_visualserver_draw
cdef godot_method_bind *bind_visualserver_environment_create
cdef godot_method_bind *bind_visualserver_environment_set_adjustment
cdef godot_method_bind *bind_visualserver_environment_set_ambient_light
cdef godot_method_bind *bind_visualserver_environment_set_background
cdef godot_method_bind *bind_visualserver_environment_set_bg_color
cdef godot_method_bind *bind_visualserver_environment_set_bg_energy
cdef godot_method_bind *bind_visualserver_environment_set_canvas_max_layer
cdef godot_method_bind *bind_visualserver_environment_set_dof_blur_far
cdef godot_method_bind *bind_visualserver_environment_set_dof_blur_near
cdef godot_method_bind *bind_visualserver_environment_set_fog
cdef godot_method_bind *bind_visualserver_environment_set_fog_depth
cdef godot_method_bind *bind_visualserver_environment_set_fog_height
cdef godot_method_bind *bind_visualserver_environment_set_glow
cdef godot_method_bind *bind_visualserver_environment_set_sky
cdef godot_method_bind *bind_visualserver_environment_set_sky_custom_fov
cdef godot_method_bind *bind_visualserver_environment_set_sky_orientation
cdef godot_method_bind *bind_visualserver_environment_set_ssao
cdef godot_method_bind *bind_visualserver_environment_set_ssr
cdef godot_method_bind *bind_visualserver_environment_set_tonemap
cdef godot_method_bind *bind_visualserver_finish
cdef godot_method_bind *bind_visualserver_force_draw
cdef godot_method_bind *bind_visualserver_force_sync
cdef godot_method_bind *bind_visualserver_free_rid
cdef godot_method_bind *bind_visualserver_get_render_info
cdef godot_method_bind *bind_visualserver_get_test_cube
cdef godot_method_bind *bind_visualserver_get_test_texture
cdef godot_method_bind *bind_visualserver_get_video_adapter_name
cdef godot_method_bind *bind_visualserver_get_video_adapter_vendor
cdef godot_method_bind *bind_visualserver_get_white_texture
cdef godot_method_bind *bind_visualserver_gi_probe_create
cdef godot_method_bind *bind_visualserver_gi_probe_get_bias
cdef godot_method_bind *bind_visualserver_gi_probe_get_bounds
cdef godot_method_bind *bind_visualserver_gi_probe_get_cell_size
cdef godot_method_bind *bind_visualserver_gi_probe_get_dynamic_data
cdef godot_method_bind *bind_visualserver_gi_probe_get_dynamic_range
cdef godot_method_bind *bind_visualserver_gi_probe_get_energy
cdef godot_method_bind *bind_visualserver_gi_probe_get_normal_bias
cdef godot_method_bind *bind_visualserver_gi_probe_get_propagation
cdef godot_method_bind *bind_visualserver_gi_probe_get_to_cell_xform
cdef godot_method_bind *bind_visualserver_gi_probe_is_compressed
cdef godot_method_bind *bind_visualserver_gi_probe_is_interior
cdef godot_method_bind *bind_visualserver_gi_probe_set_bias
cdef godot_method_bind *bind_visualserver_gi_probe_set_bounds
cdef godot_method_bind *bind_visualserver_gi_probe_set_cell_size
cdef godot_method_bind *bind_visualserver_gi_probe_set_compress
cdef godot_method_bind *bind_visualserver_gi_probe_set_dynamic_data
cdef godot_method_bind *bind_visualserver_gi_probe_set_dynamic_range
cdef godot_method_bind *bind_visualserver_gi_probe_set_energy
cdef godot_method_bind *bind_visualserver_gi_probe_set_interior
cdef godot_method_bind *bind_visualserver_gi_probe_set_normal_bias
cdef godot_method_bind *bind_visualserver_gi_probe_set_propagation
cdef godot_method_bind *bind_visualserver_gi_probe_set_to_cell_xform
cdef godot_method_bind *bind_visualserver_has_changed
cdef godot_method_bind *bind_visualserver_has_feature
cdef godot_method_bind *bind_visualserver_has_os_feature
cdef godot_method_bind *bind_visualserver_immediate_begin
cdef godot_method_bind *bind_visualserver_immediate_clear
cdef godot_method_bind *bind_visualserver_immediate_color
cdef godot_method_bind *bind_visualserver_immediate_create
cdef godot_method_bind *bind_visualserver_immediate_end
cdef godot_method_bind *bind_visualserver_immediate_get_material
cdef godot_method_bind *bind_visualserver_immediate_normal
cdef godot_method_bind *bind_visualserver_immediate_set_material
cdef godot_method_bind *bind_visualserver_immediate_tangent
cdef godot_method_bind *bind_visualserver_immediate_uv
cdef godot_method_bind *bind_visualserver_immediate_uv2
cdef godot_method_bind *bind_visualserver_immediate_vertex
cdef godot_method_bind *bind_visualserver_immediate_vertex_2d
cdef godot_method_bind *bind_visualserver_init
cdef godot_method_bind *bind_visualserver_instance_attach_object_instance_id
cdef godot_method_bind *bind_visualserver_instance_attach_skeleton
cdef godot_method_bind *bind_visualserver_instance_create
cdef godot_method_bind *bind_visualserver_instance_create2
cdef godot_method_bind *bind_visualserver_instance_geometry_set_as_instance_lod
cdef godot_method_bind *bind_visualserver_instance_geometry_set_cast_shadows_setting
cdef godot_method_bind *bind_visualserver_instance_geometry_set_draw_range
cdef godot_method_bind *bind_visualserver_instance_geometry_set_flag
cdef godot_method_bind *bind_visualserver_instance_geometry_set_material_override
cdef godot_method_bind *bind_visualserver_instance_set_base
cdef godot_method_bind *bind_visualserver_instance_set_blend_shape_weight
cdef godot_method_bind *bind_visualserver_instance_set_custom_aabb
cdef godot_method_bind *bind_visualserver_instance_set_exterior
cdef godot_method_bind *bind_visualserver_instance_set_extra_visibility_margin
cdef godot_method_bind *bind_visualserver_instance_set_layer_mask
cdef godot_method_bind *bind_visualserver_instance_set_scenario
cdef godot_method_bind *bind_visualserver_instance_set_surface_material
cdef godot_method_bind *bind_visualserver_instance_set_transform
cdef godot_method_bind *bind_visualserver_instance_set_use_lightmap
cdef godot_method_bind *bind_visualserver_instance_set_visible
cdef godot_method_bind *bind_visualserver_instances_cull_aabb
cdef godot_method_bind *bind_visualserver_instances_cull_convex
cdef godot_method_bind *bind_visualserver_instances_cull_ray
cdef godot_method_bind *bind_visualserver_light_directional_set_blend_splits
cdef godot_method_bind *bind_visualserver_light_directional_set_shadow_depth_range_mode
cdef godot_method_bind *bind_visualserver_light_directional_set_shadow_mode
cdef godot_method_bind *bind_visualserver_light_omni_set_shadow_detail
cdef godot_method_bind *bind_visualserver_light_omni_set_shadow_mode
cdef godot_method_bind *bind_visualserver_light_set_color
cdef godot_method_bind *bind_visualserver_light_set_cull_mask
cdef godot_method_bind *bind_visualserver_light_set_negative
cdef godot_method_bind *bind_visualserver_light_set_param
cdef godot_method_bind *bind_visualserver_light_set_projector
cdef godot_method_bind *bind_visualserver_light_set_reverse_cull_face_mode
cdef godot_method_bind *bind_visualserver_light_set_shadow
cdef godot_method_bind *bind_visualserver_light_set_shadow_color
cdef godot_method_bind *bind_visualserver_light_set_use_gi
cdef godot_method_bind *bind_visualserver_lightmap_capture_create
cdef godot_method_bind *bind_visualserver_lightmap_capture_get_bounds
cdef godot_method_bind *bind_visualserver_lightmap_capture_get_energy
cdef godot_method_bind *bind_visualserver_lightmap_capture_get_octree
cdef godot_method_bind *bind_visualserver_lightmap_capture_get_octree_cell_subdiv
cdef godot_method_bind *bind_visualserver_lightmap_capture_get_octree_cell_transform
cdef godot_method_bind *bind_visualserver_lightmap_capture_set_bounds
cdef godot_method_bind *bind_visualserver_lightmap_capture_set_energy
cdef godot_method_bind *bind_visualserver_lightmap_capture_set_octree
cdef godot_method_bind *bind_visualserver_lightmap_capture_set_octree_cell_subdiv
cdef godot_method_bind *bind_visualserver_lightmap_capture_set_octree_cell_transform
cdef godot_method_bind *bind_visualserver_make_sphere_mesh
cdef godot_method_bind *bind_visualserver_material_create
cdef godot_method_bind *bind_visualserver_material_get_param
cdef godot_method_bind *bind_visualserver_material_get_param_default
cdef godot_method_bind *bind_visualserver_material_get_shader
cdef godot_method_bind *bind_visualserver_material_set_line_width
cdef godot_method_bind *bind_visualserver_material_set_next_pass
cdef godot_method_bind *bind_visualserver_material_set_param
cdef godot_method_bind *bind_visualserver_material_set_render_priority
cdef godot_method_bind *bind_visualserver_material_set_shader
cdef godot_method_bind *bind_visualserver_mesh_add_surface_from_arrays
cdef godot_method_bind *bind_visualserver_mesh_clear
cdef godot_method_bind *bind_visualserver_mesh_create
cdef godot_method_bind *bind_visualserver_mesh_get_blend_shape_count
cdef godot_method_bind *bind_visualserver_mesh_get_blend_shape_mode
cdef godot_method_bind *bind_visualserver_mesh_get_custom_aabb
cdef godot_method_bind *bind_visualserver_mesh_get_surface_count
cdef godot_method_bind *bind_visualserver_mesh_remove_surface
cdef godot_method_bind *bind_visualserver_mesh_set_blend_shape_count
cdef godot_method_bind *bind_visualserver_mesh_set_blend_shape_mode
cdef godot_method_bind *bind_visualserver_mesh_set_custom_aabb
cdef godot_method_bind *bind_visualserver_mesh_surface_get_aabb
cdef godot_method_bind *bind_visualserver_mesh_surface_get_array
cdef godot_method_bind *bind_visualserver_mesh_surface_get_array_index_len
cdef godot_method_bind *bind_visualserver_mesh_surface_get_array_len
cdef godot_method_bind *bind_visualserver_mesh_surface_get_arrays
cdef godot_method_bind *bind_visualserver_mesh_surface_get_blend_shape_arrays
cdef godot_method_bind *bind_visualserver_mesh_surface_get_format
cdef godot_method_bind *bind_visualserver_mesh_surface_get_format_offset
cdef godot_method_bind *bind_visualserver_mesh_surface_get_format_stride
cdef godot_method_bind *bind_visualserver_mesh_surface_get_index_array
cdef godot_method_bind *bind_visualserver_mesh_surface_get_material
cdef godot_method_bind *bind_visualserver_mesh_surface_get_primitive_type
cdef godot_method_bind *bind_visualserver_mesh_surface_get_skeleton_aabb
cdef godot_method_bind *bind_visualserver_mesh_surface_set_material
cdef godot_method_bind *bind_visualserver_mesh_surface_update_region
cdef godot_method_bind *bind_visualserver_multimesh_allocate
cdef godot_method_bind *bind_visualserver_multimesh_create
cdef godot_method_bind *bind_visualserver_multimesh_get_aabb
cdef godot_method_bind *bind_visualserver_multimesh_get_instance_count
cdef godot_method_bind *bind_visualserver_multimesh_get_mesh
cdef godot_method_bind *bind_visualserver_multimesh_get_visible_instances
cdef godot_method_bind *bind_visualserver_multimesh_instance_get_color
cdef godot_method_bind *bind_visualserver_multimesh_instance_get_custom_data
cdef godot_method_bind *bind_visualserver_multimesh_instance_get_transform
cdef godot_method_bind *bind_visualserver_multimesh_instance_get_transform_2d
cdef godot_method_bind *bind_visualserver_multimesh_instance_set_color
cdef godot_method_bind *bind_visualserver_multimesh_instance_set_custom_data
cdef godot_method_bind *bind_visualserver_multimesh_instance_set_transform
cdef godot_method_bind *bind_visualserver_multimesh_instance_set_transform_2d
cdef godot_method_bind *bind_visualserver_multimesh_set_as_bulk_array
cdef godot_method_bind *bind_visualserver_multimesh_set_mesh
cdef godot_method_bind *bind_visualserver_multimesh_set_visible_instances
cdef godot_method_bind *bind_visualserver_omni_light_create
cdef godot_method_bind *bind_visualserver_particles_create
cdef godot_method_bind *bind_visualserver_particles_get_current_aabb
cdef godot_method_bind *bind_visualserver_particles_get_emitting
cdef godot_method_bind *bind_visualserver_particles_is_inactive
cdef godot_method_bind *bind_visualserver_particles_request_process
cdef godot_method_bind *bind_visualserver_particles_restart
cdef godot_method_bind *bind_visualserver_particles_set_amount
cdef godot_method_bind *bind_visualserver_particles_set_custom_aabb
cdef godot_method_bind *bind_visualserver_particles_set_draw_order
cdef godot_method_bind *bind_visualserver_particles_set_draw_pass_mesh
cdef godot_method_bind *bind_visualserver_particles_set_draw_passes
cdef godot_method_bind *bind_visualserver_particles_set_emission_transform
cdef godot_method_bind *bind_visualserver_particles_set_emitting
cdef godot_method_bind *bind_visualserver_particles_set_explosiveness_ratio
cdef godot_method_bind *bind_visualserver_particles_set_fixed_fps
cdef godot_method_bind *bind_visualserver_particles_set_fractional_delta
cdef godot_method_bind *bind_visualserver_particles_set_lifetime
cdef godot_method_bind *bind_visualserver_particles_set_one_shot
cdef godot_method_bind *bind_visualserver_particles_set_pre_process_time
cdef godot_method_bind *bind_visualserver_particles_set_process_material
cdef godot_method_bind *bind_visualserver_particles_set_randomness_ratio
cdef godot_method_bind *bind_visualserver_particles_set_speed_scale
cdef godot_method_bind *bind_visualserver_particles_set_use_local_coordinates
cdef godot_method_bind *bind_visualserver_reflection_probe_create
cdef godot_method_bind *bind_visualserver_reflection_probe_set_as_interior
cdef godot_method_bind *bind_visualserver_reflection_probe_set_cull_mask
cdef godot_method_bind *bind_visualserver_reflection_probe_set_enable_box_projection
cdef godot_method_bind *bind_visualserver_reflection_probe_set_enable_shadows
cdef godot_method_bind *bind_visualserver_reflection_probe_set_extents
cdef godot_method_bind *bind_visualserver_reflection_probe_set_intensity
cdef godot_method_bind *bind_visualserver_reflection_probe_set_interior_ambient
cdef godot_method_bind *bind_visualserver_reflection_probe_set_interior_ambient_energy
cdef godot_method_bind *bind_visualserver_reflection_probe_set_interior_ambient_probe_contribution
cdef godot_method_bind *bind_visualserver_reflection_probe_set_max_distance
cdef godot_method_bind *bind_visualserver_reflection_probe_set_origin_offset
cdef godot_method_bind *bind_visualserver_reflection_probe_set_update_mode
cdef godot_method_bind *bind_visualserver_request_frame_drawn_callback
cdef godot_method_bind *bind_visualserver_scenario_create
cdef godot_method_bind *bind_visualserver_scenario_set_debug
cdef godot_method_bind *bind_visualserver_scenario_set_environment
cdef godot_method_bind *bind_visualserver_scenario_set_fallback_environment
cdef godot_method_bind *bind_visualserver_scenario_set_reflection_atlas_size
cdef godot_method_bind *bind_visualserver_set_boot_image
cdef godot_method_bind *bind_visualserver_set_debug_generate_wireframes
cdef godot_method_bind *bind_visualserver_set_default_clear_color
cdef godot_method_bind *bind_visualserver_shader_create
cdef godot_method_bind *bind_visualserver_shader_get_code
cdef godot_method_bind *bind_visualserver_shader_get_default_texture_param
cdef godot_method_bind *bind_visualserver_shader_get_param_list
cdef godot_method_bind *bind_visualserver_shader_set_code
cdef godot_method_bind *bind_visualserver_shader_set_default_texture_param
cdef godot_method_bind *bind_visualserver_skeleton_allocate
cdef godot_method_bind *bind_visualserver_skeleton_bone_get_transform
cdef godot_method_bind *bind_visualserver_skeleton_bone_get_transform_2d
cdef godot_method_bind *bind_visualserver_skeleton_bone_set_transform
cdef godot_method_bind *bind_visualserver_skeleton_bone_set_transform_2d
cdef godot_method_bind *bind_visualserver_skeleton_create
cdef godot_method_bind *bind_visualserver_skeleton_get_bone_count
cdef godot_method_bind *bind_visualserver_sky_create
cdef godot_method_bind *bind_visualserver_sky_set_texture
cdef godot_method_bind *bind_visualserver_spot_light_create
cdef godot_method_bind *bind_visualserver_sync
cdef godot_method_bind *bind_visualserver_texture_allocate
cdef godot_method_bind *bind_visualserver_texture_bind
cdef godot_method_bind *bind_visualserver_texture_create
cdef godot_method_bind *bind_visualserver_texture_create_from_image
cdef godot_method_bind *bind_visualserver_texture_debug_usage
cdef godot_method_bind *bind_visualserver_texture_get_data
cdef godot_method_bind *bind_visualserver_texture_get_depth
cdef godot_method_bind *bind_visualserver_texture_get_flags
cdef godot_method_bind *bind_visualserver_texture_get_format
cdef godot_method_bind *bind_visualserver_texture_get_height
cdef godot_method_bind *bind_visualserver_texture_get_path
cdef godot_method_bind *bind_visualserver_texture_get_texid
cdef godot_method_bind *bind_visualserver_texture_get_type
cdef godot_method_bind *bind_visualserver_texture_get_width
cdef godot_method_bind *bind_visualserver_texture_set_data
cdef godot_method_bind *bind_visualserver_texture_set_data_partial
cdef godot_method_bind *bind_visualserver_texture_set_flags
cdef godot_method_bind *bind_visualserver_texture_set_path
cdef godot_method_bind *bind_visualserver_texture_set_shrink_all_x2_on_set_data
cdef godot_method_bind *bind_visualserver_texture_set_size_override
cdef godot_method_bind *bind_visualserver_textures_keep_original
cdef godot_method_bind *bind_visualserver_viewport_attach_camera
cdef godot_method_bind *bind_visualserver_viewport_attach_canvas
cdef godot_method_bind *bind_visualserver_viewport_attach_to_screen
cdef godot_method_bind *bind_visualserver_viewport_create
cdef godot_method_bind *bind_visualserver_viewport_detach
cdef godot_method_bind *bind_visualserver_viewport_get_render_info
cdef godot_method_bind *bind_visualserver_viewport_get_texture
cdef godot_method_bind *bind_visualserver_viewport_remove_canvas
cdef godot_method_bind *bind_visualserver_viewport_set_active
cdef godot_method_bind *bind_visualserver_viewport_set_canvas_stacking
cdef godot_method_bind *bind_visualserver_viewport_set_canvas_transform
cdef godot_method_bind *bind_visualserver_viewport_set_clear_mode
cdef godot_method_bind *bind_visualserver_viewport_set_debug_draw
cdef godot_method_bind *bind_visualserver_viewport_set_disable_3d
cdef godot_method_bind *bind_visualserver_viewport_set_disable_environment
cdef godot_method_bind *bind_visualserver_viewport_set_global_canvas_transform
cdef godot_method_bind *bind_visualserver_viewport_set_hdr
cdef godot_method_bind *bind_visualserver_viewport_set_hide_canvas
cdef godot_method_bind *bind_visualserver_viewport_set_hide_scenario
cdef godot_method_bind *bind_visualserver_viewport_set_msaa
cdef godot_method_bind *bind_visualserver_viewport_set_parent_viewport
cdef godot_method_bind *bind_visualserver_viewport_set_render_direct_to_screen
cdef godot_method_bind *bind_visualserver_viewport_set_scenario
cdef godot_method_bind *bind_visualserver_viewport_set_shadow_atlas_quadrant_subdivision
cdef godot_method_bind *bind_visualserver_viewport_set_shadow_atlas_size
cdef godot_method_bind *bind_visualserver_viewport_set_size
cdef godot_method_bind *bind_visualserver_viewport_set_transparent_background
cdef godot_method_bind *bind_visualserver_viewport_set_update_mode
cdef godot_method_bind *bind_visualserver_viewport_set_usage
cdef godot_method_bind *bind_visualserver_viewport_set_use_arvr
cdef godot_method_bind *bind_visualserver_viewport_set_vflip
cpdef init_method_bindings():
  bind = api_core.godot_method_bind_get_method("Object", "_get")
  bind_visualserver_black_bars_set_images = api_core.godot_method_bind_get_method('VisualServer', 'black_bars_set_images')
  bind_visualserver_black_bars_set_margins = api_core.godot_method_bind_get_method('VisualServer', 'black_bars_set_margins')
  bind_visualserver_camera_create = api_core.godot_method_bind_get_method('VisualServer', 'camera_create')
  bind_visualserver_camera_set_cull_mask = api_core.godot_method_bind_get_method('VisualServer', 'camera_set_cull_mask')
  bind_visualserver_camera_set_environment = api_core.godot_method_bind_get_method('VisualServer', 'camera_set_environment')
  bind_visualserver_camera_set_frustum = api_core.godot_method_bind_get_method('VisualServer', 'camera_set_frustum')
  bind_visualserver_camera_set_orthogonal = api_core.godot_method_bind_get_method('VisualServer', 'camera_set_orthogonal')
  bind_visualserver_camera_set_perspective = api_core.godot_method_bind_get_method('VisualServer', 'camera_set_perspective')
  bind_visualserver_camera_set_transform = api_core.godot_method_bind_get_method('VisualServer', 'camera_set_transform')
  bind_visualserver_camera_set_use_vertical_aspect = api_core.godot_method_bind_get_method('VisualServer', 'camera_set_use_vertical_aspect')
  bind_visualserver_canvas_create = api_core.godot_method_bind_get_method('VisualServer', 'canvas_create')
  bind_visualserver_canvas_item_add_circle = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_circle')
  bind_visualserver_canvas_item_add_clip_ignore = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_clip_ignore')
  bind_visualserver_canvas_item_add_line = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_line')
  bind_visualserver_canvas_item_add_mesh = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_mesh')
  bind_visualserver_canvas_item_add_multimesh = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_multimesh')
  bind_visualserver_canvas_item_add_nine_patch = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_nine_patch')
  bind_visualserver_canvas_item_add_particles = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_particles')
  bind_visualserver_canvas_item_add_polygon = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_polygon')
  bind_visualserver_canvas_item_add_polyline = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_polyline')
  bind_visualserver_canvas_item_add_primitive = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_primitive')
  bind_visualserver_canvas_item_add_rect = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_rect')
  bind_visualserver_canvas_item_add_set_transform = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_set_transform')
  bind_visualserver_canvas_item_add_texture_rect = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_texture_rect')
  bind_visualserver_canvas_item_add_texture_rect_region = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_texture_rect_region')
  bind_visualserver_canvas_item_add_triangle_array = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_add_triangle_array')
  bind_visualserver_canvas_item_clear = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_clear')
  bind_visualserver_canvas_item_create = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_create')
  bind_visualserver_canvas_item_set_clip = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_clip')
  bind_visualserver_canvas_item_set_copy_to_backbuffer = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_copy_to_backbuffer')
  bind_visualserver_canvas_item_set_custom_rect = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_custom_rect')
  bind_visualserver_canvas_item_set_distance_field_mode = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_distance_field_mode')
  bind_visualserver_canvas_item_set_draw_behind_parent = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_draw_behind_parent')
  bind_visualserver_canvas_item_set_draw_index = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_draw_index')
  bind_visualserver_canvas_item_set_light_mask = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_light_mask')
  bind_visualserver_canvas_item_set_material = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_material')
  bind_visualserver_canvas_item_set_modulate = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_modulate')
  bind_visualserver_canvas_item_set_parent = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_parent')
  bind_visualserver_canvas_item_set_self_modulate = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_self_modulate')
  bind_visualserver_canvas_item_set_sort_children_by_y = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_sort_children_by_y')
  bind_visualserver_canvas_item_set_transform = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_transform')
  bind_visualserver_canvas_item_set_use_parent_material = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_use_parent_material')
  bind_visualserver_canvas_item_set_visible = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_visible')
  bind_visualserver_canvas_item_set_z_as_relative_to_parent = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_z_as_relative_to_parent')
  bind_visualserver_canvas_item_set_z_index = api_core.godot_method_bind_get_method('VisualServer', 'canvas_item_set_z_index')
  bind_visualserver_canvas_light_attach_to_canvas = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_attach_to_canvas')
  bind_visualserver_canvas_light_create = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_create')
  bind_visualserver_canvas_light_occluder_attach_to_canvas = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_occluder_attach_to_canvas')
  bind_visualserver_canvas_light_occluder_create = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_occluder_create')
  bind_visualserver_canvas_light_occluder_set_enabled = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_occluder_set_enabled')
  bind_visualserver_canvas_light_occluder_set_light_mask = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_occluder_set_light_mask')
  bind_visualserver_canvas_light_occluder_set_polygon = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_occluder_set_polygon')
  bind_visualserver_canvas_light_occluder_set_transform = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_occluder_set_transform')
  bind_visualserver_canvas_light_set_color = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_color')
  bind_visualserver_canvas_light_set_enabled = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_enabled')
  bind_visualserver_canvas_light_set_energy = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_energy')
  bind_visualserver_canvas_light_set_height = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_height')
  bind_visualserver_canvas_light_set_item_cull_mask = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_item_cull_mask')
  bind_visualserver_canvas_light_set_item_shadow_cull_mask = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_item_shadow_cull_mask')
  bind_visualserver_canvas_light_set_layer_range = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_layer_range')
  bind_visualserver_canvas_light_set_mode = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_mode')
  bind_visualserver_canvas_light_set_scale = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_scale')
  bind_visualserver_canvas_light_set_shadow_buffer_size = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_shadow_buffer_size')
  bind_visualserver_canvas_light_set_shadow_color = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_shadow_color')
  bind_visualserver_canvas_light_set_shadow_enabled = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_shadow_enabled')
  bind_visualserver_canvas_light_set_shadow_filter = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_shadow_filter')
  bind_visualserver_canvas_light_set_shadow_gradient_length = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_shadow_gradient_length')
  bind_visualserver_canvas_light_set_shadow_smooth = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_shadow_smooth')
  bind_visualserver_canvas_light_set_texture = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_texture')
  bind_visualserver_canvas_light_set_texture_offset = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_texture_offset')
  bind_visualserver_canvas_light_set_transform = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_transform')
  bind_visualserver_canvas_light_set_z_range = api_core.godot_method_bind_get_method('VisualServer', 'canvas_light_set_z_range')
  bind_visualserver_canvas_occluder_polygon_create = api_core.godot_method_bind_get_method('VisualServer', 'canvas_occluder_polygon_create')
  bind_visualserver_canvas_occluder_polygon_set_cull_mode = api_core.godot_method_bind_get_method('VisualServer', 'canvas_occluder_polygon_set_cull_mode')
  bind_visualserver_canvas_occluder_polygon_set_shape = api_core.godot_method_bind_get_method('VisualServer', 'canvas_occluder_polygon_set_shape')
  bind_visualserver_canvas_occluder_polygon_set_shape_as_lines = api_core.godot_method_bind_get_method('VisualServer', 'canvas_occluder_polygon_set_shape_as_lines')
  bind_visualserver_canvas_set_item_mirroring = api_core.godot_method_bind_get_method('VisualServer', 'canvas_set_item_mirroring')
  bind_visualserver_canvas_set_modulate = api_core.godot_method_bind_get_method('VisualServer', 'canvas_set_modulate')
  bind_visualserver_directional_light_create = api_core.godot_method_bind_get_method('VisualServer', 'directional_light_create')
  bind_visualserver_draw = api_core.godot_method_bind_get_method('VisualServer', 'draw')
  bind_visualserver_environment_create = api_core.godot_method_bind_get_method('VisualServer', 'environment_create')
  bind_visualserver_environment_set_adjustment = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_adjustment')
  bind_visualserver_environment_set_ambient_light = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_ambient_light')
  bind_visualserver_environment_set_background = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_background')
  bind_visualserver_environment_set_bg_color = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_bg_color')
  bind_visualserver_environment_set_bg_energy = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_bg_energy')
  bind_visualserver_environment_set_canvas_max_layer = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_canvas_max_layer')
  bind_visualserver_environment_set_dof_blur_far = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_dof_blur_far')
  bind_visualserver_environment_set_dof_blur_near = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_dof_blur_near')
  bind_visualserver_environment_set_fog = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_fog')
  bind_visualserver_environment_set_fog_depth = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_fog_depth')
  bind_visualserver_environment_set_fog_height = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_fog_height')
  bind_visualserver_environment_set_glow = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_glow')
  bind_visualserver_environment_set_sky = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_sky')
  bind_visualserver_environment_set_sky_custom_fov = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_sky_custom_fov')
  bind_visualserver_environment_set_sky_orientation = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_sky_orientation')
  bind_visualserver_environment_set_ssao = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_ssao')
  bind_visualserver_environment_set_ssr = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_ssr')
  bind_visualserver_environment_set_tonemap = api_core.godot_method_bind_get_method('VisualServer', 'environment_set_tonemap')
  bind_visualserver_finish = api_core.godot_method_bind_get_method('VisualServer', 'finish')
  bind_visualserver_force_draw = api_core.godot_method_bind_get_method('VisualServer', 'force_draw')
  bind_visualserver_force_sync = api_core.godot_method_bind_get_method('VisualServer', 'force_sync')
  bind_visualserver_free_rid = api_core.godot_method_bind_get_method('VisualServer', 'free_rid')
  bind_visualserver_get_render_info = api_core.godot_method_bind_get_method('VisualServer', 'get_render_info')
  bind_visualserver_get_test_cube = api_core.godot_method_bind_get_method('VisualServer', 'get_test_cube')
  bind_visualserver_get_test_texture = api_core.godot_method_bind_get_method('VisualServer', 'get_test_texture')
  bind_visualserver_get_video_adapter_name = api_core.godot_method_bind_get_method('VisualServer', 'get_video_adapter_name')
  bind_visualserver_get_video_adapter_vendor = api_core.godot_method_bind_get_method('VisualServer', 'get_video_adapter_vendor')
  bind_visualserver_get_white_texture = api_core.godot_method_bind_get_method('VisualServer', 'get_white_texture')
  bind_visualserver_gi_probe_create = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_create')
  bind_visualserver_gi_probe_get_bias = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_get_bias')
  bind_visualserver_gi_probe_get_bounds = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_get_bounds')
  bind_visualserver_gi_probe_get_cell_size = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_get_cell_size')
  bind_visualserver_gi_probe_get_dynamic_data = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_get_dynamic_data')
  bind_visualserver_gi_probe_get_dynamic_range = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_get_dynamic_range')
  bind_visualserver_gi_probe_get_energy = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_get_energy')
  bind_visualserver_gi_probe_get_normal_bias = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_get_normal_bias')
  bind_visualserver_gi_probe_get_propagation = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_get_propagation')
  bind_visualserver_gi_probe_get_to_cell_xform = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_get_to_cell_xform')
  bind_visualserver_gi_probe_is_compressed = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_is_compressed')
  bind_visualserver_gi_probe_is_interior = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_is_interior')
  bind_visualserver_gi_probe_set_bias = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_bias')
  bind_visualserver_gi_probe_set_bounds = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_bounds')
  bind_visualserver_gi_probe_set_cell_size = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_cell_size')
  bind_visualserver_gi_probe_set_compress = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_compress')
  bind_visualserver_gi_probe_set_dynamic_data = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_dynamic_data')
  bind_visualserver_gi_probe_set_dynamic_range = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_dynamic_range')
  bind_visualserver_gi_probe_set_energy = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_energy')
  bind_visualserver_gi_probe_set_interior = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_interior')
  bind_visualserver_gi_probe_set_normal_bias = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_normal_bias')
  bind_visualserver_gi_probe_set_propagation = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_propagation')
  bind_visualserver_gi_probe_set_to_cell_xform = api_core.godot_method_bind_get_method('VisualServer', 'gi_probe_set_to_cell_xform')
  bind_visualserver_has_changed = api_core.godot_method_bind_get_method('VisualServer', 'has_changed')
  bind_visualserver_has_feature = api_core.godot_method_bind_get_method('VisualServer', 'has_feature')
  bind_visualserver_has_os_feature = api_core.godot_method_bind_get_method('VisualServer', 'has_os_feature')
  bind_visualserver_immediate_begin = api_core.godot_method_bind_get_method('VisualServer', 'immediate_begin')
  bind_visualserver_immediate_clear = api_core.godot_method_bind_get_method('VisualServer', 'immediate_clear')
  bind_visualserver_immediate_color = api_core.godot_method_bind_get_method('VisualServer', 'immediate_color')
  bind_visualserver_immediate_create = api_core.godot_method_bind_get_method('VisualServer', 'immediate_create')
  bind_visualserver_immediate_end = api_core.godot_method_bind_get_method('VisualServer', 'immediate_end')
  bind_visualserver_immediate_get_material = api_core.godot_method_bind_get_method('VisualServer', 'immediate_get_material')
  bind_visualserver_immediate_normal = api_core.godot_method_bind_get_method('VisualServer', 'immediate_normal')
  bind_visualserver_immediate_set_material = api_core.godot_method_bind_get_method('VisualServer', 'immediate_set_material')
  bind_visualserver_immediate_tangent = api_core.godot_method_bind_get_method('VisualServer', 'immediate_tangent')
  bind_visualserver_immediate_uv = api_core.godot_method_bind_get_method('VisualServer', 'immediate_uv')
  bind_visualserver_immediate_uv2 = api_core.godot_method_bind_get_method('VisualServer', 'immediate_uv2')
  bind_visualserver_immediate_vertex = api_core.godot_method_bind_get_method('VisualServer', 'immediate_vertex')
  bind_visualserver_immediate_vertex_2d = api_core.godot_method_bind_get_method('VisualServer', 'immediate_vertex_2d')
  bind_visualserver_init = api_core.godot_method_bind_get_method('VisualServer', 'init')
  bind_visualserver_instance_attach_object_instance_id = api_core.godot_method_bind_get_method('VisualServer', 'instance_attach_object_instance_id')
  bind_visualserver_instance_attach_skeleton = api_core.godot_method_bind_get_method('VisualServer', 'instance_attach_skeleton')
  bind_visualserver_instance_create = api_core.godot_method_bind_get_method('VisualServer', 'instance_create')
  bind_visualserver_instance_create2 = api_core.godot_method_bind_get_method('VisualServer', 'instance_create2')
  bind_visualserver_instance_geometry_set_as_instance_lod = api_core.godot_method_bind_get_method('VisualServer', 'instance_geometry_set_as_instance_lod')
  bind_visualserver_instance_geometry_set_cast_shadows_setting = api_core.godot_method_bind_get_method('VisualServer', 'instance_geometry_set_cast_shadows_setting')
  bind_visualserver_instance_geometry_set_draw_range = api_core.godot_method_bind_get_method('VisualServer', 'instance_geometry_set_draw_range')
  bind_visualserver_instance_geometry_set_flag = api_core.godot_method_bind_get_method('VisualServer', 'instance_geometry_set_flag')
  bind_visualserver_instance_geometry_set_material_override = api_core.godot_method_bind_get_method('VisualServer', 'instance_geometry_set_material_override')
  bind_visualserver_instance_set_base = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_base')
  bind_visualserver_instance_set_blend_shape_weight = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_blend_shape_weight')
  bind_visualserver_instance_set_custom_aabb = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_custom_aabb')
  bind_visualserver_instance_set_exterior = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_exterior')
  bind_visualserver_instance_set_extra_visibility_margin = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_extra_visibility_margin')
  bind_visualserver_instance_set_layer_mask = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_layer_mask')
  bind_visualserver_instance_set_scenario = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_scenario')
  bind_visualserver_instance_set_surface_material = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_surface_material')
  bind_visualserver_instance_set_transform = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_transform')
  bind_visualserver_instance_set_use_lightmap = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_use_lightmap')
  bind_visualserver_instance_set_visible = api_core.godot_method_bind_get_method('VisualServer', 'instance_set_visible')
  bind_visualserver_instances_cull_aabb = api_core.godot_method_bind_get_method('VisualServer', 'instances_cull_aabb')
  bind_visualserver_instances_cull_convex = api_core.godot_method_bind_get_method('VisualServer', 'instances_cull_convex')
  bind_visualserver_instances_cull_ray = api_core.godot_method_bind_get_method('VisualServer', 'instances_cull_ray')
  bind_visualserver_light_directional_set_blend_splits = api_core.godot_method_bind_get_method('VisualServer', 'light_directional_set_blend_splits')
  bind_visualserver_light_directional_set_shadow_depth_range_mode = api_core.godot_method_bind_get_method('VisualServer', 'light_directional_set_shadow_depth_range_mode')
  bind_visualserver_light_directional_set_shadow_mode = api_core.godot_method_bind_get_method('VisualServer', 'light_directional_set_shadow_mode')
  bind_visualserver_light_omni_set_shadow_detail = api_core.godot_method_bind_get_method('VisualServer', 'light_omni_set_shadow_detail')
  bind_visualserver_light_omni_set_shadow_mode = api_core.godot_method_bind_get_method('VisualServer', 'light_omni_set_shadow_mode')
  bind_visualserver_light_set_color = api_core.godot_method_bind_get_method('VisualServer', 'light_set_color')
  bind_visualserver_light_set_cull_mask = api_core.godot_method_bind_get_method('VisualServer', 'light_set_cull_mask')
  bind_visualserver_light_set_negative = api_core.godot_method_bind_get_method('VisualServer', 'light_set_negative')
  bind_visualserver_light_set_param = api_core.godot_method_bind_get_method('VisualServer', 'light_set_param')
  bind_visualserver_light_set_projector = api_core.godot_method_bind_get_method('VisualServer', 'light_set_projector')
  bind_visualserver_light_set_reverse_cull_face_mode = api_core.godot_method_bind_get_method('VisualServer', 'light_set_reverse_cull_face_mode')
  bind_visualserver_light_set_shadow = api_core.godot_method_bind_get_method('VisualServer', 'light_set_shadow')
  bind_visualserver_light_set_shadow_color = api_core.godot_method_bind_get_method('VisualServer', 'light_set_shadow_color')
  bind_visualserver_light_set_use_gi = api_core.godot_method_bind_get_method('VisualServer', 'light_set_use_gi')
  bind_visualserver_lightmap_capture_create = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_create')
  bind_visualserver_lightmap_capture_get_bounds = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_get_bounds')
  bind_visualserver_lightmap_capture_get_energy = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_get_energy')
  bind_visualserver_lightmap_capture_get_octree = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_get_octree')
  bind_visualserver_lightmap_capture_get_octree_cell_subdiv = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_get_octree_cell_subdiv')
  bind_visualserver_lightmap_capture_get_octree_cell_transform = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_get_octree_cell_transform')
  bind_visualserver_lightmap_capture_set_bounds = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_set_bounds')
  bind_visualserver_lightmap_capture_set_energy = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_set_energy')
  bind_visualserver_lightmap_capture_set_octree = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_set_octree')
  bind_visualserver_lightmap_capture_set_octree_cell_subdiv = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_set_octree_cell_subdiv')
  bind_visualserver_lightmap_capture_set_octree_cell_transform = api_core.godot_method_bind_get_method('VisualServer', 'lightmap_capture_set_octree_cell_transform')
  bind_visualserver_make_sphere_mesh = api_core.godot_method_bind_get_method('VisualServer', 'make_sphere_mesh')
  bind_visualserver_material_create = api_core.godot_method_bind_get_method('VisualServer', 'material_create')
  bind_visualserver_material_get_param = api_core.godot_method_bind_get_method('VisualServer', 'material_get_param')
  bind_visualserver_material_get_param_default = api_core.godot_method_bind_get_method('VisualServer', 'material_get_param_default')
  bind_visualserver_material_get_shader = api_core.godot_method_bind_get_method('VisualServer', 'material_get_shader')
  bind_visualserver_material_set_line_width = api_core.godot_method_bind_get_method('VisualServer', 'material_set_line_width')
  bind_visualserver_material_set_next_pass = api_core.godot_method_bind_get_method('VisualServer', 'material_set_next_pass')
  bind_visualserver_material_set_param = api_core.godot_method_bind_get_method('VisualServer', 'material_set_param')
  bind_visualserver_material_set_render_priority = api_core.godot_method_bind_get_method('VisualServer', 'material_set_render_priority')
  bind_visualserver_material_set_shader = api_core.godot_method_bind_get_method('VisualServer', 'material_set_shader')
  bind_visualserver_mesh_add_surface_from_arrays = api_core.godot_method_bind_get_method('VisualServer', 'mesh_add_surface_from_arrays')
  bind_visualserver_mesh_clear = api_core.godot_method_bind_get_method('VisualServer', 'mesh_clear')
  bind_visualserver_mesh_create = api_core.godot_method_bind_get_method('VisualServer', 'mesh_create')
  bind_visualserver_mesh_get_blend_shape_count = api_core.godot_method_bind_get_method('VisualServer', 'mesh_get_blend_shape_count')
  bind_visualserver_mesh_get_blend_shape_mode = api_core.godot_method_bind_get_method('VisualServer', 'mesh_get_blend_shape_mode')
  bind_visualserver_mesh_get_custom_aabb = api_core.godot_method_bind_get_method('VisualServer', 'mesh_get_custom_aabb')
  bind_visualserver_mesh_get_surface_count = api_core.godot_method_bind_get_method('VisualServer', 'mesh_get_surface_count')
  bind_visualserver_mesh_remove_surface = api_core.godot_method_bind_get_method('VisualServer', 'mesh_remove_surface')
  bind_visualserver_mesh_set_blend_shape_count = api_core.godot_method_bind_get_method('VisualServer', 'mesh_set_blend_shape_count')
  bind_visualserver_mesh_set_blend_shape_mode = api_core.godot_method_bind_get_method('VisualServer', 'mesh_set_blend_shape_mode')
  bind_visualserver_mesh_set_custom_aabb = api_core.godot_method_bind_get_method('VisualServer', 'mesh_set_custom_aabb')
  bind_visualserver_mesh_surface_get_aabb = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_aabb')
  bind_visualserver_mesh_surface_get_array = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_array')
  bind_visualserver_mesh_surface_get_array_index_len = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_array_index_len')
  bind_visualserver_mesh_surface_get_array_len = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_array_len')
  bind_visualserver_mesh_surface_get_arrays = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_arrays')
  bind_visualserver_mesh_surface_get_blend_shape_arrays = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_blend_shape_arrays')
  bind_visualserver_mesh_surface_get_format = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_format')
  bind_visualserver_mesh_surface_get_format_offset = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_format_offset')
  bind_visualserver_mesh_surface_get_format_stride = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_format_stride')
  bind_visualserver_mesh_surface_get_index_array = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_index_array')
  bind_visualserver_mesh_surface_get_material = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_material')
  bind_visualserver_mesh_surface_get_primitive_type = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_primitive_type')
  bind_visualserver_mesh_surface_get_skeleton_aabb = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_get_skeleton_aabb')
  bind_visualserver_mesh_surface_set_material = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_set_material')
  bind_visualserver_mesh_surface_update_region = api_core.godot_method_bind_get_method('VisualServer', 'mesh_surface_update_region')
  bind_visualserver_multimesh_allocate = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_allocate')
  bind_visualserver_multimesh_create = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_create')
  bind_visualserver_multimesh_get_aabb = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_get_aabb')
  bind_visualserver_multimesh_get_instance_count = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_get_instance_count')
  bind_visualserver_multimesh_get_mesh = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_get_mesh')
  bind_visualserver_multimesh_get_visible_instances = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_get_visible_instances')
  bind_visualserver_multimesh_instance_get_color = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_instance_get_color')
  bind_visualserver_multimesh_instance_get_custom_data = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_instance_get_custom_data')
  bind_visualserver_multimesh_instance_get_transform = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_instance_get_transform')
  bind_visualserver_multimesh_instance_get_transform_2d = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_instance_get_transform_2d')
  bind_visualserver_multimesh_instance_set_color = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_instance_set_color')
  bind_visualserver_multimesh_instance_set_custom_data = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_instance_set_custom_data')
  bind_visualserver_multimesh_instance_set_transform = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_instance_set_transform')
  bind_visualserver_multimesh_instance_set_transform_2d = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_instance_set_transform_2d')
  bind_visualserver_multimesh_set_as_bulk_array = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_set_as_bulk_array')
  bind_visualserver_multimesh_set_mesh = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_set_mesh')
  bind_visualserver_multimesh_set_visible_instances = api_core.godot_method_bind_get_method('VisualServer', 'multimesh_set_visible_instances')
  bind_visualserver_omni_light_create = api_core.godot_method_bind_get_method('VisualServer', 'omni_light_create')
  bind_visualserver_particles_create = api_core.godot_method_bind_get_method('VisualServer', 'particles_create')
  bind_visualserver_particles_get_current_aabb = api_core.godot_method_bind_get_method('VisualServer', 'particles_get_current_aabb')
  bind_visualserver_particles_get_emitting = api_core.godot_method_bind_get_method('VisualServer', 'particles_get_emitting')
  bind_visualserver_particles_is_inactive = api_core.godot_method_bind_get_method('VisualServer', 'particles_is_inactive')
  bind_visualserver_particles_request_process = api_core.godot_method_bind_get_method('VisualServer', 'particles_request_process')
  bind_visualserver_particles_restart = api_core.godot_method_bind_get_method('VisualServer', 'particles_restart')
  bind_visualserver_particles_set_amount = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_amount')
  bind_visualserver_particles_set_custom_aabb = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_custom_aabb')
  bind_visualserver_particles_set_draw_order = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_draw_order')
  bind_visualserver_particles_set_draw_pass_mesh = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_draw_pass_mesh')
  bind_visualserver_particles_set_draw_passes = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_draw_passes')
  bind_visualserver_particles_set_emission_transform = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_emission_transform')
  bind_visualserver_particles_set_emitting = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_emitting')
  bind_visualserver_particles_set_explosiveness_ratio = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_explosiveness_ratio')
  bind_visualserver_particles_set_fixed_fps = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_fixed_fps')
  bind_visualserver_particles_set_fractional_delta = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_fractional_delta')
  bind_visualserver_particles_set_lifetime = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_lifetime')
  bind_visualserver_particles_set_one_shot = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_one_shot')
  bind_visualserver_particles_set_pre_process_time = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_pre_process_time')
  bind_visualserver_particles_set_process_material = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_process_material')
  bind_visualserver_particles_set_randomness_ratio = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_randomness_ratio')
  bind_visualserver_particles_set_speed_scale = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_speed_scale')
  bind_visualserver_particles_set_use_local_coordinates = api_core.godot_method_bind_get_method('VisualServer', 'particles_set_use_local_coordinates')
  bind_visualserver_reflection_probe_create = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_create')
  bind_visualserver_reflection_probe_set_as_interior = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_as_interior')
  bind_visualserver_reflection_probe_set_cull_mask = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_cull_mask')
  bind_visualserver_reflection_probe_set_enable_box_projection = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_enable_box_projection')
  bind_visualserver_reflection_probe_set_enable_shadows = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_enable_shadows')
  bind_visualserver_reflection_probe_set_extents = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_extents')
  bind_visualserver_reflection_probe_set_intensity = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_intensity')
  bind_visualserver_reflection_probe_set_interior_ambient = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_interior_ambient')
  bind_visualserver_reflection_probe_set_interior_ambient_energy = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_interior_ambient_energy')
  bind_visualserver_reflection_probe_set_interior_ambient_probe_contribution = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_interior_ambient_probe_contribution')
  bind_visualserver_reflection_probe_set_max_distance = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_max_distance')
  bind_visualserver_reflection_probe_set_origin_offset = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_origin_offset')
  bind_visualserver_reflection_probe_set_update_mode = api_core.godot_method_bind_get_method('VisualServer', 'reflection_probe_set_update_mode')
  bind_visualserver_request_frame_drawn_callback = api_core.godot_method_bind_get_method('VisualServer', 'request_frame_drawn_callback')
  bind_visualserver_scenario_create = api_core.godot_method_bind_get_method('VisualServer', 'scenario_create')
  bind_visualserver_scenario_set_debug = api_core.godot_method_bind_get_method('VisualServer', 'scenario_set_debug')
  bind_visualserver_scenario_set_environment = api_core.godot_method_bind_get_method('VisualServer', 'scenario_set_environment')
  bind_visualserver_scenario_set_fallback_environment = api_core.godot_method_bind_get_method('VisualServer', 'scenario_set_fallback_environment')
  bind_visualserver_scenario_set_reflection_atlas_size = api_core.godot_method_bind_get_method('VisualServer', 'scenario_set_reflection_atlas_size')
  bind_visualserver_set_boot_image = api_core.godot_method_bind_get_method('VisualServer', 'set_boot_image')
  bind_visualserver_set_debug_generate_wireframes = api_core.godot_method_bind_get_method('VisualServer', 'set_debug_generate_wireframes')
  bind_visualserver_set_default_clear_color = api_core.godot_method_bind_get_method('VisualServer', 'set_default_clear_color')
  bind_visualserver_shader_create = api_core.godot_method_bind_get_method('VisualServer', 'shader_create')
  bind_visualserver_shader_get_code = api_core.godot_method_bind_get_method('VisualServer', 'shader_get_code')
  bind_visualserver_shader_get_default_texture_param = api_core.godot_method_bind_get_method('VisualServer', 'shader_get_default_texture_param')
  bind_visualserver_shader_get_param_list = api_core.godot_method_bind_get_method('VisualServer', 'shader_get_param_list')
  bind_visualserver_shader_set_code = api_core.godot_method_bind_get_method('VisualServer', 'shader_set_code')
  bind_visualserver_shader_set_default_texture_param = api_core.godot_method_bind_get_method('VisualServer', 'shader_set_default_texture_param')
  bind_visualserver_skeleton_allocate = api_core.godot_method_bind_get_method('VisualServer', 'skeleton_allocate')
  bind_visualserver_skeleton_bone_get_transform = api_core.godot_method_bind_get_method('VisualServer', 'skeleton_bone_get_transform')
  bind_visualserver_skeleton_bone_get_transform_2d = api_core.godot_method_bind_get_method('VisualServer', 'skeleton_bone_get_transform_2d')
  bind_visualserver_skeleton_bone_set_transform = api_core.godot_method_bind_get_method('VisualServer', 'skeleton_bone_set_transform')
  bind_visualserver_skeleton_bone_set_transform_2d = api_core.godot_method_bind_get_method('VisualServer', 'skeleton_bone_set_transform_2d')
  bind_visualserver_skeleton_create = api_core.godot_method_bind_get_method('VisualServer', 'skeleton_create')
  bind_visualserver_skeleton_get_bone_count = api_core.godot_method_bind_get_method('VisualServer', 'skeleton_get_bone_count')
  bind_visualserver_sky_create = api_core.godot_method_bind_get_method('VisualServer', 'sky_create')
  bind_visualserver_sky_set_texture = api_core.godot_method_bind_get_method('VisualServer', 'sky_set_texture')
  bind_visualserver_spot_light_create = api_core.godot_method_bind_get_method('VisualServer', 'spot_light_create')
  bind_visualserver_sync = api_core.godot_method_bind_get_method('VisualServer', 'sync')
  bind_visualserver_texture_allocate = api_core.godot_method_bind_get_method('VisualServer', 'texture_allocate')
  bind_visualserver_texture_bind = api_core.godot_method_bind_get_method('VisualServer', 'texture_bind')
  bind_visualserver_texture_create = api_core.godot_method_bind_get_method('VisualServer', 'texture_create')
  bind_visualserver_texture_create_from_image = api_core.godot_method_bind_get_method('VisualServer', 'texture_create_from_image')
  bind_visualserver_texture_debug_usage = api_core.godot_method_bind_get_method('VisualServer', 'texture_debug_usage')
  bind_visualserver_texture_get_data = api_core.godot_method_bind_get_method('VisualServer', 'texture_get_data')
  bind_visualserver_texture_get_depth = api_core.godot_method_bind_get_method('VisualServer', 'texture_get_depth')
  bind_visualserver_texture_get_flags = api_core.godot_method_bind_get_method('VisualServer', 'texture_get_flags')
  bind_visualserver_texture_get_format = api_core.godot_method_bind_get_method('VisualServer', 'texture_get_format')
  bind_visualserver_texture_get_height = api_core.godot_method_bind_get_method('VisualServer', 'texture_get_height')
  bind_visualserver_texture_get_path = api_core.godot_method_bind_get_method('VisualServer', 'texture_get_path')
  bind_visualserver_texture_get_texid = api_core.godot_method_bind_get_method('VisualServer', 'texture_get_texid')
  bind_visualserver_texture_get_type = api_core.godot_method_bind_get_method('VisualServer', 'texture_get_type')
  bind_visualserver_texture_get_width = api_core.godot_method_bind_get_method('VisualServer', 'texture_get_width')
  bind_visualserver_texture_set_data = api_core.godot_method_bind_get_method('VisualServer', 'texture_set_data')
  bind_visualserver_texture_set_data_partial = api_core.godot_method_bind_get_method('VisualServer', 'texture_set_data_partial')
  bind_visualserver_texture_set_flags = api_core.godot_method_bind_get_method('VisualServer', 'texture_set_flags')
  bind_visualserver_texture_set_path = api_core.godot_method_bind_get_method('VisualServer', 'texture_set_path')
  bind_visualserver_texture_set_shrink_all_x2_on_set_data = api_core.godot_method_bind_get_method('VisualServer', 'texture_set_shrink_all_x2_on_set_data')
  bind_visualserver_texture_set_size_override = api_core.godot_method_bind_get_method('VisualServer', 'texture_set_size_override')
  bind_visualserver_textures_keep_original = api_core.godot_method_bind_get_method('VisualServer', 'textures_keep_original')
  bind_visualserver_viewport_attach_camera = api_core.godot_method_bind_get_method('VisualServer', 'viewport_attach_camera')
  bind_visualserver_viewport_attach_canvas = api_core.godot_method_bind_get_method('VisualServer', 'viewport_attach_canvas')
  bind_visualserver_viewport_attach_to_screen = api_core.godot_method_bind_get_method('VisualServer', 'viewport_attach_to_screen')
  bind_visualserver_viewport_create = api_core.godot_method_bind_get_method('VisualServer', 'viewport_create')
  bind_visualserver_viewport_detach = api_core.godot_method_bind_get_method('VisualServer', 'viewport_detach')
  bind_visualserver_viewport_get_render_info = api_core.godot_method_bind_get_method('VisualServer', 'viewport_get_render_info')
  bind_visualserver_viewport_get_texture = api_core.godot_method_bind_get_method('VisualServer', 'viewport_get_texture')
  bind_visualserver_viewport_remove_canvas = api_core.godot_method_bind_get_method('VisualServer', 'viewport_remove_canvas')
  bind_visualserver_viewport_set_active = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_active')
  bind_visualserver_viewport_set_canvas_stacking = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_canvas_stacking')
  bind_visualserver_viewport_set_canvas_transform = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_canvas_transform')
  bind_visualserver_viewport_set_clear_mode = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_clear_mode')
  bind_visualserver_viewport_set_debug_draw = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_debug_draw')
  bind_visualserver_viewport_set_disable_3d = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_disable_3d')
  bind_visualserver_viewport_set_disable_environment = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_disable_environment')
  bind_visualserver_viewport_set_global_canvas_transform = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_global_canvas_transform')
  bind_visualserver_viewport_set_hdr = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_hdr')
  bind_visualserver_viewport_set_hide_canvas = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_hide_canvas')
  bind_visualserver_viewport_set_hide_scenario = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_hide_scenario')
  bind_visualserver_viewport_set_msaa = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_msaa')
  bind_visualserver_viewport_set_parent_viewport = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_parent_viewport')
  bind_visualserver_viewport_set_render_direct_to_screen = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_render_direct_to_screen')
  bind_visualserver_viewport_set_scenario = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_scenario')
  bind_visualserver_viewport_set_shadow_atlas_quadrant_subdivision = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_shadow_atlas_quadrant_subdivision')
  bind_visualserver_viewport_set_shadow_atlas_size = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_shadow_atlas_size')
  bind_visualserver_viewport_set_size = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_size')
  bind_visualserver_viewport_set_transparent_background = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_transparent_background')
  bind_visualserver_viewport_set_update_mode = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_update_mode')
  bind_visualserver_viewport_set_usage = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_usage')
  bind_visualserver_viewport_set_use_arvr = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_use_arvr')
  bind_visualserver_viewport_set_vflip = api_core.godot_method_bind_get_method('VisualServer', 'viewport_set_vflip')

############################Generated class###################################
cdef class VisualServer(classes.Object.Object):
  def __init__(self):
    super().__init__()
    nativescript_api_11.godot_nativescript_get_instance_binding_data(0, api_core.godot_get_class_constructor("VisualServer")())
##################################Generated Methods#########################################
  def  black_bars_set_images(self,  RID left,  RID top,  RID right,  RID bottom):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &left._native
    args[1] = &top._native
    args[2] = &right._native
    args[3] = &bottom._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_black_bars_set_images,self.godot_owner,args,NULL)
    hello('hallo2')
  def  black_bars_set_margins(self,  int left,  int top,  int right,  int bottom):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &left
    args[1] = &top
    args[2] = &right
    args[3] = &bottom
    api_core.godot_method_bind_ptrcall(bind_visualserver_black_bars_set_margins,self.godot_owner,args,NULL)
    hello('hallo2')
  def  camera_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_camera_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  camera_set_cull_mask(self,  RID camera,  int layers):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &camera._native
    args[1] = &layers
    api_core.godot_method_bind_ptrcall(bind_visualserver_camera_set_cull_mask,self.godot_owner,args,NULL)
    hello('hallo2')
  def  camera_set_environment(self,  RID camera,  RID env):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &camera._native
    args[1] = &env._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_camera_set_environment,self.godot_owner,args,NULL)
    hello('hallo2')
  def  camera_set_frustum(self,  RID camera,  float size,  Vector2 offset,  float z_near,  float z_far):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[5]

    args[0] = &camera._native
    args[1] = &size
    args[2] = &offset._native
    args[3] = &z_near
    args[4] = &z_far
    api_core.godot_method_bind_ptrcall(bind_visualserver_camera_set_frustum,self.godot_owner,args,NULL)
    hello('hallo2')
  def  camera_set_orthogonal(self,  RID camera,  float size,  float z_near,  float z_far):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &camera._native
    args[1] = &size
    args[2] = &z_near
    args[3] = &z_far
    api_core.godot_method_bind_ptrcall(bind_visualserver_camera_set_orthogonal,self.godot_owner,args,NULL)
    hello('hallo2')
  def  camera_set_perspective(self,  RID camera,  float fovy_degrees,  float z_near,  float z_far):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &camera._native
    args[1] = &fovy_degrees
    args[2] = &z_near
    args[3] = &z_far
    api_core.godot_method_bind_ptrcall(bind_visualserver_camera_set_perspective,self.godot_owner,args,NULL)
    hello('hallo2')
  def  camera_set_transform(self,  RID camera,  Transform transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &camera._native
    args[1] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_camera_set_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  camera_set_use_vertical_aspect(self,  RID camera,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &camera._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_camera_set_use_vertical_aspect,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  canvas_item_add_circle(self,  RID item,  Vector2 pos,  float radius,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &item._native
    args[1] = &pos._native
    args[2] = &radius
    args[3] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_circle,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_clip_ignore(self,  RID item,  bool ignore):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &ignore
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_clip_ignore,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_line(self,  RID item,  Vector2 from_,  Vector2 to,  Color color,  float width,  bool antialiased):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[6]

    args[0] = &item._native
    args[1] = &from_._native
    args[2] = &to._native
    args[3] = &color._native
    args[4] = &width
    args[5] = &antialiased
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_line,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_mesh(self,  RID item,  RID mesh,  Transform2D transform,  Color modulate,  RID texture,  RID normal_map):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[6]

    args[0] = &item._native
    args[1] = &mesh._native
    args[2] = &transform._native
    args[3] = &modulate._native
    args[4] = &texture._native
    args[5] = &normal_map._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_mesh,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_multimesh(self,  RID item,  RID mesh,  RID texture,  RID normal_map):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &item._native
    args[1] = &mesh._native
    args[2] = &texture._native
    args[3] = &normal_map._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_multimesh,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_nine_patch(self,  RID item,  Rect2 rect,  Rect2 source,  RID texture,  Vector2 topleft,  Vector2 bottomright,  int x_axis_mode,  int y_axis_mode,  bool draw_center,  Color modulate,  RID normal_map):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[11]

    args[0] = &item._native
    args[1] = &rect._native
    args[2] = &source._native
    args[3] = &texture._native
    args[4] = &topleft._native
    args[5] = &bottomright._native
    args[6] = &x_axis_mode
    args[7] = &y_axis_mode
    args[8] = &draw_center
    args[9] = &modulate._native
    args[10] = &normal_map._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_nine_patch,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_particles(self,  RID item,  RID particles,  RID texture,  RID normal_map):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &item._native
    args[1] = &particles._native
    args[2] = &texture._native
    args[3] = &normal_map._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_particles,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_polygon(self,  RID item,  PoolVector2Array points,  PoolColorArray colors,  PoolVector2Array uvs,  RID texture,  RID normal_map,  bool antialiased):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[7]

    args[0] = &item._native
    args[1] = &points._native
    args[2] = &colors._native
    args[3] = &uvs._native
    args[4] = &texture._native
    args[5] = &normal_map._native
    args[6] = &antialiased
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_polygon,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_polyline(self,  RID item,  PoolVector2Array points,  PoolColorArray colors,  float width,  bool antialiased):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[5]

    args[0] = &item._native
    args[1] = &points._native
    args[2] = &colors._native
    args[3] = &width
    args[4] = &antialiased
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_polyline,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_primitive(self,  RID item,  PoolVector2Array points,  PoolColorArray colors,  PoolVector2Array uvs,  RID texture,  float width,  RID normal_map):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[7]

    args[0] = &item._native
    args[1] = &points._native
    args[2] = &colors._native
    args[3] = &uvs._native
    args[4] = &texture._native
    args[5] = &width
    args[6] = &normal_map._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_primitive,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_rect(self,  RID item,  Rect2 rect,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &item._native
    args[1] = &rect._native
    args[2] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_rect,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_set_transform(self,  RID item,  Transform2D transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_set_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_texture_rect(self,  RID item,  Rect2 rect,  RID texture,  bool tile,  Color modulate,  bool transpose,  RID normal_map):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[7]

    args[0] = &item._native
    args[1] = &rect._native
    args[2] = &texture._native
    args[3] = &tile
    args[4] = &modulate._native
    args[5] = &transpose
    args[6] = &normal_map._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_texture_rect,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_texture_rect_region(self,  RID item,  Rect2 rect,  RID texture,  Rect2 src_rect,  Color modulate,  bool transpose,  RID normal_map,  bool clip_uv):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[8]

    args[0] = &item._native
    args[1] = &rect._native
    args[2] = &texture._native
    args[3] = &src_rect._native
    args[4] = &modulate._native
    args[5] = &transpose
    args[6] = &normal_map._native
    args[7] = &clip_uv
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_texture_rect_region,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_add_triangle_array(self,  RID item,  PoolIntArray indices,  PoolVector2Array points,  PoolColorArray colors,  PoolVector2Array uvs,  PoolIntArray bones,  PoolRealArray weights,  RID texture,  int count,  RID normal_map,  bool antialiased,  bool antialiasing_use_indices):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[12]

    args[0] = &item._native
    args[1] = &indices._native
    args[2] = &points._native
    args[3] = &colors._native
    args[4] = &uvs._native
    args[5] = &bones._native
    args[6] = &weights._native
    args[7] = &texture._native
    args[8] = &count
    args[9] = &normal_map._native
    args[10] = &antialiased
    args[11] = &antialiasing_use_indices
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_add_triangle_array,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_clear(self,  RID item):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &item._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_clear,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  canvas_item_set_clip(self,  RID item,  bool clip):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &clip
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_clip,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_copy_to_backbuffer(self,  RID item,  bool enabled,  Rect2 rect):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &item._native
    args[1] = &enabled
    args[2] = &rect._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_copy_to_backbuffer,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_custom_rect(self,  RID item,  bool use_custom_rect,  Rect2 rect):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &item._native
    args[1] = &use_custom_rect
    args[2] = &rect._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_custom_rect,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_distance_field_mode(self,  RID item,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_distance_field_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_draw_behind_parent(self,  RID item,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_draw_behind_parent,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_draw_index(self,  RID item,  int index):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &index
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_draw_index,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_light_mask(self,  RID item,  int mask):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &mask
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_light_mask,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_material(self,  RID item,  RID material):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &material._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_material,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_modulate(self,  RID item,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_modulate,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_parent(self,  RID item,  RID parent):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &parent._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_parent,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_self_modulate(self,  RID item,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_self_modulate,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_sort_children_by_y(self,  RID item,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_sort_children_by_y,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_transform(self,  RID item,  Transform2D transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_use_parent_material(self,  RID item,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_use_parent_material,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_visible(self,  RID item,  bool visible):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &visible
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_visible,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_z_as_relative_to_parent(self,  RID item,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_z_as_relative_to_parent,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_item_set_z_index(self,  RID item,  int z_index):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &item._native
    args[1] = &z_index
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_item_set_z_index,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_attach_to_canvas(self,  RID light,  RID canvas):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &canvas._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_attach_to_canvas,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  canvas_light_occluder_attach_to_canvas(self,  RID occluder,  RID canvas):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &occluder._native
    args[1] = &canvas._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_occluder_attach_to_canvas,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_occluder_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_occluder_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  canvas_light_occluder_set_enabled(self,  RID occluder,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &occluder._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_occluder_set_enabled,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_occluder_set_light_mask(self,  RID occluder,  int mask):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &occluder._native
    args[1] = &mask
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_occluder_set_light_mask,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_occluder_set_polygon(self,  RID occluder,  RID polygon):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &occluder._native
    args[1] = &polygon._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_occluder_set_polygon,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_occluder_set_transform(self,  RID occluder,  Transform2D transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &occluder._native
    args[1] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_occluder_set_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_color(self,  RID light,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_color,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_enabled(self,  RID light,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_enabled,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_energy(self,  RID light,  float energy):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &energy
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_energy,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_height(self,  RID light,  float height):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &height
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_height,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_item_cull_mask(self,  RID light,  int mask):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &mask
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_item_cull_mask,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_item_shadow_cull_mask(self,  RID light,  int mask):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &mask
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_item_shadow_cull_mask,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_layer_range(self,  RID light,  int min_layer,  int max_layer):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &light._native
    args[1] = &min_layer
    args[2] = &max_layer
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_layer_range,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_mode(self,  RID light,  int mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_scale(self,  RID light,  float scale):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &scale
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_scale,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_shadow_buffer_size(self,  RID light,  int size):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &size
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_shadow_buffer_size,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_shadow_color(self,  RID light,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_shadow_color,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_shadow_enabled(self,  RID light,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_shadow_enabled,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_shadow_filter(self,  RID light,  int filter):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &filter
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_shadow_filter,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_shadow_gradient_length(self,  RID light,  float length):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &length
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_shadow_gradient_length,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_shadow_smooth(self,  RID light,  float smooth):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &smooth
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_shadow_smooth,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_texture(self,  RID light,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_texture,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_texture_offset(self,  RID light,  Vector2 offset):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &offset._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_texture_offset,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_transform(self,  RID light,  Transform2D transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_light_set_z_range(self,  RID light,  int min_z,  int max_z):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &light._native
    args[1] = &min_z
    args[2] = &max_z
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_light_set_z_range,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_occluder_polygon_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_occluder_polygon_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  canvas_occluder_polygon_set_cull_mode(self,  RID occluder_polygon,  int mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &occluder_polygon._native
    args[1] = &mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_occluder_polygon_set_cull_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_occluder_polygon_set_shape(self,  RID occluder_polygon,  PoolVector2Array shape,  bool closed):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &occluder_polygon._native
    args[1] = &shape._native
    args[2] = &closed
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_occluder_polygon_set_shape,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_occluder_polygon_set_shape_as_lines(self,  RID occluder_polygon,  PoolVector2Array shape):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &occluder_polygon._native
    args[1] = &shape._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_occluder_polygon_set_shape_as_lines,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_set_item_mirroring(self,  RID canvas,  RID item,  Vector2 mirroring):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &canvas._native
    args[1] = &item._native
    args[2] = &mirroring._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_set_item_mirroring,self.godot_owner,args,NULL)
    hello('hallo2')
  def  canvas_set_modulate(self,  RID canvas,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &canvas._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_canvas_set_modulate,self.godot_owner,args,NULL)
    hello('hallo2')
  def  directional_light_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_directional_light_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  draw(self,  bool swap_buffers,  float frame_step):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &swap_buffers
    args[1] = &frame_step
    api_core.godot_method_bind_ptrcall(bind_visualserver_draw,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  environment_set_adjustment(self,  RID env,  bool enable,  float brightness,  float contrast,  float saturation,  RID ramp):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[6]

    args[0] = &env._native
    args[1] = &enable
    args[2] = &brightness
    args[3] = &contrast
    args[4] = &saturation
    args[5] = &ramp._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_adjustment,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_ambient_light(self,  RID env,  Color color,  float energy,  float sky_contibution):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &env._native
    args[1] = &color._native
    args[2] = &energy
    args[3] = &sky_contibution
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_ambient_light,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_background(self,  RID env,  int bg):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &env._native
    args[1] = &bg
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_background,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_bg_color(self,  RID env,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &env._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_bg_color,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_bg_energy(self,  RID env,  float energy):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &env._native
    args[1] = &energy
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_bg_energy,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_canvas_max_layer(self,  RID env,  int max_layer):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &env._native
    args[1] = &max_layer
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_canvas_max_layer,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_dof_blur_far(self,  RID env,  bool enable,  float distance,  float transition,  float far_amount,  int quality):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[6]

    args[0] = &env._native
    args[1] = &enable
    args[2] = &distance
    args[3] = &transition
    args[4] = &far_amount
    args[5] = &quality
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_dof_blur_far,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_dof_blur_near(self,  RID env,  bool enable,  float distance,  float transition,  float far_amount,  int quality):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[6]

    args[0] = &env._native
    args[1] = &enable
    args[2] = &distance
    args[3] = &transition
    args[4] = &far_amount
    args[5] = &quality
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_dof_blur_near,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_fog(self,  RID env,  bool enable,  Color color,  Color sun_color,  float sun_amount):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[5]

    args[0] = &env._native
    args[1] = &enable
    args[2] = &color._native
    args[3] = &sun_color._native
    args[4] = &sun_amount
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_fog,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_fog_depth(self,  RID env,  bool enable,  float depth_begin,  float depth_end,  float depth_curve,  bool transmit,  float transmit_curve):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[7]

    args[0] = &env._native
    args[1] = &enable
    args[2] = &depth_begin
    args[3] = &depth_end
    args[4] = &depth_curve
    args[5] = &transmit
    args[6] = &transmit_curve
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_fog_depth,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_fog_height(self,  RID env,  bool enable,  float min_height,  float max_height,  float height_curve):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[5]

    args[0] = &env._native
    args[1] = &enable
    args[2] = &min_height
    args[3] = &max_height
    args[4] = &height_curve
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_fog_height,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_glow(self,  RID env,  bool enable,  int level_flags,  float intensity,  float strength,  float bloom_threshold,  int blend_mode,  float hdr_bleed_threshold,  float hdr_bleed_scale,  float hdr_luminance_cap,  bool bicubic_upscale):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[11]

    args[0] = &env._native
    args[1] = &enable
    args[2] = &level_flags
    args[3] = &intensity
    args[4] = &strength
    args[5] = &bloom_threshold
    args[6] = &blend_mode
    args[7] = &hdr_bleed_threshold
    args[8] = &hdr_bleed_scale
    args[9] = &hdr_luminance_cap
    args[10] = &bicubic_upscale
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_glow,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_sky(self,  RID env,  RID sky):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &env._native
    args[1] = &sky._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_sky,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_sky_custom_fov(self,  RID env,  float scale):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &env._native
    args[1] = &scale
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_sky_custom_fov,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_sky_orientation(self,  RID env,  Basis orientation):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &env._native
    args[1] = &orientation._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_sky_orientation,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_ssao(self,  RID env,  bool enable,  float radius,  float intensity,  float radius2,  float intensity2,  float bias,  float light_affect,  float ao_channel_affect,  Color color,  int quality,  int blur,  float bilateral_sharpness):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[13]

    args[0] = &env._native
    args[1] = &enable
    args[2] = &radius
    args[3] = &intensity
    args[4] = &radius2
    args[5] = &intensity2
    args[6] = &bias
    args[7] = &light_affect
    args[8] = &ao_channel_affect
    args[9] = &color._native
    args[10] = &quality
    args[11] = &blur
    args[12] = &bilateral_sharpness
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_ssao,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_ssr(self,  RID env,  bool enable,  int max_steps,  float fade_in,  float fade_out,  float depth_tolerance,  bool roughness):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[7]

    args[0] = &env._native
    args[1] = &enable
    args[2] = &max_steps
    args[3] = &fade_in
    args[4] = &fade_out
    args[5] = &depth_tolerance
    args[6] = &roughness
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_ssr,self.godot_owner,args,NULL)
    hello('hallo2')
  def  environment_set_tonemap(self,  RID env,  int tone_mapper,  float exposure,  float white,  bool auto_exposure,  float min_luminance,  float max_luminance,  float auto_exp_speed,  float auto_exp_grey):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[9]

    args[0] = &env._native
    args[1] = &tone_mapper
    args[2] = &exposure
    args[3] = &white
    args[4] = &auto_exposure
    args[5] = &min_luminance
    args[6] = &max_luminance
    args[7] = &auto_exp_speed
    args[8] = &auto_exp_grey
    api_core.godot_method_bind_ptrcall(bind_visualserver_environment_set_tonemap,self.godot_owner,args,NULL)
    hello('hallo2')
  def  finish(self):
    cdef godot_object *_owner = self.godot_owner

    api_core.godot_method_bind_ptrcall(bind_visualserver_finish,self.godot_owner,NULL,NULL)
    hello('hallo2')
  def  force_draw(self,  bool swap_buffers,  float frame_step):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &swap_buffers
    args[1] = &frame_step
    api_core.godot_method_bind_ptrcall(bind_visualserver_force_draw,self.godot_owner,args,NULL)
    hello('hallo2')
  def  force_sync(self):
    cdef godot_object *_owner = self.godot_owner

    api_core.godot_method_bind_ptrcall(bind_visualserver_force_sync,self.godot_owner,NULL,NULL)
    hello('hallo2')
  def  free_rid(self,  RID rid):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &rid._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_free_rid,self.godot_owner,args,NULL)
    hello('hallo2')
  def  get_render_info(self,  int info):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &info
    api_core.godot_method_bind_ptrcall(bind_visualserver_get_render_info,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  get_test_cube(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_get_test_cube,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  get_test_texture(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_get_test_texture,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  get_video_adapter_name(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_string* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_get_video_adapter_name,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return String.new_static(dereference(ret))

  def  get_video_adapter_vendor(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_string* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_get_video_adapter_vendor,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return String.new_static(dereference(ret))

  def  get_white_texture(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_get_white_texture,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  gi_probe_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  gi_probe_get_bias(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef float* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_get_bias,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  gi_probe_get_bounds(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_aabb* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_get_bounds,self.godot_owner,args,&ret)
    hello('hallo2')
    return AABB.new_static(dereference(ret))

  def  gi_probe_get_cell_size(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef float* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_get_cell_size,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  gi_probe_get_dynamic_data(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_object* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_get_dynamic_data,self.godot_owner,args,&ret)
    hello('hallo2')
  def  gi_probe_get_dynamic_range(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_get_dynamic_range,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  gi_probe_get_energy(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef float* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_get_energy,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  gi_probe_get_normal_bias(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef float* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_get_normal_bias,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  gi_probe_get_propagation(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef float* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_get_propagation,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  gi_probe_get_to_cell_xform(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_transform* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_get_to_cell_xform,self.godot_owner,args,&ret)
    hello('hallo2')
    return Transform.new_static(dereference(ret))

  def  gi_probe_is_compressed(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef bool* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_is_compressed,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  gi_probe_is_interior(self,  RID probe):
    cdef godot_object *_owner = self.godot_owner

    cdef bool* ret = NULL;

    cdef void *args[1]

    args[0] = &probe._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_is_interior,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  gi_probe_set_bias(self,  RID probe,  float bias):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &bias
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_bias,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_bounds(self,  RID probe,  AABB bounds):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &bounds._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_bounds,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_cell_size(self,  RID probe,  float range):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &range
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_cell_size,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_compress(self,  RID probe,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_compress,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_dynamic_data(self,  RID probe,  PoolIntArray data):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &data._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_dynamic_data,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_dynamic_range(self,  RID probe,  int range):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &range
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_dynamic_range,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_energy(self,  RID probe,  float energy):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &energy
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_energy,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_interior(self,  RID probe,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_interior,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_normal_bias(self,  RID probe,  float bias):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &bias
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_normal_bias,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_propagation(self,  RID probe,  float propagation):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &propagation
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_propagation,self.godot_owner,args,NULL)
    hello('hallo2')
  def  gi_probe_set_to_cell_xform(self,  RID probe,  Transform xform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &xform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_gi_probe_set_to_cell_xform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  has_changed(self):
    cdef godot_object *_owner = self.godot_owner

    cdef bool* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_has_changed,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return dereference(ret)

  def  has_feature(self,  int feature):
    cdef godot_object *_owner = self.godot_owner

    cdef bool* ret = NULL;

    cdef void *args[1]

    args[0] = &feature
    api_core.godot_method_bind_ptrcall(bind_visualserver_has_feature,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  has_os_feature(self,  String feature):
    cdef godot_object *_owner = self.godot_owner

    cdef bool* ret = NULL;

    cdef void *args[1]

    args[0] = &feature._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_has_os_feature,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  immediate_begin(self,  RID immediate,  int primitive,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &immediate._native
    args[1] = &primitive
    args[2] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_begin,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_clear(self,  RID immediate):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &immediate._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_clear,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_color(self,  RID immediate,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &immediate._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_color,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  immediate_end(self,  RID immediate):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &immediate._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_end,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_get_material(self,  RID immediate):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    cdef void *args[1]

    args[0] = &immediate._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_get_material,self.godot_owner,args,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  immediate_normal(self,  RID immediate,  Vector3 normal):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &immediate._native
    args[1] = &normal._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_normal,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_set_material(self,  RID immediate,  RID material):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &immediate._native
    args[1] = &material._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_set_material,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_tangent(self,  RID immediate,  Plane tangent):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &immediate._native
    args[1] = &tangent._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_tangent,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_uv(self,  RID immediate,  Vector2 tex_uv):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &immediate._native
    args[1] = &tex_uv._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_uv,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_uv2(self,  RID immediate,  Vector2 tex_uv):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &immediate._native
    args[1] = &tex_uv._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_uv2,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_vertex(self,  RID immediate,  Vector3 vertex):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &immediate._native
    args[1] = &vertex._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_vertex,self.godot_owner,args,NULL)
    hello('hallo2')
  def  immediate_vertex_2d(self,  RID immediate,  Vector2 vertex):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &immediate._native
    args[1] = &vertex._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_immediate_vertex_2d,self.godot_owner,args,NULL)
    hello('hallo2')
  def  init(self):
    cdef godot_object *_owner = self.godot_owner

    api_core.godot_method_bind_ptrcall(bind_visualserver_init,self.godot_owner,NULL,NULL)
    hello('hallo2')
  def  instance_attach_object_instance_id(self,  RID instance,  int id):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &id
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_attach_object_instance_id,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_attach_skeleton(self,  RID instance,  RID skeleton):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &skeleton._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_attach_skeleton,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  instance_create2(self,  RID base,  RID scenario):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    cdef void *args[2]

    args[0] = &base._native
    args[1] = &scenario._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_create2,self.godot_owner,args,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  instance_geometry_set_as_instance_lod(self,  RID instance,  RID as_lod_of_instance):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &as_lod_of_instance._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_geometry_set_as_instance_lod,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_geometry_set_cast_shadows_setting(self,  RID instance,  int shadow_casting_setting):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &shadow_casting_setting
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_geometry_set_cast_shadows_setting,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_geometry_set_draw_range(self,  RID instance,  float min,  float max,  float min_margin,  float max_margin):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[5]

    args[0] = &instance._native
    args[1] = &min
    args[2] = &max
    args[3] = &min_margin
    args[4] = &max_margin
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_geometry_set_draw_range,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_geometry_set_flag(self,  RID instance,  int flag,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &instance._native
    args[1] = &flag
    args[2] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_geometry_set_flag,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_geometry_set_material_override(self,  RID instance,  RID material):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &material._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_geometry_set_material_override,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_base(self,  RID instance,  RID base):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &base._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_base,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_blend_shape_weight(self,  RID instance,  int shape,  float weight):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &instance._native
    args[1] = &shape
    args[2] = &weight
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_blend_shape_weight,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_custom_aabb(self,  RID instance,  AABB aabb):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &aabb._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_custom_aabb,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_exterior(self,  RID instance,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_exterior,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_extra_visibility_margin(self,  RID instance,  float margin):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &margin
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_extra_visibility_margin,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_layer_mask(self,  RID instance,  int mask):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &mask
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_layer_mask,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_scenario(self,  RID instance,  RID scenario):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &scenario._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_scenario,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_surface_material(self,  RID instance,  int surface,  RID material):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &instance._native
    args[1] = &surface
    args[2] = &material._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_surface_material,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_transform(self,  RID instance,  Transform transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_use_lightmap(self,  RID instance,  RID lightmap_instance,  RID lightmap):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &instance._native
    args[1] = &lightmap_instance._native
    args[2] = &lightmap._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_use_lightmap,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instance_set_visible(self,  RID instance,  bool visible):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &instance._native
    args[1] = &visible
    api_core.godot_method_bind_ptrcall(bind_visualserver_instance_set_visible,self.godot_owner,args,NULL)
    hello('hallo2')
  def  instances_cull_aabb(self,  AABB aabb,  RID scenario):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_array* ret = NULL;

    cdef void *args[2]

    args[0] = &aabb._native
    args[1] = &scenario._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instances_cull_aabb,self.godot_owner,args,&ret)
    hello('hallo2')
    return Array.new_static(dereference(ret))

  def  instances_cull_convex(self,  Array convex,  RID scenario):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_array* ret = NULL;

    cdef void *args[2]

    args[0] = &convex._native
    args[1] = &scenario._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instances_cull_convex,self.godot_owner,args,&ret)
    hello('hallo2')
    return Array.new_static(dereference(ret))

  def  instances_cull_ray(self,  Vector3 from_,  Vector3 to,  RID scenario):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_array* ret = NULL;

    cdef void *args[3]

    args[0] = &from_._native
    args[1] = &to._native
    args[2] = &scenario._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_instances_cull_ray,self.godot_owner,args,&ret)
    hello('hallo2')
    return Array.new_static(dereference(ret))

  def  light_directional_set_blend_splits(self,  RID light,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_directional_set_blend_splits,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_directional_set_shadow_depth_range_mode(self,  RID light,  int range_mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &range_mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_directional_set_shadow_depth_range_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_directional_set_shadow_mode(self,  RID light,  int mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_directional_set_shadow_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_omni_set_shadow_detail(self,  RID light,  int detail):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &detail
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_omni_set_shadow_detail,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_omni_set_shadow_mode(self,  RID light,  int mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_omni_set_shadow_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_set_color(self,  RID light,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_set_color,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_set_cull_mask(self,  RID light,  int mask):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &mask
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_set_cull_mask,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_set_negative(self,  RID light,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_set_negative,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_set_param(self,  RID light,  int param,  float value):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &light._native
    args[1] = &param
    args[2] = &value
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_set_param,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_set_projector(self,  RID light,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_set_projector,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_set_reverse_cull_face_mode(self,  RID light,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_set_reverse_cull_face_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_set_shadow(self,  RID light,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_set_shadow,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_set_shadow_color(self,  RID light,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_set_shadow_color,self.godot_owner,args,NULL)
    hello('hallo2')
  def  light_set_use_gi(self,  RID light,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &light._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_light_set_use_gi,self.godot_owner,args,NULL)
    hello('hallo2')
  def  lightmap_capture_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  lightmap_capture_get_bounds(self,  RID capture):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_aabb* ret = NULL;

    cdef void *args[1]

    args[0] = &capture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_get_bounds,self.godot_owner,args,&ret)
    hello('hallo2')
    return AABB.new_static(dereference(ret))

  def  lightmap_capture_get_energy(self,  RID capture):
    cdef godot_object *_owner = self.godot_owner

    cdef float* ret = NULL;

    cdef void *args[1]

    args[0] = &capture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_get_energy,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  lightmap_capture_get_octree(self,  RID capture):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_object* ret = NULL;

    cdef void *args[1]

    args[0] = &capture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_get_octree,self.godot_owner,args,&ret)
    hello('hallo2')
  def  lightmap_capture_get_octree_cell_subdiv(self,  RID capture):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &capture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_get_octree_cell_subdiv,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  lightmap_capture_get_octree_cell_transform(self,  RID capture):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_transform* ret = NULL;

    cdef void *args[1]

    args[0] = &capture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_get_octree_cell_transform,self.godot_owner,args,&ret)
    hello('hallo2')
    return Transform.new_static(dereference(ret))

  def  lightmap_capture_set_bounds(self,  RID capture,  AABB bounds):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &capture._native
    args[1] = &bounds._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_set_bounds,self.godot_owner,args,NULL)
    hello('hallo2')
  def  lightmap_capture_set_energy(self,  RID capture,  float energy):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &capture._native
    args[1] = &energy
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_set_energy,self.godot_owner,args,NULL)
    hello('hallo2')
  def  lightmap_capture_set_octree(self,  RID capture,  PoolByteArray octree):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &capture._native
    args[1] = &octree._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_set_octree,self.godot_owner,args,NULL)
    hello('hallo2')
  def  lightmap_capture_set_octree_cell_subdiv(self,  RID capture,  int subdiv):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &capture._native
    args[1] = &subdiv
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_set_octree_cell_subdiv,self.godot_owner,args,NULL)
    hello('hallo2')
  def  lightmap_capture_set_octree_cell_transform(self,  RID capture,  Transform xform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &capture._native
    args[1] = &xform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_lightmap_capture_set_octree_cell_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  make_sphere_mesh(self,  int latitudes,  int longitudes,  float radius):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    cdef void *args[3]

    args[0] = &latitudes
    args[1] = &longitudes
    args[2] = &radius
    api_core.godot_method_bind_ptrcall(bind_visualserver_make_sphere_mesh,self.godot_owner,args,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  material_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_material_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  material_get_param(self,  RID material,  String parameter):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_variant* ret = NULL;

    cdef void *args[2]

    args[0] = &material._native
    args[1] = &parameter._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_material_get_param,self.godot_owner,args,&ret)
    hello('hallo2')
    return Variant.new_static(dereference(ret))

  def  material_get_param_default(self,  RID material,  String parameter):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_variant* ret = NULL;

    cdef void *args[2]

    args[0] = &material._native
    args[1] = &parameter._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_material_get_param_default,self.godot_owner,args,&ret)
    hello('hallo2')
    return Variant.new_static(dereference(ret))

  def  material_get_shader(self,  RID shader_material):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    cdef void *args[1]

    args[0] = &shader_material._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_material_get_shader,self.godot_owner,args,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  material_set_line_width(self,  RID material,  float width):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &material._native
    args[1] = &width
    api_core.godot_method_bind_ptrcall(bind_visualserver_material_set_line_width,self.godot_owner,args,NULL)
    hello('hallo2')
  def  material_set_next_pass(self,  RID material,  RID next_material):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &material._native
    args[1] = &next_material._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_material_set_next_pass,self.godot_owner,args,NULL)
    hello('hallo2')
  def  material_set_param(self,  RID material,  String parameter,  Variant value):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &material._native
    args[1] = &parameter._native
    args[2] = &value._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_material_set_param,self.godot_owner,args,NULL)
    hello('hallo2')
  def  material_set_render_priority(self,  RID material,  int priority):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &material._native
    args[1] = &priority
    api_core.godot_method_bind_ptrcall(bind_visualserver_material_set_render_priority,self.godot_owner,args,NULL)
    hello('hallo2')
  def  material_set_shader(self,  RID shader_material,  RID shader):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &shader_material._native
    args[1] = &shader._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_material_set_shader,self.godot_owner,args,NULL)
    hello('hallo2')
  def  mesh_add_surface_from_arrays(self,  RID mesh,  int primitive,  Array arrays,  Array blend_shapes,  int compress_format):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[5]

    args[0] = &mesh._native
    args[1] = &primitive
    args[2] = &arrays._native
    args[3] = &blend_shapes._native
    args[4] = &compress_format
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_add_surface_from_arrays,self.godot_owner,args,NULL)
    hello('hallo2')
  def  mesh_clear(self,  RID mesh):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &mesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_clear,self.godot_owner,args,NULL)
    hello('hallo2')
  def  mesh_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  mesh_get_blend_shape_count(self,  RID mesh):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &mesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_get_blend_shape_count,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  mesh_get_blend_shape_mode(self,  RID mesh):
    cdef godot_object *_owner = self.godot_owner

    cdef VisualServer_BlendShapeMode* ret = NULL;

    cdef void *args[1]

    args[0] = &mesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_get_blend_shape_mode,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  mesh_get_custom_aabb(self,  RID mesh):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_aabb* ret = NULL;

    cdef void *args[1]

    args[0] = &mesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_get_custom_aabb,self.godot_owner,args,&ret)
    hello('hallo2')
    return AABB.new_static(dereference(ret))

  def  mesh_get_surface_count(self,  RID mesh):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &mesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_get_surface_count,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  mesh_remove_surface(self,  RID mesh,  int index):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &index
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_remove_surface,self.godot_owner,args,NULL)
    hello('hallo2')
  def  mesh_set_blend_shape_count(self,  RID mesh,  int amount):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &amount
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_set_blend_shape_count,self.godot_owner,args,NULL)
    hello('hallo2')
  def  mesh_set_blend_shape_mode(self,  RID mesh,  int mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_set_blend_shape_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  mesh_set_custom_aabb(self,  RID mesh,  AABB aabb):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &aabb._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_set_custom_aabb,self.godot_owner,args,NULL)
    hello('hallo2')
  def  mesh_surface_get_aabb(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_aabb* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_aabb,self.godot_owner,args,&ret)
    hello('hallo2')
    return AABB.new_static(dereference(ret))

  def  mesh_surface_get_array(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_object* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_array,self.godot_owner,args,&ret)
    hello('hallo2')
  def  mesh_surface_get_array_index_len(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_array_index_len,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  mesh_surface_get_array_len(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_array_len,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  mesh_surface_get_arrays(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_array* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_arrays,self.godot_owner,args,&ret)
    hello('hallo2')
    return Array.new_static(dereference(ret))

  def  mesh_surface_get_blend_shape_arrays(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_array* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_blend_shape_arrays,self.godot_owner,args,&ret)
    hello('hallo2')
    return Array.new_static(dereference(ret))

  def  mesh_surface_get_format(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_format,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  mesh_surface_get_format_offset(self,  int format,  int vertex_len,  int index_len,  int array_index):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[4]

    args[0] = &format
    args[1] = &vertex_len
    args[2] = &index_len
    args[3] = &array_index
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_format_offset,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  mesh_surface_get_format_stride(self,  int format,  int vertex_len,  int index_len):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[3]

    args[0] = &format
    args[1] = &vertex_len
    args[2] = &index_len
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_format_stride,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  mesh_surface_get_index_array(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_object* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_index_array,self.godot_owner,args,&ret)
    hello('hallo2')
  def  mesh_surface_get_material(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_material,self.godot_owner,args,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  mesh_surface_get_primitive_type(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef VisualServer_PrimitiveType* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_primitive_type,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  mesh_surface_get_skeleton_aabb(self,  RID mesh,  int surface):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_array* ret = NULL;

    cdef void *args[2]

    args[0] = &mesh._native
    args[1] = &surface
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_get_skeleton_aabb,self.godot_owner,args,&ret)
    hello('hallo2')
    return Array.new_static(dereference(ret))

  def  mesh_surface_set_material(self,  RID mesh,  int surface,  RID material):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &mesh._native
    args[1] = &surface
    args[2] = &material._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_set_material,self.godot_owner,args,NULL)
    hello('hallo2')
  def  mesh_surface_update_region(self,  RID mesh,  int surface,  int offset,  PoolByteArray data):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &mesh._native
    args[1] = &surface
    args[2] = &offset
    args[3] = &data._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_mesh_surface_update_region,self.godot_owner,args,NULL)
    hello('hallo2')
  def  multimesh_allocate(self,  RID multimesh,  int instances,  int transform_format,  int color_format,  int custom_data_format):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[5]

    args[0] = &multimesh._native
    args[1] = &instances
    args[2] = &transform_format
    args[3] = &color_format
    args[4] = &custom_data_format
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_allocate,self.godot_owner,args,NULL)
    hello('hallo2')
  def  multimesh_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  multimesh_get_aabb(self,  RID multimesh):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_aabb* ret = NULL;

    cdef void *args[1]

    args[0] = &multimesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_get_aabb,self.godot_owner,args,&ret)
    hello('hallo2')
    return AABB.new_static(dereference(ret))

  def  multimesh_get_instance_count(self,  RID multimesh):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &multimesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_get_instance_count,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  multimesh_get_mesh(self,  RID multimesh):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    cdef void *args[1]

    args[0] = &multimesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_get_mesh,self.godot_owner,args,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  multimesh_get_visible_instances(self,  RID multimesh):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &multimesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_get_visible_instances,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  multimesh_instance_get_color(self,  RID multimesh,  int index):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_color* ret = NULL;

    cdef void *args[2]

    args[0] = &multimesh._native
    args[1] = &index
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_instance_get_color,self.godot_owner,args,&ret)
    hello('hallo2')
    return Color.new_static(dereference(ret))

  def  multimesh_instance_get_custom_data(self,  RID multimesh,  int index):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_color* ret = NULL;

    cdef void *args[2]

    args[0] = &multimesh._native
    args[1] = &index
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_instance_get_custom_data,self.godot_owner,args,&ret)
    hello('hallo2')
    return Color.new_static(dereference(ret))

  def  multimesh_instance_get_transform(self,  RID multimesh,  int index):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_transform* ret = NULL;

    cdef void *args[2]

    args[0] = &multimesh._native
    args[1] = &index
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_instance_get_transform,self.godot_owner,args,&ret)
    hello('hallo2')
    return Transform.new_static(dereference(ret))

  def  multimesh_instance_get_transform_2d(self,  RID multimesh,  int index):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_transform2d* ret = NULL;

    cdef void *args[2]

    args[0] = &multimesh._native
    args[1] = &index
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_instance_get_transform_2d,self.godot_owner,args,&ret)
    hello('hallo2')
    return Transform2D.new_static(dereference(ret))

  def  multimesh_instance_set_color(self,  RID multimesh,  int index,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &multimesh._native
    args[1] = &index
    args[2] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_instance_set_color,self.godot_owner,args,NULL)
    hello('hallo2')
  def  multimesh_instance_set_custom_data(self,  RID multimesh,  int index,  Color custom_data):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &multimesh._native
    args[1] = &index
    args[2] = &custom_data._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_instance_set_custom_data,self.godot_owner,args,NULL)
    hello('hallo2')
  def  multimesh_instance_set_transform(self,  RID multimesh,  int index,  Transform transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &multimesh._native
    args[1] = &index
    args[2] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_instance_set_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  multimesh_instance_set_transform_2d(self,  RID multimesh,  int index,  Transform2D transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &multimesh._native
    args[1] = &index
    args[2] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_instance_set_transform_2d,self.godot_owner,args,NULL)
    hello('hallo2')
  def  multimesh_set_as_bulk_array(self,  RID multimesh,  PoolRealArray array):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &multimesh._native
    args[1] = &array._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_set_as_bulk_array,self.godot_owner,args,NULL)
    hello('hallo2')
  def  multimesh_set_mesh(self,  RID multimesh,  RID mesh):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &multimesh._native
    args[1] = &mesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_set_mesh,self.godot_owner,args,NULL)
    hello('hallo2')
  def  multimesh_set_visible_instances(self,  RID multimesh,  int visible):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &multimesh._native
    args[1] = &visible
    api_core.godot_method_bind_ptrcall(bind_visualserver_multimesh_set_visible_instances,self.godot_owner,args,NULL)
    hello('hallo2')
  def  omni_light_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_omni_light_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  particles_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  particles_get_current_aabb(self,  RID particles):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_aabb* ret = NULL;

    cdef void *args[1]

    args[0] = &particles._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_get_current_aabb,self.godot_owner,args,&ret)
    hello('hallo2')
    return AABB.new_static(dereference(ret))

  def  particles_get_emitting(self,  RID particles):
    cdef godot_object *_owner = self.godot_owner

    cdef bool* ret = NULL;

    cdef void *args[1]

    args[0] = &particles._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_get_emitting,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  particles_is_inactive(self,  RID particles):
    cdef godot_object *_owner = self.godot_owner

    cdef bool* ret = NULL;

    cdef void *args[1]

    args[0] = &particles._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_is_inactive,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  particles_request_process(self,  RID particles):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &particles._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_request_process,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_restart(self,  RID particles):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &particles._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_restart,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_amount(self,  RID particles,  int amount):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &amount
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_amount,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_custom_aabb(self,  RID particles,  AABB aabb):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &aabb._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_custom_aabb,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_draw_order(self,  RID particles,  int order):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &order
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_draw_order,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_draw_pass_mesh(self,  RID particles,  int pass_,  RID mesh):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &particles._native
    args[1] = &pass_
    args[2] = &mesh._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_draw_pass_mesh,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_draw_passes(self,  RID particles,  int count):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &count
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_draw_passes,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_emission_transform(self,  RID particles,  Transform transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_emission_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_emitting(self,  RID particles,  bool emitting):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &emitting
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_emitting,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_explosiveness_ratio(self,  RID particles,  float ratio):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &ratio
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_explosiveness_ratio,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_fixed_fps(self,  RID particles,  int fps):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &fps
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_fixed_fps,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_fractional_delta(self,  RID particles,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_fractional_delta,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_lifetime(self,  RID particles,  float lifetime):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &lifetime
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_lifetime,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_one_shot(self,  RID particles,  bool one_shot):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &one_shot
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_one_shot,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_pre_process_time(self,  RID particles,  float time):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &time
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_pre_process_time,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_process_material(self,  RID particles,  RID material):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &material._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_process_material,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_randomness_ratio(self,  RID particles,  float ratio):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &ratio
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_randomness_ratio,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_speed_scale(self,  RID particles,  float scale):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &scale
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_speed_scale,self.godot_owner,args,NULL)
    hello('hallo2')
  def  particles_set_use_local_coordinates(self,  RID particles,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &particles._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_particles_set_use_local_coordinates,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  reflection_probe_set_as_interior(self,  RID probe,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_as_interior,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_cull_mask(self,  RID probe,  int layers):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &layers
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_cull_mask,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_enable_box_projection(self,  RID probe,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_enable_box_projection,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_enable_shadows(self,  RID probe,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_enable_shadows,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_extents(self,  RID probe,  Vector3 extents):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &extents._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_extents,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_intensity(self,  RID probe,  float intensity):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &intensity
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_intensity,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_interior_ambient(self,  RID probe,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_interior_ambient,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_interior_ambient_energy(self,  RID probe,  float energy):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &energy
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_interior_ambient_energy,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_interior_ambient_probe_contribution(self,  RID probe,  float contrib):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &contrib
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_interior_ambient_probe_contribution,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_max_distance(self,  RID probe,  float distance):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &distance
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_max_distance,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_origin_offset(self,  RID probe,  Vector3 offset):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &offset._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_origin_offset,self.godot_owner,args,NULL)
    hello('hallo2')
  def  reflection_probe_set_update_mode(self,  RID probe,  int mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &probe._native
    args[1] = &mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_reflection_probe_set_update_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  request_frame_drawn_callback(self,  classes.Object.Object where,  String method,  Variant userdata):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = where.godot_owner
    args[1] = &method._native
    args[2] = &userdata._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_request_frame_drawn_callback,self.godot_owner,args,NULL)
    hello('hallo2')
  def  scenario_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_scenario_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  scenario_set_debug(self,  RID scenario,  int debug_mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &scenario._native
    args[1] = &debug_mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_scenario_set_debug,self.godot_owner,args,NULL)
    hello('hallo2')
  def  scenario_set_environment(self,  RID scenario,  RID environment):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &scenario._native
    args[1] = &environment._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_scenario_set_environment,self.godot_owner,args,NULL)
    hello('hallo2')
  def  scenario_set_fallback_environment(self,  RID scenario,  RID environment):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &scenario._native
    args[1] = &environment._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_scenario_set_fallback_environment,self.godot_owner,args,NULL)
    hello('hallo2')
  def  scenario_set_reflection_atlas_size(self,  RID scenario,  int size,  int subdiv):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &scenario._native
    args[1] = &size
    args[2] = &subdiv
    api_core.godot_method_bind_ptrcall(bind_visualserver_scenario_set_reflection_atlas_size,self.godot_owner,args,NULL)
    hello('hallo2')
  def  set_boot_image(self,  classes.Image.Image image,  Color color,  bool scale,  bool use_filter):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = image.godot_owner
    args[1] = &color._native
    args[2] = &scale
    args[3] = &use_filter
    api_core.godot_method_bind_ptrcall(bind_visualserver_set_boot_image,self.godot_owner,args,NULL)
    hello('hallo2')
  def  set_debug_generate_wireframes(self,  bool generate):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &generate
    api_core.godot_method_bind_ptrcall(bind_visualserver_set_debug_generate_wireframes,self.godot_owner,args,NULL)
    hello('hallo2')
  def  set_default_clear_color(self,  Color color):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &color._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_set_default_clear_color,self.godot_owner,args,NULL)
    hello('hallo2')
  def  shader_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_shader_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  shader_get_code(self,  RID shader):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_string* ret = NULL;

    cdef void *args[1]

    args[0] = &shader._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_shader_get_code,self.godot_owner,args,&ret)
    hello('hallo2')
    return String.new_static(dereference(ret))

  def  shader_get_default_texture_param(self,  RID shader,  String name):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    cdef void *args[2]

    args[0] = &shader._native
    args[1] = &name._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_shader_get_default_texture_param,self.godot_owner,args,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  shader_get_param_list(self,  RID shader):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_array* ret = NULL;

    cdef void *args[1]

    args[0] = &shader._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_shader_get_param_list,self.godot_owner,args,&ret)
    hello('hallo2')
    return Array.new_static(dereference(ret))

  def  shader_set_code(self,  RID shader,  String code):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &shader._native
    args[1] = &code._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_shader_set_code,self.godot_owner,args,NULL)
    hello('hallo2')
  def  shader_set_default_texture_param(self,  RID shader,  String name,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &shader._native
    args[1] = &name._native
    args[2] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_shader_set_default_texture_param,self.godot_owner,args,NULL)
    hello('hallo2')
  def  skeleton_allocate(self,  RID skeleton,  int bones,  bool is_2d_skeleton):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &skeleton._native
    args[1] = &bones
    args[2] = &is_2d_skeleton
    api_core.godot_method_bind_ptrcall(bind_visualserver_skeleton_allocate,self.godot_owner,args,NULL)
    hello('hallo2')
  def  skeleton_bone_get_transform(self,  RID skeleton,  int bone):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_transform* ret = NULL;

    cdef void *args[2]

    args[0] = &skeleton._native
    args[1] = &bone
    api_core.godot_method_bind_ptrcall(bind_visualserver_skeleton_bone_get_transform,self.godot_owner,args,&ret)
    hello('hallo2')
    return Transform.new_static(dereference(ret))

  def  skeleton_bone_get_transform_2d(self,  RID skeleton,  int bone):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_transform2d* ret = NULL;

    cdef void *args[2]

    args[0] = &skeleton._native
    args[1] = &bone
    api_core.godot_method_bind_ptrcall(bind_visualserver_skeleton_bone_get_transform_2d,self.godot_owner,args,&ret)
    hello('hallo2')
    return Transform2D.new_static(dereference(ret))

  def  skeleton_bone_set_transform(self,  RID skeleton,  int bone,  Transform transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &skeleton._native
    args[1] = &bone
    args[2] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_skeleton_bone_set_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  skeleton_bone_set_transform_2d(self,  RID skeleton,  int bone,  Transform2D transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &skeleton._native
    args[1] = &bone
    args[2] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_skeleton_bone_set_transform_2d,self.godot_owner,args,NULL)
    hello('hallo2')
  def  skeleton_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_skeleton_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  skeleton_get_bone_count(self,  RID skeleton):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &skeleton._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_skeleton_get_bone_count,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  sky_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_sky_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  sky_set_texture(self,  RID sky,  RID cube_map,  int radiance_size):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &sky._native
    args[1] = &cube_map._native
    args[2] = &radiance_size
    api_core.godot_method_bind_ptrcall(bind_visualserver_sky_set_texture,self.godot_owner,args,NULL)
    hello('hallo2')
  def  spot_light_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_spot_light_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  sync(self):
    cdef godot_object *_owner = self.godot_owner

    api_core.godot_method_bind_ptrcall(bind_visualserver_sync,self.godot_owner,NULL,NULL)
    hello('hallo2')
  def  texture_allocate(self,  RID texture,  int width,  int height,  int depth_3d,  int format,  int type,  int flags):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[7]

    args[0] = &texture._native
    args[1] = &width
    args[2] = &height
    args[3] = &depth_3d
    args[4] = &format
    args[5] = &type
    args[6] = &flags
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_allocate,self.godot_owner,args,NULL)
    hello('hallo2')
  def  texture_bind(self,  RID texture,  int number):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &texture._native
    args[1] = &number
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_bind,self.godot_owner,args,NULL)
    hello('hallo2')
  def  texture_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  texture_create_from_image(self,  classes.Image.Image image,  int flags):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    cdef void *args[2]

    args[0] = image.godot_owner
    args[1] = &flags
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_create_from_image,self.godot_owner,args,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  texture_debug_usage(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_array* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_debug_usage,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return Array.new_static(dereference(ret))

  def  texture_get_data(self,  RID texture,  int cube_side):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_object* ret = NULL;

    cdef void *args[2]

    args[0] = &texture._native
    args[1] = &cube_side
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_get_data,self.godot_owner,args,&ret)
    hello('hallo2')
  def  texture_get_depth(self,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_get_depth,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  texture_get_flags(self,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_get_flags,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  texture_get_format(self,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef classes.Image.Image_Format* ret = NULL;

    cdef void *args[1]

    args[0] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_get_format,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  texture_get_height(self,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_get_height,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  texture_get_path(self,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_string* ret = NULL;

    cdef void *args[1]

    args[0] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_get_path,self.godot_owner,args,&ret)
    hello('hallo2')
    return String.new_static(dereference(ret))

  def  texture_get_texid(self,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_get_texid,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  texture_get_type(self,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef VisualServer_TextureType* ret = NULL;

    cdef void *args[1]

    args[0] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_get_type,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  texture_get_width(self,  RID texture):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[1]

    args[0] = &texture._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_get_width,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  texture_set_data(self,  RID texture,  classes.Image.Image image,  int layer):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &texture._native
    args[1] = image.godot_owner
    args[2] = &layer
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_set_data,self.godot_owner,args,NULL)
    hello('hallo2')
  def  texture_set_data_partial(self,  RID texture,  classes.Image.Image image,  int src_x,  int src_y,  int src_w,  int src_h,  int dst_x,  int dst_y,  int dst_mip,  int layer):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[10]

    args[0] = &texture._native
    args[1] = image.godot_owner
    args[2] = &src_x
    args[3] = &src_y
    args[4] = &src_w
    args[5] = &src_h
    args[6] = &dst_x
    args[7] = &dst_y
    args[8] = &dst_mip
    args[9] = &layer
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_set_data_partial,self.godot_owner,args,NULL)
    hello('hallo2')
  def  texture_set_flags(self,  RID texture,  int flags):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &texture._native
    args[1] = &flags
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_set_flags,self.godot_owner,args,NULL)
    hello('hallo2')
  def  texture_set_path(self,  RID texture,  String path):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &texture._native
    args[1] = &path._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_set_path,self.godot_owner,args,NULL)
    hello('hallo2')
  def  texture_set_shrink_all_x2_on_set_data(self,  bool shrink):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &shrink
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_set_shrink_all_x2_on_set_data,self.godot_owner,args,NULL)
    hello('hallo2')
  def  texture_set_size_override(self,  RID texture,  int width,  int height,  int depth):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &texture._native
    args[1] = &width
    args[2] = &height
    args[3] = &depth
    api_core.godot_method_bind_ptrcall(bind_visualserver_texture_set_size_override,self.godot_owner,args,NULL)
    hello('hallo2')
  def  textures_keep_original(self,  bool enable):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &enable
    api_core.godot_method_bind_ptrcall(bind_visualserver_textures_keep_original,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_attach_camera(self,  RID viewport,  RID camera):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &camera._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_attach_camera,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_attach_canvas(self,  RID viewport,  RID canvas):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &canvas._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_attach_canvas,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_attach_to_screen(self,  RID viewport,  Rect2 rect,  int screen):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &viewport._native
    args[1] = &rect._native
    args[2] = &screen
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_attach_to_screen,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_create(self):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_create,self.godot_owner,NULL,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  viewport_detach(self,  RID viewport):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[1]

    args[0] = &viewport._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_detach,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_get_render_info(self,  RID viewport,  int info):
    cdef godot_object *_owner = self.godot_owner

    cdef int* ret = NULL;

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &info
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_get_render_info,self.godot_owner,args,&ret)
    hello('hallo2')
    return dereference(ret)

  def  viewport_get_texture(self,  RID viewport):
    cdef godot_object *_owner = self.godot_owner

    cdef godot_rid* ret = NULL;

    cdef void *args[1]

    args[0] = &viewport._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_get_texture,self.godot_owner,args,&ret)
    hello('hallo2')
    return RID.new_static(dereference(ret))

  def  viewport_remove_canvas(self,  RID viewport,  RID canvas):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &canvas._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_remove_canvas,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_active(self,  RID viewport,  bool active):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &active
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_active,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_canvas_stacking(self,  RID viewport,  RID canvas,  int layer,  int sublayer):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[4]

    args[0] = &viewport._native
    args[1] = &canvas._native
    args[2] = &layer
    args[3] = &sublayer
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_canvas_stacking,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_canvas_transform(self,  RID viewport,  RID canvas,  Transform2D offset):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &viewport._native
    args[1] = &canvas._native
    args[2] = &offset._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_canvas_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_clear_mode(self,  RID viewport,  int clear_mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &clear_mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_clear_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_debug_draw(self,  RID viewport,  int draw):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &draw
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_debug_draw,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_disable_3d(self,  RID viewport,  bool disabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &disabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_disable_3d,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_disable_environment(self,  RID viewport,  bool disabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &disabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_disable_environment,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_global_canvas_transform(self,  RID viewport,  Transform2D transform):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &transform._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_global_canvas_transform,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_hdr(self,  RID viewport,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_hdr,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_hide_canvas(self,  RID viewport,  bool hidden):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &hidden
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_hide_canvas,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_hide_scenario(self,  RID viewport,  bool hidden):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &hidden
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_hide_scenario,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_msaa(self,  RID viewport,  int msaa):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &msaa
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_msaa,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_parent_viewport(self,  RID viewport,  RID parent_viewport):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &parent_viewport._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_parent_viewport,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_render_direct_to_screen(self,  RID viewport,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_render_direct_to_screen,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_scenario(self,  RID viewport,  RID scenario):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &scenario._native
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_scenario,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_shadow_atlas_quadrant_subdivision(self,  RID viewport,  int quadrant,  int subdivision):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &viewport._native
    args[1] = &quadrant
    args[2] = &subdivision
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_shadow_atlas_quadrant_subdivision,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_shadow_atlas_size(self,  RID viewport,  int size):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &size
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_shadow_atlas_size,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_size(self,  RID viewport,  int width,  int height):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[3]

    args[0] = &viewport._native
    args[1] = &width
    args[2] = &height
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_size,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_transparent_background(self,  RID viewport,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_transparent_background,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_update_mode(self,  RID viewport,  int update_mode):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &update_mode
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_update_mode,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_usage(self,  RID viewport,  int usage):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &usage
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_usage,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_use_arvr(self,  RID viewport,  bool use_arvr):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &use_arvr
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_use_arvr,self.godot_owner,args,NULL)
    hello('hallo2')
  def  viewport_set_vflip(self,  RID viewport,  bool enabled):
    cdef godot_object *_owner = self.godot_owner

    cdef void *args[2]

    args[0] = &viewport._native
    args[1] = &enabled
    api_core.godot_method_bind_ptrcall(bind_visualserver_viewport_set_vflip,self.godot_owner,args,NULL)
    hello('hallo2')
